
Space_Game_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e78  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d20  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d78  08007d78  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d80  08007d80  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d84  08007d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  20000088  08007e0c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a4c  08007e0c  00020a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d42  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342d  00000000  00000000  00039df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00024c3e  00000000  00000000  0003e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000151b1  00000000  00000000  00062fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dc656  00000000  00000000  00078177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001547cd  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ff8  00000000  00000000  00154820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c14  00000000  00000000  00155818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000088 	.word	0x20000088
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007040 	.word	0x08007040

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000008c 	.word	0x2000008c
 800021c:	08007040 	.word	0x08007040

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__gedf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800063c:	e006      	b.n	800064c <__cmpdf2+0x4>
 800063e:	bf00      	nop

08000640 <__ledf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpdf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpdf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800065c:	bf18      	it	ne
 800065e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000662:	d01b      	beq.n	800069c <__cmpdf2+0x54>
 8000664:	b001      	add	sp, #4
 8000666:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800066a:	bf0c      	ite	eq
 800066c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000670:	ea91 0f03 	teqne	r1, r3
 8000674:	bf02      	ittt	eq
 8000676:	ea90 0f02 	teqeq	r0, r2
 800067a:	2000      	moveq	r0, #0
 800067c:	4770      	bxeq	lr
 800067e:	f110 0f00 	cmn.w	r0, #0
 8000682:	ea91 0f03 	teq	r1, r3
 8000686:	bf58      	it	pl
 8000688:	4299      	cmppl	r1, r3
 800068a:	bf08      	it	eq
 800068c:	4290      	cmpeq	r0, r2
 800068e:	bf2c      	ite	cs
 8000690:	17d8      	asrcs	r0, r3, #31
 8000692:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000696:	f040 0001 	orr.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d102      	bne.n	80006ac <__cmpdf2+0x64>
 80006a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006aa:	d107      	bne.n	80006bc <__cmpdf2+0x74>
 80006ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006b4:	d1d6      	bne.n	8000664 <__cmpdf2+0x1c>
 80006b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ba:	d0d3      	beq.n	8000664 <__cmpdf2+0x1c>
 80006bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdrcmple>:
 80006c4:	4684      	mov	ip, r0
 80006c6:	4610      	mov	r0, r2
 80006c8:	4662      	mov	r2, ip
 80006ca:	468c      	mov	ip, r1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4663      	mov	r3, ip
 80006d0:	e000      	b.n	80006d4 <__aeabi_cdcmpeq>
 80006d2:	bf00      	nop

080006d4 <__aeabi_cdcmpeq>:
 80006d4:	b501      	push	{r0, lr}
 80006d6:	f7ff ffb7 	bl	8000648 <__cmpdf2>
 80006da:	2800      	cmp	r0, #0
 80006dc:	bf48      	it	mi
 80006de:	f110 0f00 	cmnmi.w	r0, #0
 80006e2:	bd01      	pop	{r0, pc}

080006e4 <__aeabi_dcmpeq>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff fff4 	bl	80006d4 <__aeabi_cdcmpeq>
 80006ec:	bf0c      	ite	eq
 80006ee:	2001      	moveq	r0, #1
 80006f0:	2000      	movne	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_dcmplt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffea 	bl	80006d4 <__aeabi_cdcmpeq>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <__aeabi_dcmple>:
 800070c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000710:	f7ff ffe0 	bl	80006d4 <__aeabi_cdcmpeq>
 8000714:	bf94      	ite	ls
 8000716:	2001      	movls	r0, #1
 8000718:	2000      	movhi	r0, #0
 800071a:	f85d fb08 	ldr.w	pc, [sp], #8
 800071e:	bf00      	nop

08000720 <__aeabi_dcmpge>:
 8000720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000724:	f7ff ffce 	bl	80006c4 <__aeabi_cdrcmple>
 8000728:	bf94      	ite	ls
 800072a:	2001      	movls	r0, #1
 800072c:	2000      	movhi	r0, #0
 800072e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000732:	bf00      	nop

08000734 <__aeabi_dcmpgt>:
 8000734:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000738:	f7ff ffc4 	bl	80006c4 <__aeabi_cdrcmple>
 800073c:	bf34      	ite	cc
 800073e:	2001      	movcc	r0, #1
 8000740:	2000      	movcs	r0, #0
 8000742:	f85d fb08 	ldr.w	pc, [sp], #8
 8000746:	bf00      	nop

08000748 <__aeabi_d2iz>:
 8000748:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800074c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000750:	d215      	bcs.n	800077e <__aeabi_d2iz+0x36>
 8000752:	d511      	bpl.n	8000778 <__aeabi_d2iz+0x30>
 8000754:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000758:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800075c:	d912      	bls.n	8000784 <__aeabi_d2iz+0x3c>
 800075e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000766:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800076a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800076e:	fa23 f002 	lsr.w	r0, r3, r2
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000782:	d105      	bne.n	8000790 <__aeabi_d2iz+0x48>
 8000784:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000788:	bf08      	it	eq
 800078a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800078e:	4770      	bx	lr
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop

08000798 <__aeabi_uldivmod>:
 8000798:	b953      	cbnz	r3, 80007b0 <__aeabi_uldivmod+0x18>
 800079a:	b94a      	cbnz	r2, 80007b0 <__aeabi_uldivmod+0x18>
 800079c:	2900      	cmp	r1, #0
 800079e:	bf08      	it	eq
 80007a0:	2800      	cmpeq	r0, #0
 80007a2:	bf1c      	itt	ne
 80007a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007ac:	f000 b96e 	b.w	8000a8c <__aeabi_idiv0>
 80007b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007b8:	f000 f806 	bl	80007c8 <__udivmoddi4>
 80007bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007c4:	b004      	add	sp, #16
 80007c6:	4770      	bx	lr

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <game_init>:

uint8_t currentWave = 1;
uint8_t numOfAsteroidInWave[NUM_OF_WAVE] = {1, 2, 3, 4, 5};

/* Initialize game engine */
void game_init(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	vector_init(&asteroidVector);	// Initialize asteroid vector
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <game_init+0x14>)
 8000a96:	f002 f84b 	bl	8002b30 <vector_init>
	vector_init(&rocketVector);		// Initialize rocket vector
 8000a9a:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <game_init+0x18>)
 8000a9c:	f002 f848 	bl	8002b30 <vector_init>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200008d8 	.word	0x200008d8
 8000aa8:	20000550 	.word	0x20000550

08000aac <start_frame_update>:

/* Start updating game screen */
void start_frame_update(void){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <start_frame_update+0x10>)
 8000ab2:	f005 f9f5 	bl	8005ea0 <HAL_TIM_Base_Start_IT>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200004f8 	.word	0x200004f8

08000ac0 <create_player_spaceship>:

/* Create player spaceship */
void create_player_spaceship(Space_Object_t* playerSpaceShipPtr){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	playerSpaceShipPtr->Object_Property.x = 30;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	221e      	movs	r2, #30
 8000acc:	801a      	strh	r2, [r3, #0]
	playerSpaceShipPtr->Object_Property.y = 10;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	805a      	strh	r2, [r3, #2]

	playerSpaceShipPtr->Object_Property.dx = 0;
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	f04f 0300 	mov.w	r3, #0
 8000ade:	e9c1 2302 	strd	r2, r3, [r1, #8]
	playerSpaceShipPtr->Object_Property.dy = 0;
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e9c1 2304 	strd	r2, r3, [r1, #16]

	playerSpaceShipPtr->Object_Property.headingDir = HEADING_N;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	761a      	strb	r2, [r3, #24]
	playerSpaceShipPtr->Object_Property.aliveFlag = ALIVE_TRUE;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2201      	movs	r2, #1
 8000afa:	765a      	strb	r2, [r3, #25]
	playerSpaceShipPtr->Object_Property.lifeSpan = 0;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	769a      	strb	r2, [r3, #26]

	playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_NORTH;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <create_player_spaceship+0x64>)
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
	playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2218      	movs	r2, #24
 8000b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2218      	movs	r2, #24
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	080074fc 	.word	0x080074fc

08000b28 <create_asteroid>:

/* Create asteroid */
void create_asteroid(vector* asteroidVectorPtr, Space_Object_t* asteroidPtr,
		uint8_t numberOfAsteroids, Space_Object_t* playerSpaceShipPtr) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71fb      	strb	r3, [r7, #7]

	Space_Object_t* prevAsteroidPtr = NULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
	uint8_t check1 = 0, check2 = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	743b      	strb	r3, [r7, #16]
 8000b40:	2300      	movs	r3, #0
 8000b42:	74fb      	strb	r3, [r7, #19]

	for (uint8_t count = 0; count < numberOfAsteroids; count++, asteroidPtr++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	74bb      	strb	r3, [r7, #18]
 8000b48:	e073      	b.n	8000c32 <create_asteroid+0x10a>
		vector_add(asteroidVectorPtr, (void*) asteroidPtr);	// stores the address of asteroid to be created in the asteroid vector
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f002 f822 	bl	8002b96 <vector_add>

//		asteroidPtr->Object_Image.bitmapImage = ASTEROID_16x16;
//		asteroidPtr->Object_Image.imageHeight = ASTEROID_BMP_SIZE_M_HEIGHT;
//		asteroidPtr->Object_Image.imageWidth = ASTEROID_BMP_SIZE_M_WIDTH;
//		asteroidPtr->Object_Image.clearWhenDead = DEAD_OBJECT_UNDECLARED;
		asteroidPtr->Object_Image.bitmapImage = ASTEROID_24x24;
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	4a3b      	ldr	r2, [pc, #236]	; (8000c44 <create_asteroid+0x11c>)
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
		asteroidPtr->Object_Image.imageHeight = ASTEROID_BMP_SIZE_L_HEIGHT;
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	2218      	movs	r2, #24
 8000b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		asteroidPtr->Object_Image.imageWidth = ASTEROID_BMP_SIZE_L_WIDTH;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	2218      	movs	r2, #24
 8000b64:	f883 2020 	strb.w	r2, [r3, #32]
		asteroidPtr->Object_Image.clearWhenDead = DEAD_OBJECT_UNDECLARED;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		// Randomize asteroid's position until the created asteroid doesn't
		// collide with player and other asteroids
		do {
			check1 = COLLISION_FALSE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	743b      	strb	r3, [r7, #16]
			check2 = COLLISION_FALSE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	74fb      	strb	r3, [r7, #19]

			asteroidPtr->Object_Property.x = game_random_x();
 8000b78:	f000 fddc 	bl	8001734 <game_random_x>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	801a      	strh	r2, [r3, #0]
			asteroidPtr->Object_Property.y = game_random_y();
 8000b84:	f000 fdf2 	bl	800176c <game_random_y>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	805a      	strh	r2, [r3, #2]

			check1 = collision_detect(asteroidPtr, playerSpaceShipPtr);
 8000b90:	6839      	ldr	r1, [r7, #0]
 8000b92:	68b8      	ldr	r0, [r7, #8]
 8000b94:	f001 f868 	bl	8001c68 <collision_detect>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	743b      	strb	r3, [r7, #16]
			if (check1 == COLLISION_TRUE){
 8000b9c:	7c3b      	ldrb	r3, [r7, #16]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d019      	beq.n	8000bd6 <create_asteroid+0xae>
				continue;
			}

			if (count == 0){
 8000ba2:	7cbb      	ldrb	r3, [r7, #18]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d01e      	beq.n	8000be6 <create_asteroid+0xbe>
				// No need to check collision for first asteroid created
				break;
			}

			prevAsteroidPtr = asteroidPtr-1;	// Adjacent address as asteroidPtr is incremented with corresponding count
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3b30      	subs	r3, #48	; 0x30
 8000bac:	617b      	str	r3, [r7, #20]

			for (uint8_t i = 0; i < count; i++, prevAsteroidPtr--){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	747b      	strb	r3, [r7, #17]
 8000bb2:	e00b      	b.n	8000bcc <create_asteroid+0xa4>
				check2 = collision_detect(asteroidPtr, prevAsteroidPtr);
 8000bb4:	6979      	ldr	r1, [r7, #20]
 8000bb6:	68b8      	ldr	r0, [r7, #8]
 8000bb8:	f001 f856 	bl	8001c68 <collision_detect>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	74fb      	strb	r3, [r7, #19]
			for (uint8_t i = 0; i < count; i++, prevAsteroidPtr--){
 8000bc0:	7c7b      	ldrb	r3, [r7, #17]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	747b      	strb	r3, [r7, #17]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3b30      	subs	r3, #48	; 0x30
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	7c7a      	ldrb	r2, [r7, #17]
 8000bce:	7cbb      	ldrb	r3, [r7, #18]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3ef      	bcc.n	8000bb4 <create_asteroid+0x8c>
 8000bd4:	e000      	b.n	8000bd8 <create_asteroid+0xb0>
				continue;
 8000bd6:	bf00      	nop
			}
		} while((check1 == COLLISION_TRUE) || (check2 == COLLISION_TRUE));
 8000bd8:	7c3b      	ldrb	r3, [r7, #16]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d0c8      	beq.n	8000b70 <create_asteroid+0x48>
 8000bde:	7cfb      	ldrb	r3, [r7, #19]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d0c5      	beq.n	8000b70 <create_asteroid+0x48>
 8000be4:	e000      	b.n	8000be8 <create_asteroid+0xc0>
				break;
 8000be6:	bf00      	nop

		asteroidPtr->Object_Property.dx = game_random_sign()*ASTEROID_BASE_SPEED;
 8000be8:	f000 fdda 	bl	80017a0 <game_random_sign>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fcb8 	bl	8000564 <__aeabi_i2d>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	e9c1 2302 	strd	r2, r3, [r1, #8]
		asteroidPtr->Object_Property.dy = game_random_sign()*ASTEROID_BASE_SPEED;
 8000bfe:	f000 fdcf 	bl	80017a0 <game_random_sign>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fcad 	bl	8000564 <__aeabi_i2d>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	e9c1 2304 	strd	r2, r3, [r1, #16]
		asteroidPtr->Object_Property.aliveFlag = ALIVE_TRUE;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2201      	movs	r2, #1
 8000c18:	765a      	strb	r2, [r3, #25]
		asteroidPtr->Object_Property.lifeSpan = 0;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	769a      	strb	r2, [r3, #26]
		asteroidPtr->Object_Property.asteroidSize = ASTEROID_SIZE_L;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2200      	movs	r2, #0
 8000c24:	76da      	strb	r2, [r3, #27]
	for (uint8_t count = 0; count < numberOfAsteroids; count++, asteroidPtr++){
 8000c26:	7cbb      	ldrb	r3, [r7, #18]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	74bb      	strb	r3, [r7, #18]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	3330      	adds	r3, #48	; 0x30
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	7cba      	ldrb	r2, [r7, #18]
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d387      	bcc.n	8000b4a <create_asteroid+0x22>
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0800709c 	.word	0x0800709c

08000c48 <create_rocket>:

/* Create rocket */
void create_rocket(vector *rocketVectorPtr, Space_Object_t* rocketPtr,
		Space_Object_t* playerSpaceShipPtr){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	if(!button_readPin(SHOOT_BUTTON_PORT, SHOOT_BUTTON_PIN)){
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	4898      	ldr	r0, [pc, #608]	; (8000ebc <create_rocket+0x274>)
 8000c5a:	f002 fb4f 	bl	80032fc <button_readPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f040 81c7 	bne.w	8000ff4 <create_rocket+0x3ac>
		if (shootButtonFirstTimeFlag == FIRST_TIME_TRUE){
 8000c66:	4b96      	ldr	r3, [pc, #600]	; (8000ec0 <create_rocket+0x278>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	f040 81c9 	bne.w	8001002 <create_rocket+0x3ba>
			HAL_TIM_Base_Start_IT(&htim2);
 8000c70:	4894      	ldr	r0, [pc, #592]	; (8000ec4 <create_rocket+0x27c>)
 8000c72:	f005 f915 	bl	8005ea0 <HAL_TIM_Base_Start_IT>

			shootButtonFirstTimeFlag = FIRST_TIME_FALSE;
 8000c76:	4b92      	ldr	r3, [pc, #584]	; (8000ec0 <create_rocket+0x278>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_SET); // Turning ON green LED for visual indication
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4891      	ldr	r0, [pc, #580]	; (8000ec8 <create_rocket+0x280>)
 8000c82:	f003 fe5d 	bl	8004940 <HAL_GPIO_WritePin>

			prevScore = currentScore;
 8000c86:	4b91      	ldr	r3, [pc, #580]	; (8000ecc <create_rocket+0x284>)
 8000c88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c8c:	4b90      	ldr	r3, [pc, #576]	; (8000ed0 <create_rocket+0x288>)
 8000c8e:	801a      	strh	r2, [r3, #0]
			currentScore--;
 8000c90:	4b8e      	ldr	r3, [pc, #568]	; (8000ecc <create_rocket+0x284>)
 8000c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	4b8b      	ldr	r3, [pc, #556]	; (8000ecc <create_rocket+0x284>)
 8000ca0:	801a      	strh	r2, [r3, #0]

			Space_Object_t* head = rocketPtr;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	617b      	str	r3, [r7, #20]

			while((rocketPtr->Object_Property.aliveFlag != ALIVE_FALSE) && (rocketPtr->Object_Property.aliveFlag != ALIVE_UNSET)){
 8000ca6:	e008      	b.n	8000cba <create_rocket+0x72>
				rocketPtr++;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3330      	adds	r3, #48	; 0x30
 8000cac:	60bb      	str	r3, [r7, #8]
				if(rocketPtr - head > (ROCKET_BUFFER_SIZE-1)){
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b60      	cmp	r3, #96	; 0x60
 8000cb6:	f300 81a3 	bgt.w	8001000 <create_rocket+0x3b8>
			while((rocketPtr->Object_Property.aliveFlag != ALIVE_FALSE) && (rocketPtr->Object_Property.aliveFlag != ALIVE_UNSET)){
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	7e5b      	ldrb	r3, [r3, #25]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d003      	beq.n	8000cca <create_rocket+0x82>
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	7e5b      	ldrb	r3, [r3, #25]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1ee      	bne.n	8000ca8 <create_rocket+0x60>
					return;
				}
			}

			vector_add(rocketVectorPtr, rocketPtr);
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f001 ff62 	bl	8002b96 <vector_add>

			rocketPtr->Object_Property.aliveFlag = ALIVE_TRUE;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	765a      	strb	r2, [r3, #25]
			rocketPtr->Object_Property.lifeSpan = ROCKET_LIFESPAN;
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	221e      	movs	r2, #30
 8000cdc:	769a      	strb	r2, [r3, #26]
			rocketPtr->Object_Image.clearWhenDead = DEAD_OBJECT_UNDECLARED;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			if (playerSpaceShipPtr->Object_Property.headingDir == HEADING_N){
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7e1b      	ldrb	r3, [r3, #24]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d12a      	bne.n	8000d44 <create_rocket+0xfc>
				rocketPtr->Object_Property.x = playerSpaceShipPtr->Object_Property.x + ROCKET_N_START_X_POS;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	801a      	strh	r2, [r3, #0]
				rocketPtr->Object_Property.y = playerSpaceShipPtr->Object_Property.y + ROCKET_N_START_Y_POS;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	3b0c      	subs	r3, #12
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	805a      	strh	r2, [r3, #2]

				rocketPtr->Object_Property.dx = 0;
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
				rocketPtr->Object_Property.dy = -ROCKET_BASE_SPEED;
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	f04f 0200 	mov.w	r2, #0
 8000d26:	4b6b      	ldr	r3, [pc, #428]	; (8000ed4 <create_rocket+0x28c>)
 8000d28:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rocketPtr->Object_Image.bitmapImage = ROCKET_12x12;
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4a6a      	ldr	r2, [pc, #424]	; (8000ed8 <create_rocket+0x290>)
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
				rocketPtr->Object_Image.imageHeight = ROCKET_BMP_HEIGHT;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	220c      	movs	r2, #12
 8000d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				rocketPtr->Object_Image.imageWidth = ROCKET_BMP_WIDTH;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	220c      	movs	r2, #12
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]
 8000d42:	e15e      	b.n	8001002 <create_rocket+0x3ba>
			}
			else if (playerSpaceShipPtr->Object_Property.headingDir == HEADING_S){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7e1b      	ldrb	r3, [r3, #24]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d12a      	bne.n	8000da2 <create_rocket+0x15a>
				rocketPtr->Object_Property.x = playerSpaceShipPtr->Object_Property.x + ROCKET_S_START_X_POS;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	330c      	adds	r3, #12
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	801a      	strh	r2, [r3, #0]
				rocketPtr->Object_Property.y = playerSpaceShipPtr->Object_Property.y + ROCKET_S_START_Y_POS;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	330c      	adds	r3, #12
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	805a      	strh	r2, [r3, #2]

				rocketPtr->Object_Property.dx = 0;
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				rocketPtr->Object_Property.dy = ROCKET_BASE_SPEED;
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	4b55      	ldr	r3, [pc, #340]	; (8000edc <create_rocket+0x294>)
 8000d86:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rocketPtr->Object_Image.bitmapImage = ROCKET_12x12;
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	4a52      	ldr	r2, [pc, #328]	; (8000ed8 <create_rocket+0x290>)
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
				rocketPtr->Object_Image.imageHeight = ROCKET_BMP_HEIGHT;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	220c      	movs	r2, #12
 8000d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				rocketPtr->Object_Image.imageWidth = ROCKET_BMP_WIDTH;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	f883 2020 	strb.w	r2, [r3, #32]
 8000da0:	e12f      	b.n	8001002 <create_rocket+0x3ba>
			}
			else if (playerSpaceShipPtr->Object_Property.headingDir == HEADING_E){
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7e1b      	ldrb	r3, [r3, #24]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d12a      	bne.n	8000e00 <create_rocket+0x1b8>
				rocketPtr->Object_Property.x = playerSpaceShipPtr->Object_Property.x + ROCKET_E_START_X_POS;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3318      	adds	r3, #24
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	801a      	strh	r2, [r3, #0]
				rocketPtr->Object_Property.y = playerSpaceShipPtr->Object_Property.y + ROCKET_E_START_Y_POS;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	330c      	adds	r3, #12
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	805a      	strh	r2, [r3, #2]

				rocketPtr->Object_Property.dx = ROCKET_BASE_SPEED;
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	4b41      	ldr	r3, [pc, #260]	; (8000edc <create_rocket+0x294>)
 8000dd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
				rocketPtr->Object_Property.dy = 0;
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rocketPtr->Object_Image.bitmapImage = ROCKET_12x12;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4a3b      	ldr	r2, [pc, #236]	; (8000ed8 <create_rocket+0x290>)
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
				rocketPtr->Object_Image.imageHeight = ROCKET_BMP_HEIGHT;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	220c      	movs	r2, #12
 8000df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				rocketPtr->Object_Image.imageWidth = ROCKET_BMP_WIDTH;
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	220c      	movs	r2, #12
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]
 8000dfe:	e100      	b.n	8001002 <create_rocket+0x3ba>
			}
			else if (playerSpaceShipPtr->Object_Property.headingDir == HEADING_W){
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d12a      	bne.n	8000e5e <create_rocket+0x216>
				rocketPtr->Object_Property.x = playerSpaceShipPtr->Object_Property.x + ROCKET_W_START_X_POS;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	3b0c      	subs	r3, #12
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	801a      	strh	r2, [r3, #0]
				rocketPtr->Object_Property.y = playerSpaceShipPtr->Object_Property.y + ROCKET_W_START_Y_POS;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	330c      	adds	r3, #12
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	805a      	strh	r2, [r3, #2]

				rocketPtr->Object_Property.dx = -ROCKET_BASE_SPEED;
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <create_rocket+0x28c>)
 8000e34:	e9c1 2302 	strd	r2, r3, [r1, #8]
				rocketPtr->Object_Property.dy = 0;
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rocketPtr->Object_Image.bitmapImage = ROCKET_12x12;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <create_rocket+0x290>)
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
				rocketPtr->Object_Image.imageHeight = ROCKET_BMP_HEIGHT;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	220c      	movs	r2, #12
 8000e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				rocketPtr->Object_Image.imageWidth = ROCKET_BMP_WIDTH;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	220c      	movs	r2, #12
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]
 8000e5c:	e0d1      	b.n	8001002 <create_rocket+0x3ba>
			}
			else if (playerSpaceShipPtr->Object_Property.headingDir == HEADING_NE){
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7e1b      	ldrb	r3, [r3, #24]
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d13c      	bne.n	8000ee0 <create_rocket+0x298>
				rocketPtr->Object_Property.x = playerSpaceShipPtr->Object_Property.x + ROCKET_NE_START_X_POS;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	3318      	adds	r3, #24
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	801a      	strh	r2, [r3, #0]
				rocketPtr->Object_Property.y = playerSpaceShipPtr->Object_Property.y + ROCKET_NE_START_Y_POS;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b0c      	subs	r3, #12
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	805a      	strh	r2, [r3, #2]

				rocketPtr->Object_Property.dx = ROCKET_BASE_SPEED;
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <create_rocket+0x294>)
 8000e92:	e9c1 2302 	strd	r2, r3, [r1, #8]
				rocketPtr->Object_Property.dy = -ROCKET_BASE_SPEED;
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <create_rocket+0x28c>)
 8000e9e:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rocketPtr->Object_Image.bitmapImage = ROCKET_12x12;
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4a0c      	ldr	r2, [pc, #48]	; (8000ed8 <create_rocket+0x290>)
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
				rocketPtr->Object_Image.imageHeight = ROCKET_BMP_HEIGHT;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	220c      	movs	r2, #12
 8000eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				rocketPtr->Object_Image.imageWidth = ROCKET_BMP_WIDTH;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
 8000eb8:	e0a3      	b.n	8001002 <create_rocket+0x3ba>
 8000eba:	bf00      	nop
 8000ebc:	40021400 	.word	0x40021400
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	2000094c 	.word	0x2000094c
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	200000a6 	.word	0x200000a6
 8000ed0:	200000a8 	.word	0x200000a8
 8000ed4:	c0080000 	.word	0xc0080000
 8000ed8:	080074e4 	.word	0x080074e4
 8000edc:	40080000 	.word	0x40080000
			}
			else if (playerSpaceShipPtr->Object_Property.headingDir == HEADING_SE){
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7e1b      	ldrb	r3, [r3, #24]
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d129      	bne.n	8000f3c <create_rocket+0x2f4>
				rocketPtr->Object_Property.x = playerSpaceShipPtr->Object_Property.x + ROCKET_SE_START_X_POS;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	3318      	adds	r3, #24
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	801a      	strh	r2, [r3, #0]
				rocketPtr->Object_Property.y = playerSpaceShipPtr->Object_Property.y + ROCKET_SE_START_Y_POS;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	3318      	adds	r3, #24
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	805a      	strh	r2, [r3, #2]

				rocketPtr->Object_Property.dx = ROCKET_BASE_SPEED;
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <create_rocket+0x3c0>)
 8000f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
				rocketPtr->Object_Property.dy = ROCKET_BASE_SPEED;
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <create_rocket+0x3c0>)
 8000f20:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rocketPtr->Object_Image.bitmapImage = ROCKET_12x12;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <create_rocket+0x3c4>)
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
				rocketPtr->Object_Image.imageHeight = ROCKET_BMP_HEIGHT;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	220c      	movs	r2, #12
 8000f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				rocketPtr->Object_Image.imageWidth = ROCKET_BMP_WIDTH;
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	220c      	movs	r2, #12
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
 8000f3a:	e062      	b.n	8001002 <create_rocket+0x3ba>
			}
			else if (playerSpaceShipPtr->Object_Property.headingDir == HEADING_NW){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7e1b      	ldrb	r3, [r3, #24]
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d129      	bne.n	8000f98 <create_rocket+0x350>
				rocketPtr->Object_Property.x = playerSpaceShipPtr->Object_Property.x + ROCKET_NW_START_X_POS;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3b0c      	subs	r3, #12
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	801a      	strh	r2, [r3, #0]
				rocketPtr->Object_Property.y = playerSpaceShipPtr->Object_Property.y + ROCKET_NW_START_Y_POS;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b0c      	subs	r3, #12
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	805a      	strh	r2, [r3, #2]

				rocketPtr->Object_Property.dx = -ROCKET_BASE_SPEED;
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <create_rocket+0x3c8>)
 8000f70:	e9c1 2302 	strd	r2, r3, [r1, #8]
				rocketPtr->Object_Property.dy = -ROCKET_BASE_SPEED;
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <create_rocket+0x3c8>)
 8000f7c:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rocketPtr->Object_Image.bitmapImage = ROCKET_12x12;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4a22      	ldr	r2, [pc, #136]	; (800100c <create_rocket+0x3c4>)
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
				rocketPtr->Object_Image.imageHeight = ROCKET_BMP_HEIGHT;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	220c      	movs	r2, #12
 8000f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				rocketPtr->Object_Image.imageWidth = ROCKET_BMP_WIDTH;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	220c      	movs	r2, #12
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]
 8000f96:	e034      	b.n	8001002 <create_rocket+0x3ba>
			}
			else if (playerSpaceShipPtr->Object_Property.headingDir == HEADING_SW){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7e1b      	ldrb	r3, [r3, #24]
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d130      	bne.n	8001002 <create_rocket+0x3ba>
				rocketPtr->Object_Property.x = playerSpaceShipPtr->Object_Property.x + ROCKET_SW_START_X_POS;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	3b0c      	subs	r3, #12
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	801a      	strh	r2, [r3, #0]
				rocketPtr->Object_Property.y = playerSpaceShipPtr->Object_Property.y + ROCKET_SW_START_Y_POS;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3318      	adds	r3, #24
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	805a      	strh	r2, [r3, #2]

				rocketPtr->Object_Property.dx = -ROCKET_BASE_SPEED;
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <create_rocket+0x3c8>)
 8000fcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
				rocketPtr->Object_Property.dy = ROCKET_BASE_SPEED;
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <create_rocket+0x3c0>)
 8000fd8:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rocketPtr->Object_Image.bitmapImage = ROCKET_12x12;
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <create_rocket+0x3c4>)
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
				rocketPtr->Object_Image.imageHeight = ROCKET_BMP_HEIGHT;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				rocketPtr->Object_Image.imageWidth = ROCKET_BMP_WIDTH;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	220c      	movs	r2, #12
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
 8000ff2:	e006      	b.n	8001002 <create_rocket+0x3ba>
			}
		}
	}
	else {
		HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET); // Turning OFF green LED for visual indication
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4806      	ldr	r0, [pc, #24]	; (8001014 <create_rocket+0x3cc>)
 8000ffa:	f003 fca1 	bl	8004940 <HAL_GPIO_WritePin>
 8000ffe:	e000      	b.n	8001002 <create_rocket+0x3ba>
					return;
 8001000:	bf00      	nop
	}
}
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40080000 	.word	0x40080000
 800100c:	080074e4 	.word	0x080074e4
 8001010:	c0080000 	.word	0xc0080000
 8001014:	40020400 	.word	0x40020400

08001018 <draw_player_spaceship>:


/* Draws the created spaceship on OLED screen */
void draw_player_spaceship(Space_Object_t* playerSpaceShipPtr){
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]

	ssd1306_Clear(5);
 8001020:	2005      	movs	r0, #5
 8001022:	f001 fb40 	bl	80026a6 <ssd1306_Clear>
	ssd1306_DrawBitmap(playerSpaceShipPtr->Object_Property.x, playerSpaceShipPtr->Object_Property.y,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	b2d8      	uxtb	r0, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001034:	b2d9      	uxtb	r1, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 4020 	ldrb.w	r4, [r3, #32]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001046:	2501      	movs	r5, #1
 8001048:	9501      	str	r5, [sp, #4]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4623      	mov	r3, r4
 800104e:	f001 facf 	bl	80025f0 <ssd1306_DrawBitmap>
			playerSpaceShipPtr->Object_Image.bitmapImage, playerSpaceShipPtr->Object_Image.imageWidth,
			playerSpaceShipPtr->Object_Image.imageHeight, White);
	ssd1306_UpdateScreen();
 8001052:	f001 f98b 	bl	800236c <ssd1306_UpdateScreen>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bdb0      	pop	{r4, r5, r7, pc}

0800105e <draw_asteroid>:

/* Draws all the created asteroids on OLED screen */
void draw_asteroid(vector* asteroidVectorPtr){
 800105e:	b5b0      	push	{r4, r5, r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af02      	add	r7, sp, #8
 8001064:	6078      	str	r0, [r7, #4]
	Space_Object_t* asteroidPtr = NULL;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
	for (uint8_t count = 0; count < asteroidVectorPtr->total; count++){
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e020      	b.n	80010b2 <draw_asteroid+0x54>
		asteroidPtr = vector_get(asteroidVectorPtr, count);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f001 fdaf 	bl	8002bd8 <vector_get>
 800107a:	60b8      	str	r0, [r7, #8]
//		ssd1306_Clear(5);
		ssd1306_DrawBitmap(asteroidPtr->Object_Property.x, asteroidPtr->Object_Property.y,
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800108a:	b2d9      	uxtb	r1, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f893 4020 	ldrb.w	r4, [r3, #32]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800109c:	2501      	movs	r5, #1
 800109e:	9501      	str	r5, [sp, #4]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	4623      	mov	r3, r4
 80010a4:	f001 faa4 	bl	80025f0 <ssd1306_DrawBitmap>
		asteroidPtr->Object_Image.bitmapImage, asteroidPtr->Object_Image.imageWidth,
		asteroidPtr->Object_Image.imageHeight, White);
		ssd1306_UpdateScreen();
 80010a8:	f001 f960 	bl	800236c <ssd1306_UpdateScreen>
	for (uint8_t count = 0; count < asteroidVectorPtr->total; count++){
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbd9      	blt.n	8001070 <draw_asteroid+0x12>
	}
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bdb0      	pop	{r4, r5, r7, pc}

080010c6 <draw_rocket>:

/* Draws the created rocket on OLED screen */
void draw_rocket(vector* rocketVectorPtr){
 80010c6:	b5b0      	push	{r4, r5, r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af02      	add	r7, sp, #8
 80010cc:	6078      	str	r0, [r7, #4]
	Space_Object_t* rocketPtr = NULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
	for (uint8_t count = 0; count < rocketVectorPtr->total; count++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e020      	b.n	800111a <draw_rocket+0x54>
		rocketPtr = vector_get(rocketVectorPtr, count);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	4619      	mov	r1, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f001 fd7b 	bl	8002bd8 <vector_get>
 80010e2:	60b8      	str	r0, [r7, #8]
//		ssd1306_Clear(5);
		ssd1306_DrawBitmap(rocketPtr->Object_Property.x, rocketPtr->Object_Property.y,
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	b2d8      	uxtb	r0, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f893 4020 	ldrb.w	r4, [r3, #32]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001104:	2501      	movs	r5, #1
 8001106:	9501      	str	r5, [sp, #4]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	f001 fa70 	bl	80025f0 <ssd1306_DrawBitmap>
		rocketPtr->Object_Image.bitmapImage, rocketPtr->Object_Image.imageWidth,
		rocketPtr->Object_Image.imageHeight, White);
		ssd1306_UpdateScreen();
 8001110:	f001 f92c 	bl	800236c <ssd1306_UpdateScreen>
	for (uint8_t count = 0; count < rocketVectorPtr->total; count++){
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3301      	adds	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbd9      	blt.n	80010d8 <draw_rocket+0x12>
	}
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bdb0      	pop	{r4, r5, r7, pc}

0800112e <update_player_spaceship>:

/* Update player spaceship information */
void update_player_spaceship(Space_Object_t* playerSpaceShipPtr){
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	update_spaceship_dir(playerSpaceShipPtr);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fb54 	bl	80017e4 <update_spaceship_dir>
	update_spaceship_pos(playerSpaceShipPtr);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 fc03 	bl	8001948 <update_spaceship_pos>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <update_asteroid>:

/* Update active asteroid information */
void update_asteroid (vector* asteroidVectorPtr, Space_Object_t* playerSpaceShipPtr){
 800114c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001150:	b088      	sub	sp, #32
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
	Space_Object_t* asteroidPtr = NULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
	Space_Object_t* otherAsteroidPtr = NULL;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

	for (uint8_t count = 0; count < asteroidVectorPtr->total; count++){
 8001160:	2300      	movs	r3, #0
 8001162:	77fb      	strb	r3, [r7, #31]
 8001164:	e09c      	b.n	80012a0 <update_asteroid+0x154>
		asteroidPtr = vector_get(asteroidVectorPtr, count);
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	4619      	mov	r1, r3
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f001 fd34 	bl	8002bd8 <vector_get>
 8001170:	61b8      	str	r0, [r7, #24]

		// Update current asteroid's position
		asteroidPtr->Object_Property.x += asteroidPtr->Object_Property.dx;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9f3 	bl	8000564 <__aeabi_i2d>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001184:	f7ff f8a2 	bl	80002cc <__adddf3>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fada 	bl	8000748 <__aeabi_d2iz>
 8001194:	4603      	mov	r3, r0
 8001196:	b21a      	sxth	r2, r3
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	801a      	strh	r2, [r3, #0]
		asteroidPtr->Object_Property.y += asteroidPtr->Object_Property.dy;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9de 	bl	8000564 <__aeabi_i2d>
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011ae:	f7ff f88d 	bl	80002cc <__adddf3>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fac5 	bl	8000748 <__aeabi_d2iz>
 80011be:	4603      	mov	r3, r0
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	805a      	strh	r2, [r3, #2]
		wrap_coordinate(&asteroidPtr->Object_Property.x, &asteroidPtr->Object_Property.y);
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	3302      	adds	r3, #2
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f000 fa50 	bl	8001674 <wrap_coordinate>

		// If there are more than one active asteroids check whether
		// the current asteroid collides with other asteroid
		if (asteroidVectorPtr->total > 1){
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	dd54      	ble.n	8001286 <update_asteroid+0x13a>
			for (uint8_t i = count+1; i < asteroidVectorPtr->total; i++){
 80011dc:	7ffb      	ldrb	r3, [r7, #31]
 80011de:	3301      	adds	r3, #1
 80011e0:	77bb      	strb	r3, [r7, #30]
 80011e2:	e04b      	b.n	800127c <update_asteroid+0x130>
				otherAsteroidPtr = vector_get(asteroidVectorPtr, i);
 80011e4:	7fbb      	ldrb	r3, [r7, #30]
 80011e6:	4619      	mov	r1, r3
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f001 fcf5 	bl	8002bd8 <vector_get>
 80011ee:	6178      	str	r0, [r7, #20]

				if (otherAsteroidPtr->Object_Property.aliveFlag == ALIVE_TRUE){
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	7e5b      	ldrb	r3, [r3, #25]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d13e      	bne.n	8001276 <update_asteroid+0x12a>
					if (collision_detect(asteroidPtr, otherAsteroidPtr) == COLLISION_TRUE){
 80011f8:	6979      	ldr	r1, [r7, #20]
 80011fa:	69b8      	ldr	r0, [r7, #24]
 80011fc:	f000 fd34 	bl	8001c68 <collision_detect>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d137      	bne.n	8001276 <update_asteroid+0x12a>
						// If collided both asteroids travel in opposite directions
						asteroidPtr->Object_Property.dx *= -1;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800120c:	4614      	mov	r4, r2
 800120e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	e9c3 4502 	strd	r4, r5, [r3, #8]
						asteroidPtr->Object_Property.dy *= -1;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800121e:	4690      	mov	r8, r2
 8001220:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	e9c3 8904 	strd	r8, r9, [r3, #16]
						otherAsteroidPtr->Object_Property.dx *= -1;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001230:	4692      	mov	sl, r2
 8001232:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	e9c3 ab02 	strd	sl, fp, [r3, #8]
						otherAsteroidPtr->Object_Property.dy *= -1;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001242:	603a      	str	r2, [r7, #0]
 8001244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	ed97 7b00 	vldr	d7, [r7]
 8001250:	ed83 7b04 	vstr	d7, [r3, #16]

						// Toggle all 3 LEDs once to indicate asteroid collision
						HAL_GPIO_TogglePin(LD1_Green_GPIO_Port, LD1_Green_Pin);
 8001254:	2101      	movs	r1, #1
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <update_asteroid+0x16c>)
 8001258:	f003 fb8b 	bl	8004972 <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(LD2_Blue_GPIO_Port, LD2_Blue_Pin);
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	4816      	ldr	r0, [pc, #88]	; (80012b8 <update_asteroid+0x16c>)
 8001260:	f003 fb87 	bl	8004972 <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(LD3_Red_GPIO_Port, LD3_Red_Pin);
 8001264:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <update_asteroid+0x16c>)
 800126a:	f003 fb82 	bl	8004972 <HAL_GPIO_TogglePin>
						HAL_Delay(500);
 800126e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001272:	f002 f911 	bl	8003498 <HAL_Delay>
			for (uint8_t i = count+1; i < asteroidVectorPtr->total; i++){
 8001276:	7fbb      	ldrb	r3, [r7, #30]
 8001278:	3301      	adds	r3, #1
 800127a:	77bb      	strb	r3, [r7, #30]
 800127c:	7fba      	ldrb	r2, [r7, #30]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	429a      	cmp	r2, r3
 8001284:	dbae      	blt.n	80011e4 <update_asteroid+0x98>
				}
			}
		}

		// Check whether the current asteroid collided with player spaceship
		if (collision_detect(asteroidPtr, playerSpaceShipPtr) == COLLISION_TRUE){
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	69b8      	ldr	r0, [r7, #24]
 800128a:	f000 fced 	bl	8001c68 <collision_detect>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	d102      	bne.n	800129a <update_asteroid+0x14e>

			// If collided then set player spaceship to dead and return to main loop
			playerSpaceShipPtr->Object_Property.aliveFlag = ALIVE_FALSE;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2202      	movs	r2, #2
 8001298:	765a      	strb	r2, [r3, #25]
	for (uint8_t count = 0; count < asteroidVectorPtr->total; count++){
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	3301      	adds	r3, #1
 800129e:	77fb      	strb	r3, [r7, #31]
 80012a0:	7ffa      	ldrb	r2, [r7, #31]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	f6ff af5d 	blt.w	8001166 <update_asteroid+0x1a>
//			HAL_Delay(500);
//			HAL_GPIO_TogglePin(LD3_Red_GPIO_Port, LD3_Red_Pin);
//			HAL_Delay(500);
		}
	}
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012b8:	40020400 	.word	0x40020400

080012bc <update_rocket>:

/* Update active rocket information */
void update_rocket(vector* rocketVectorPtr, vector* asteroidVectorPtr) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	Space_Object_t* rocketPtr = NULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
	Space_Object_t* asteroidPtr = NULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]

	for (uint8_t count = 0; count < rocketVectorPtr->total; count++){
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
 80012d2:	e0b0      	b.n	8001436 <update_rocket+0x17a>
		rocketPtr = vector_get(rocketVectorPtr, count);
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	4619      	mov	r1, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f001 fc7d 	bl	8002bd8 <vector_get>
 80012de:	6138      	str	r0, [r7, #16]

		rocketPtr->Object_Property.lifeSpan--;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	7e9b      	ldrb	r3, [r3, #26]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	769a      	strb	r2, [r3, #26]

		rocketPtr->Object_Property.x += rocketPtr->Object_Property.dx;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f936 	bl	8000564 <__aeabi_i2d>
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012fe:	f7fe ffe5 	bl	80002cc <__adddf3>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fa1d 	bl	8000748 <__aeabi_d2iz>
 800130e:	4603      	mov	r3, r0
 8001310:	b21a      	sxth	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	801a      	strh	r2, [r3, #0]
		rocketPtr->Object_Property.y += rocketPtr->Object_Property.dy;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f921 	bl	8000564 <__aeabi_i2d>
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001328:	f7fe ffd0 	bl	80002cc <__adddf3>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fa08 	bl	8000748 <__aeabi_d2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	b21a      	sxth	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	805a      	strh	r2, [r3, #2]
		wrap_coordinate(&rocketPtr->Object_Property.x, &rocketPtr->Object_Property.y);
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	3302      	adds	r3, #2
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f000 f993 	bl	8001674 <wrap_coordinate>

		// If lifespan of rocket becomes 0 then set the rocket to dead
		// and remove it from rocket vector
		if (!(rocketPtr->Object_Property.lifeSpan)) {
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	7e9b      	ldrb	r3, [r3, #26]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10d      	bne.n	8001372 <update_rocket+0xb6>
			rocketPtr->Object_Property.aliveFlag = ALIVE_FALSE;
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	2202      	movs	r2, #2
 800135a:	765a      	strb	r2, [r3, #25]
			delete_dead_rocket(rocketPtr);
 800135c:	6938      	ldr	r0, [r7, #16]
 800135e:	f000 fce1 	bl	8001d24 <delete_dead_rocket>
			vector_delete(rocketVectorPtr, count);
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f001 fc51 	bl	8002c0e <vector_delete>
			count--;
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	3b01      	subs	r3, #1
 8001370:	75fb      	strb	r3, [r7, #23]
		}

		// If rocket hit a medium asteroid, set both as dead
		// and remove each of them from their respective vectors

		for (uint8_t i = 0; i < asteroidVectorPtr->total; i++){
 8001372:	2300      	movs	r3, #0
 8001374:	75bb      	strb	r3, [r7, #22]
 8001376:	e056      	b.n	8001426 <update_rocket+0x16a>
			asteroidPtr = vector_get(asteroidVectorPtr, i);
 8001378:	7dbb      	ldrb	r3, [r7, #22]
 800137a:	4619      	mov	r1, r3
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f001 fc2b 	bl	8002bd8 <vector_get>
 8001382:	60f8      	str	r0, [r7, #12]

			if (collision_detect(rocketPtr, asteroidPtr) == COLLISION_TRUE){
 8001384:	68f9      	ldr	r1, [r7, #12]
 8001386:	6938      	ldr	r0, [r7, #16]
 8001388:	f000 fc6e 	bl	8001c68 <collision_detect>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d146      	bne.n	8001420 <update_rocket+0x164>
				prevScore = currentScore;
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <update_rocket+0x190>)
 8001394:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <update_rocket+0x194>)
 800139a:	801a      	strh	r2, [r3, #0]
				currentScore += 5;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <update_rocket+0x190>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3305      	adds	r3, #5
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <update_rocket+0x190>)
 80013ac:	801a      	strh	r2, [r3, #0]

				rocketPtr->Object_Property.aliveFlag = ALIVE_FALSE;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	2202      	movs	r2, #2
 80013b2:	765a      	strb	r2, [r3, #25]
				delete_dead_rocket(rocketPtr);
 80013b4:	6938      	ldr	r0, [r7, #16]
 80013b6:	f000 fcb5 	bl	8001d24 <delete_dead_rocket>
				vector_delete(rocketVectorPtr, count);
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f001 fc25 	bl	8002c0e <vector_delete>
				count--;
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]

				asteroidPtr->Object_Property.aliveFlag = ALIVE_FALSE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2202      	movs	r2, #2
 80013ce:	765a      	strb	r2, [r3, #25]
				delete_dead_asteroid(asteroidPtr);
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 fcd4 	bl	8001d7e <delete_dead_asteroid>
				vector_delete(asteroidVectorPtr, i);
 80013d6:	7dbb      	ldrb	r3, [r7, #22]
 80013d8:	4619      	mov	r1, r3
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f001 fc17 	bl	8002c0e <vector_delete>
				i--;
 80013e0:	7dbb      	ldrb	r3, [r7, #22]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	75bb      	strb	r3, [r7, #22]

				// If large asteroid was hit then create two medium asteroids
				if (asteroidPtr->Object_Property.asteroidSize == ASTEROID_SIZE_L) {
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	7edb      	ldrb	r3, [r3, #27]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <update_rocket+0x164>
//					create_medium_asteroid(asteroidVectorPtr, asteroidPtr);

					// Large asteroid hit by rocket LED indication
					HAL_GPIO_TogglePin(LD1_Green_GPIO_Port, LD1_Green_Pin);
 80013ee:	2101      	movs	r1, #1
 80013f0:	4818      	ldr	r0, [pc, #96]	; (8001454 <update_rocket+0x198>)
 80013f2:	f003 fabe 	bl	8004972 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LD2_Blue_GPIO_Port, LD2_Blue_Pin);
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4816      	ldr	r0, [pc, #88]	; (8001454 <update_rocket+0x198>)
 80013fa:	f003 faba 	bl	8004972 <HAL_GPIO_TogglePin>
					HAL_Delay(500);
 80013fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001402:	f002 f849 	bl	8003498 <HAL_Delay>
					HAL_GPIO_TogglePin(LD1_Green_GPIO_Port, LD1_Green_Pin);
 8001406:	2101      	movs	r1, #1
 8001408:	4812      	ldr	r0, [pc, #72]	; (8001454 <update_rocket+0x198>)
 800140a:	f003 fab2 	bl	8004972 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LD2_Blue_GPIO_Port, LD2_Blue_Pin);
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <update_rocket+0x198>)
 8001412:	f003 faae 	bl	8004972 <HAL_GPIO_TogglePin>
					HAL_Delay(500);
 8001416:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141a:	f002 f83d 	bl	8003498 <HAL_Delay>
					break;
 800141e:	e007      	b.n	8001430 <update_rocket+0x174>
		for (uint8_t i = 0; i < asteroidVectorPtr->total; i++){
 8001420:	7dbb      	ldrb	r3, [r7, #22]
 8001422:	3301      	adds	r3, #1
 8001424:	75bb      	strb	r3, [r7, #22]
 8001426:	7dba      	ldrb	r2, [r7, #22]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	429a      	cmp	r2, r3
 800142e:	dba3      	blt.n	8001378 <update_rocket+0xbc>
	for (uint8_t count = 0; count < rocketVectorPtr->total; count++){
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	3301      	adds	r3, #1
 8001434:	75fb      	strb	r3, [r7, #23]
 8001436:	7dfa      	ldrb	r2, [r7, #23]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	429a      	cmp	r2, r3
 800143e:	f6ff af49 	blt.w	80012d4 <update_rocket+0x18>
//					HAL_Delay(500);
				}
			}
		}
	}
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200000a6 	.word	0x200000a6
 8001450:	200000a8 	.word	0x200000a8
 8001454:	40020400 	.word	0x40020400

08001458 <display_score>:

/* Display score */
void display_score(){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
	char displayScore[15];
	sprintf(displayScore, "Score: %d", prevScore);
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <display_score+0x80>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	461a      	mov	r2, r3
 8001466:	463b      	mov	r3, r7
 8001468:	491c      	ldr	r1, [pc, #112]	; (80014dc <display_score+0x84>)
 800146a:	4618      	mov	r0, r3
 800146c:	f005 fa82 	bl	8006974 <siprintf>
	ssd1306_SetCursor(70, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	2046      	movs	r0, #70	; 0x46
 8001474:	f001 f8a4 	bl	80025c0 <ssd1306_SetCursor>
	ssd1306_UpdateScreen();
 8001478:	f000 ff78 	bl	800236c <ssd1306_UpdateScreen>

	// If score is updated, clear old score before printing new score
	if (prevScore != currentScore){
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <display_score+0x80>)
 800147e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <display_score+0x88>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	429a      	cmp	r2, r3
 800148a:	d019      	beq.n	80014c0 <display_score+0x68>
		ssd1306_WriteString(displayScore, Font_6x8, Black);	// changing text color to black clears the old score
 800148c:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <display_score+0x8c>)
 800148e:	4638      	mov	r0, r7
 8001490:	2300      	movs	r3, #0
 8001492:	ca06      	ldmia	r2, {r1, r2}
 8001494:	f001 f86e 	bl	8002574 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001498:	f000 ff68 	bl	800236c <ssd1306_UpdateScreen>

		sprintf(displayScore, "Score: %d", currentScore);
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <display_score+0x88>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	461a      	mov	r2, r3
 80014a4:	463b      	mov	r3, r7
 80014a6:	490d      	ldr	r1, [pc, #52]	; (80014dc <display_score+0x84>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f005 fa63 	bl	8006974 <siprintf>
		ssd1306_WriteString(displayScore, Font_6x8, White);
 80014ae:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <display_score+0x8c>)
 80014b0:	4638      	mov	r0, r7
 80014b2:	2301      	movs	r3, #1
 80014b4:	ca06      	ldmia	r2, {r1, r2}
 80014b6:	f001 f85d 	bl	8002574 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80014ba:	f000 ff57 	bl	800236c <ssd1306_UpdateScreen>
	else {
		ssd1306_WriteString(displayScore, Font_6x8, White);
		ssd1306_UpdateScreen();
//		HAL_Delay(10);
	}
}
 80014be:	e007      	b.n	80014d0 <display_score+0x78>
		ssd1306_WriteString(displayScore, Font_6x8, White);
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <display_score+0x8c>)
 80014c2:	4638      	mov	r0, r7
 80014c4:	2301      	movs	r3, #1
 80014c6:	ca06      	ldmia	r2, {r1, r2}
 80014c8:	f001 f854 	bl	8002574 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80014cc:	f000 ff4e 	bl	800236c <ssd1306_UpdateScreen>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200000a8 	.word	0x200000a8
 80014dc:	08007058 	.word	0x08007058
 80014e0:	200000a6 	.word	0x200000a6
 80014e4:	2000000c 	.word	0x2000000c

080014e8 <display_start_screen>:

/* Display start screen */
void display_start_screen(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af02      	add	r7, sp, #8
	ssd1306_DrawBitmap(0, 0, EARTH_SCALE_To_FIT, 128, 64, White);
 80014ee:	2301      	movs	r3, #1
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2340      	movs	r3, #64	; 0x40
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	4a13      	ldr	r2, [pc, #76]	; (8001548 <display_start_screen+0x60>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f001 f877 	bl	80025f0 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001502:	f000 ff33 	bl	800236c <ssd1306_UpdateScreen>
	HAL_Delay(3000);
 8001506:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800150a:	f001 ffc5 	bl	8003498 <HAL_Delay>

	ssd1306_Clear(100);
 800150e:	2064      	movs	r0, #100	; 0x64
 8001510:	f001 f8c9 	bl	80026a6 <ssd1306_Clear>
	ssd1306_SetCursor(5, 10);
 8001514:	210a      	movs	r1, #10
 8001516:	2005      	movs	r0, #5
 8001518:	f001 f852 	bl	80025c0 <ssd1306_SetCursor>
	ssd1306_WriteString("Press shoot button", Font_6x8, White);
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <display_start_screen+0x64>)
 800151e:	2301      	movs	r3, #1
 8001520:	ca06      	ldmia	r2, {r1, r2}
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <display_start_screen+0x68>)
 8001524:	f001 f826 	bl	8002574 <ssd1306_WriteString>
	ssd1306_SetCursor(5, 20);
 8001528:	2114      	movs	r1, #20
 800152a:	2005      	movs	r0, #5
 800152c:	f001 f848 	bl	80025c0 <ssd1306_SetCursor>
	ssd1306_WriteString("to start..", Font_6x8, White);
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <display_start_screen+0x64>)
 8001532:	2301      	movs	r3, #1
 8001534:	ca06      	ldmia	r2, {r1, r2}
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <display_start_screen+0x6c>)
 8001538:	f001 f81c 	bl	8002574 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800153c:	f000 ff16 	bl	800236c <ssd1306_UpdateScreen>
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	080070e4 	.word	0x080070e4
 800154c:	2000000c 	.word	0x2000000c
 8001550:	08007064 	.word	0x08007064
 8001554:	08007078 	.word	0x08007078

08001558 <display_game_over_screen>:

/* Display game over screen */
void display_game_over_screen(){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af02      	add	r7, sp, #8
	ssd1306_DrawBitmap(0, 0, EARTH_SCALE_To_FIT, 128, 40, White);
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2328      	movs	r3, #40	; 0x28
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <display_game_over_screen+0x3c>)
 800156a:	2100      	movs	r1, #0
 800156c:	2000      	movs	r0, #0
 800156e:	f001 f83f 	bl	80025f0 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001572:	f000 fefb 	bl	800236c <ssd1306_UpdateScreen>

	ssd1306_SetCursor(0, 45);
 8001576:	212d      	movs	r1, #45	; 0x2d
 8001578:	2000      	movs	r0, #0
 800157a:	f001 f821 	bl	80025c0 <ssd1306_SetCursor>
	ssd1306_WriteString("Game over!! Try again?", Font_6x8, White);
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <display_game_over_screen+0x40>)
 8001580:	2301      	movs	r3, #1
 8001582:	ca06      	ldmia	r2, {r1, r2}
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <display_game_over_screen+0x44>)
 8001586:	f000 fff5 	bl	8002574 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800158a:	f000 feef 	bl	800236c <ssd1306_UpdateScreen>
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	080070e4 	.word	0x080070e4
 8001598:	2000000c 	.word	0x2000000c
 800159c:	08007084 	.word	0x08007084

080015a0 <reset_game>:


/* Preparation before resetting game */
void reset_game(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	currentScore = 0;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <reset_game+0xb0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	801a      	strh	r2, [r3, #0]
	prevScore = 0;
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <reset_game+0xb4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]
	frameUpdate = CLEAR_FRAME;
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <reset_game+0xb8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
//	MX_RNG_Init();
	HAL_TIM_Base_Stop_IT(&htim4);
 80015b8:	4828      	ldr	r0, [pc, #160]	; (800165c <reset_game+0xbc>)
 80015ba:	f004 fce1 	bl	8005f80 <HAL_TIM_Base_Stop_IT>
	currentWave = 0;
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <reset_game+0xc0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]

	for (uint8_t count = 0; count < asteroidVector.total;) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	717b      	strb	r3, [r7, #5]
 80015c8:	e004      	b.n	80015d4 <reset_game+0x34>
		vector_delete(&asteroidVector, count);
 80015ca:	797b      	ldrb	r3, [r7, #5]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4825      	ldr	r0, [pc, #148]	; (8001664 <reset_game+0xc4>)
 80015d0:	f001 fb1d 	bl	8002c0e <vector_delete>
	for (uint8_t count = 0; count < asteroidVector.total;) {
 80015d4:	797a      	ldrb	r2, [r7, #5]
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <reset_game+0xc4>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbf5      	blt.n	80015ca <reset_game+0x2a>
	}

	for (uint8_t count = 0; count < rocketVector.total;) {
 80015de:	2300      	movs	r3, #0
 80015e0:	713b      	strb	r3, [r7, #4]
 80015e2:	e004      	b.n	80015ee <reset_game+0x4e>
		vector_delete(&rocketVector, count);
 80015e4:	793b      	ldrb	r3, [r7, #4]
 80015e6:	4619      	mov	r1, r3
 80015e8:	481f      	ldr	r0, [pc, #124]	; (8001668 <reset_game+0xc8>)
 80015ea:	f001 fb10 	bl	8002c0e <vector_delete>
	for (uint8_t count = 0; count < rocketVector.total;) {
 80015ee:	793a      	ldrb	r2, [r7, #4]
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <reset_game+0xc8>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf5      	blt.n	80015e4 <reset_game+0x44>
	}

	for (uint8_t count = 0; count < ASTEROID_BUFFER_SIZE; count++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	e00c      	b.n	8001618 <reset_game+0x78>
		asteroid[count].Object_Property.aliveFlag = ALIVE_FALSE;
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	491a      	ldr	r1, [pc, #104]	; (800166c <reset_game+0xcc>)
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	440b      	add	r3, r1
 800160c:	3319      	adds	r3, #25
 800160e:	2202      	movs	r2, #2
 8001610:	701a      	strb	r2, [r3, #0]
	for (uint8_t count = 0; count < ASTEROID_BUFFER_SIZE; count++) {
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	3301      	adds	r3, #1
 8001616:	71fb      	strb	r3, [r7, #7]
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	2b0e      	cmp	r3, #14
 800161c:	d9ef      	bls.n	80015fe <reset_game+0x5e>
	}

	for (uint8_t count = 0; count < ROCKET_BUFFER_SIZE; count++) {
 800161e:	2300      	movs	r3, #0
 8001620:	71bb      	strb	r3, [r7, #6]
 8001622:	e00c      	b.n	800163e <reset_game+0x9e>
		rocket[count].Object_Property.aliveFlag = ALIVE_FALSE;
 8001624:	79ba      	ldrb	r2, [r7, #6]
 8001626:	4912      	ldr	r1, [pc, #72]	; (8001670 <reset_game+0xd0>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	3319      	adds	r3, #25
 8001634:	2202      	movs	r2, #2
 8001636:	701a      	strb	r2, [r3, #0]
	for (uint8_t count = 0; count < ROCKET_BUFFER_SIZE; count++) {
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	3301      	adds	r3, #1
 800163c:	71bb      	strb	r3, [r7, #6]
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d9ef      	bls.n	8001624 <reset_game+0x84>
	}
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000a6 	.word	0x200000a6
 8001654:	200000a8 	.word	0x200000a8
 8001658:	200000a4 	.word	0x200000a4
 800165c:	200004f8 	.word	0x200004f8
 8001660:	20000001 	.word	0x20000001
 8001664:	200008d8 	.word	0x200008d8
 8001668:	20000550 	.word	0x20000550
 800166c:	200005a8 	.word	0x200005a8
 8001670:	20000998 	.word	0x20000998

08001674 <wrap_coordinate>:

/* Wrap co-ordinate */
void wrap_coordinate(int16_t* xPtr, int16_t* yPtr){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	if (*xPtr < 0) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da08      	bge.n	800169a <wrap_coordinate+0x26>
		*xPtr += SSD1306_WIDTH;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3380      	adds	r3, #128	; 0x80
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21a      	sxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	801a      	strh	r2, [r3, #0]
	}

	if (*xPtr >= SSD1306_WIDTH && *yPtr > 1 && *yPtr < SSD1306_HEIGHT) {
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	2b7f      	cmp	r3, #127	; 0x7f
 80016a2:	dd12      	ble.n	80016ca <wrap_coordinate+0x56>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	dd0d      	ble.n	80016ca <wrap_coordinate+0x56>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	2b3f      	cmp	r3, #63	; 0x3f
 80016b6:	dc08      	bgt.n	80016ca <wrap_coordinate+0x56>
		*xPtr -= SSD1306_WIDTH;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b80      	subs	r3, #128	; 0x80
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	801a      	strh	r2, [r3, #0]
	}

	if (*xPtr >= 68 && *yPtr < 1) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d0:	2b43      	cmp	r3, #67	; 0x43
 80016d2:	dd0d      	ble.n	80016f0 <wrap_coordinate+0x7c>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	dc08      	bgt.n	80016f0 <wrap_coordinate+0x7c>
		*yPtr += SSD1306_HEIGHT; // avoiding overlap of game character and score displayed on OLED
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3340      	adds	r3, #64	; 0x40
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	801a      	strh	r2, [r3, #0]
	}

	if (*yPtr < 0) {
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da08      	bge.n	800170c <wrap_coordinate+0x98>
		*yPtr += SSD1306_HEIGHT;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	b29b      	uxth	r3, r3
 8001702:	3340      	adds	r3, #64	; 0x40
 8001704:	b29b      	uxth	r3, r3
 8001706:	b21a      	sxth	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	801a      	strh	r2, [r3, #0]
	}

	if (*yPtr >= SSD1306_HEIGHT) {
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001712:	2b3f      	cmp	r3, #63	; 0x3f
 8001714:	dd08      	ble.n	8001728 <wrap_coordinate+0xb4>
		*yPtr -= SSD1306_HEIGHT;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	b29b      	uxth	r3, r3
 800171e:	3b40      	subs	r3, #64	; 0x40
 8001720:	b29b      	uxth	r3, r3
 8001722:	b21a      	sxth	r2, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	801a      	strh	r2, [r3, #0]
	}
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <game_random_x>:

/* Random value of x from RNG */
int16_t game_random_x(){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	uint32_t x_randomNumber;
	generate_randomNumber(&x_randomNumber);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fdbb 	bl	80032b8 <generate_randomNumber>
	x_randomNumber = (x_randomNumber & 0x1FF) % (SSD1306_WIDTH+1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <game_random_x+0x34>)
 800174a:	fba3 2301 	umull	r2, r3, r3, r1
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	4613      	mov	r3, r2
 8001752:	01db      	lsls	r3, r3, #7
 8001754:	4413      	add	r3, r2
 8001756:	1aca      	subs	r2, r1, r3
 8001758:	607a      	str	r2, [r7, #4]
	return (int16_t) x_randomNumber;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	b21b      	sxth	r3, r3
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	0fe03f81 	.word	0x0fe03f81

0800176c <game_random_y>:

/* Random value of y from RNG */
int16_t game_random_y(){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	uint32_t y_randomNumber;
	generate_randomNumber(&y_randomNumber);
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fd9f 	bl	80032b8 <generate_randomNumber>
	y_randomNumber = (y_randomNumber & 0xFF) % (SSD1306_HEIGHT+1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b2d9      	uxtb	r1, r3
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <game_random_y+0x30>)
 8001780:	fba3 2301 	umull	r2, r3, r3, r1
 8001784:	099a      	lsrs	r2, r3, #6
 8001786:	4613      	mov	r3, r2
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	4413      	add	r3, r2
 800178c:	1aca      	subs	r2, r1, r3
 800178e:	607a      	str	r2, [r7, #4]
	return (int16_t) y_randomNumber;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	b21b      	sxth	r3, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	fc0fc0fd 	.word	0xfc0fc0fd

080017a0 <game_random_sign>:

/* Random value of sign from RNG */
int8_t game_random_sign(){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	uint32_t sign_randomNumber;
	generate_randomNumber(&sign_randomNumber);
 80017a6:	463b      	mov	r3, r7
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fd85 	bl	80032b8 <generate_randomNumber>
	int8_t temp = (sign_randomNumber & 0x0F) % 9;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f003 010f 	and.w	r1, r3, #15
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <game_random_sign+0x40>)
 80017b6:	fba3 2301 	umull	r2, r3, r3, r1
 80017ba:	085a      	lsrs	r2, r3, #1
 80017bc:	4613      	mov	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4413      	add	r3, r2
 80017c2:	1aca      	subs	r2, r1, r3
 80017c4:	4613      	mov	r3, r2
 80017c6:	71fb      	strb	r3, [r7, #7]
	if (temp < 5){
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	dc02      	bgt.n	80017d6 <game_random_sign+0x36>
		return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d4:	e000      	b.n	80017d8 <game_random_sign+0x38>
	}
	return 1;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	38e38e39 	.word	0x38e38e39

080017e4 <update_spaceship_dir>:

/* Update player spaceship direction */
void update_spaceship_dir(Space_Object_t* playerSpaceShipPtr){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	uint8_t direction = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
	direction = joystick_read_direction();
 80017f0:	f000 fb78 	bl	8001ee4 <joystick_read_direction>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
//	ssd1306_SetCursor(10, 10);

	if (direction == JS_DIR_CENTERED){
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8090 	beq.w	8001920 <update_spaceship_dir+0x13c>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_CENTERED", Font_6x8, White);
//		ssd1306_UpdateScreen();
		return;
	}
	else if (direction == JS_DIR_UP){
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b07      	cmp	r3, #7
 8001804:	d10e      	bne.n	8001824 <update_spaceship_dir+0x40>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_UP", Font_6x8, White);
//		ssd1306_UpdateScreen();
		playerSpaceShipPtr->Object_Property.headingDir = HEADING_N;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	761a      	strb	r2, [r3, #24]
		playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_NORTH;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a46      	ldr	r2, [pc, #280]	; (8001928 <update_spaceship_dir+0x144>)
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
		playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2218      	movs	r2, #24
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
		playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2218      	movs	r2, #24
 800181e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return;
 8001822:	e07e      	b.n	8001922 <update_spaceship_dir+0x13e>
	}
	else if (direction == JS_DIR_DOWN){
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d10e      	bne.n	8001848 <update_spaceship_dir+0x64>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_DOWN", Font_6x8, White);
//		ssd1306_UpdateScreen();
		playerSpaceShipPtr->Object_Property.headingDir = HEADING_S;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	761a      	strb	r2, [r3, #24]
		playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_SOUTH;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3e      	ldr	r2, [pc, #248]	; (800192c <update_spaceship_dir+0x148>)
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
		playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2218      	movs	r2, #24
 800183a:	f883 2020 	strb.w	r2, [r3, #32]
		playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2218      	movs	r2, #24
 8001842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return;
 8001846:	e06c      	b.n	8001922 <update_spaceship_dir+0x13e>
	}
	else if (direction == JS_DIR_RIGHT){
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2b06      	cmp	r3, #6
 800184c:	d10e      	bne.n	800186c <update_spaceship_dir+0x88>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_RIGHT", Font_6x8, White);
//		ssd1306_UpdateScreen();
		playerSpaceShipPtr->Object_Property.headingDir = HEADING_E;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2203      	movs	r2, #3
 8001852:	761a      	strb	r2, [r3, #24]
		playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_EAST;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a36      	ldr	r2, [pc, #216]	; (8001930 <update_spaceship_dir+0x14c>)
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
		playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2218      	movs	r2, #24
 800185e:	f883 2020 	strb.w	r2, [r3, #32]
		playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2218      	movs	r2, #24
 8001866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return;
 800186a:	e05a      	b.n	8001922 <update_spaceship_dir+0x13e>
	}
	else if (direction == JS_DIR_LEFT){
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d10e      	bne.n	8001890 <update_spaceship_dir+0xac>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_LEFT", Font_6x8, White);
//		ssd1306_UpdateScreen();
		playerSpaceShipPtr->Object_Property.headingDir = HEADING_W;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2204      	movs	r2, #4
 8001876:	761a      	strb	r2, [r3, #24]
		playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_WEST;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <update_spaceship_dir+0x150>)
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
		playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2218      	movs	r2, #24
 8001882:	f883 2020 	strb.w	r2, [r3, #32]
		playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2218      	movs	r2, #24
 800188a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return;
 800188e:	e048      	b.n	8001922 <update_spaceship_dir+0x13e>
	}
	else if (direction == JS_DIR_RIGHT_UP){
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d10e      	bne.n	80018b4 <update_spaceship_dir+0xd0>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_RIGHT_UP", Font_6x8, White);
//		ssd1306_UpdateScreen();
		playerSpaceShipPtr->Object_Property.headingDir = HEADING_NE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2205      	movs	r2, #5
 800189a:	761a      	strb	r2, [r3, #24]
		playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_NORTH_EAST;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a26      	ldr	r2, [pc, #152]	; (8001938 <update_spaceship_dir+0x154>)
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
		playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2218      	movs	r2, #24
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]
		playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2218      	movs	r2, #24
 80018ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return;
 80018b2:	e036      	b.n	8001922 <update_spaceship_dir+0x13e>
	}
	else if (direction == JS_DIR_RIGHT_DOWN){
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d10e      	bne.n	80018d8 <update_spaceship_dir+0xf4>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_RIGHT_DOWN", Font_6x8, White);
//		ssd1306_UpdateScreen();
		playerSpaceShipPtr->Object_Property.headingDir = HEADING_SE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2207      	movs	r2, #7
 80018be:	761a      	strb	r2, [r3, #24]
		playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_SOUTH_EAST;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <update_spaceship_dir+0x158>)
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
		playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2218      	movs	r2, #24
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]
		playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2218      	movs	r2, #24
 80018d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return;
 80018d6:	e024      	b.n	8001922 <update_spaceship_dir+0x13e>
	}
	else if (direction == JS_DIR_LEFT_UP){
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d10e      	bne.n	80018fc <update_spaceship_dir+0x118>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_LEFT_UP", Font_6x8, White);
//		ssd1306_UpdateScreen();
		playerSpaceShipPtr->Object_Property.headingDir = HEADING_NW;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2206      	movs	r2, #6
 80018e2:	761a      	strb	r2, [r3, #24]
		playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_NORTH_WEST;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a16      	ldr	r2, [pc, #88]	; (8001940 <update_spaceship_dir+0x15c>)
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
		playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2218      	movs	r2, #24
 80018ee:	f883 2020 	strb.w	r2, [r3, #32]
		playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2218      	movs	r2, #24
 80018f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return;
 80018fa:	e012      	b.n	8001922 <update_spaceship_dir+0x13e>
	}
	else if (direction == JS_DIR_LEFT_DOWN){
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d10f      	bne.n	8001922 <update_spaceship_dir+0x13e>
//		ssd1306_Clear(5);
//		ssd1306_WriteString("JS_DIR_LEFT_DOWN", Font_6x8, White);
//		ssd1306_UpdateScreen();
		playerSpaceShipPtr->Object_Property.headingDir = HEADING_SW;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2208      	movs	r2, #8
 8001906:	761a      	strb	r2, [r3, #24]
		playerSpaceShipPtr->Object_Image.bitmapImage = SPACESHIP_24x24_SOUTH_WEST;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <update_spaceship_dir+0x160>)
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
		playerSpaceShipPtr->Object_Image.imageWidth = SPACESHIP_BMP_WIDTH;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2218      	movs	r2, #24
 8001912:	f883 2020 	strb.w	r2, [r3, #32]
		playerSpaceShipPtr->Object_Image.imageHeight = SPACESHIP_BMP_HEIGHT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2218      	movs	r2, #24
 800191a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return;
 800191e:	e000      	b.n	8001922 <update_spaceship_dir+0x13e>
		return;
 8001920:	bf00      	nop
	}
}
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	080074fc 	.word	0x080074fc
 800192c:	0800758c 	.word	0x0800758c
 8001930:	08007544 	.word	0x08007544
 8001934:	080075d4 	.word	0x080075d4
 8001938:	0800761c 	.word	0x0800761c
 800193c:	080076f4 	.word	0x080076f4
 8001940:	08007664 	.word	0x08007664
 8001944:	080076ac 	.word	0x080076ac

08001948 <update_spaceship_pos>:


/* Update player spaceship position */
void update_spaceship_pos(Space_Object_t* playerSapceShipPtr){
 8001948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	if (!button_readPin(THRUST_BUTTON_PORT, THRUST_BUTTON_PIN)){
 8001952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001956:	48b2      	ldr	r0, [pc, #712]	; (8001c20 <update_spaceship_pos+0x2d8>)
 8001958:	f001 fcd0 	bl	80032fc <button_readPin>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 80a2 	bne.w	8001aa8 <update_spaceship_pos+0x160>
		int8_t ddx = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
		int8_t ddy = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	73bb      	strb	r3, [r7, #14]

		// Indicates that the thrust button was pressed
		HAL_GPIO_WritePin(LD2_Blue_GPIO_Port, LD2_Blue_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	48ac      	ldr	r0, [pc, #688]	; (8001c24 <update_spaceship_pos+0x2dc>)
 8001972:	f002 ffe5 	bl	8004940 <HAL_GPIO_WritePin>

		if (playerSapceShipPtr->Object_Property.headingDir == HEADING_N){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7e1b      	ldrb	r3, [r3, #24]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d10c      	bne.n	8001998 <update_spaceship_pos+0x50>
			ddx = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
			ddy = -PLAYER_BASE_ACCELERATION;
 8001982:	23ff      	movs	r3, #255	; 0xff
 8001984:	73bb      	strb	r3, [r7, #14]
			accelerate_player_spaceship(playerSapceShipPtr, ddx, ddy);
 8001986:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fa21 	bl	8001dd8 <accelerate_player_spaceship>
		}
		else {
			playerSapceShipPtr->Object_Property.dy = 0;
		}
	}
}
 8001996:	e15c      	b.n	8001c52 <update_spaceship_pos+0x30a>
		else if (playerSapceShipPtr->Object_Property.headingDir == HEADING_S){
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7e1b      	ldrb	r3, [r3, #24]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d10c      	bne.n	80019ba <update_spaceship_pos+0x72>
			ddy += PLAYER_BASE_ACCELERATION;
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	73bb      	strb	r3, [r7, #14]
			accelerate_player_spaceship(playerSapceShipPtr, ddx, ddy);
 80019a8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b0:	4619      	mov	r1, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fa10 	bl	8001dd8 <accelerate_player_spaceship>
}
 80019b8:	e14b      	b.n	8001c52 <update_spaceship_pos+0x30a>
		else if (playerSapceShipPtr->Object_Property.headingDir == HEADING_E){
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7e1b      	ldrb	r3, [r3, #24]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d10c      	bne.n	80019dc <update_spaceship_pos+0x94>
			ddx += PLAYER_BASE_ACCELERATION;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	73fb      	strb	r3, [r7, #15]
			accelerate_player_spaceship(playerSapceShipPtr, ddx, ddy);
 80019ca:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f9ff 	bl	8001dd8 <accelerate_player_spaceship>
}
 80019da:	e13a      	b.n	8001c52 <update_spaceship_pos+0x30a>
		else if (playerSapceShipPtr->Object_Property.headingDir == HEADING_W){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e1b      	ldrb	r3, [r3, #24]
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d10c      	bne.n	80019fe <update_spaceship_pos+0xb6>
			ddx += -PLAYER_BASE_ACCELERATION;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	73fb      	strb	r3, [r7, #15]
			accelerate_player_spaceship(playerSapceShipPtr, ddx, ddy);
 80019ec:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f9ee 	bl	8001dd8 <accelerate_player_spaceship>
}
 80019fc:	e129      	b.n	8001c52 <update_spaceship_pos+0x30a>
		else if (playerSapceShipPtr->Object_Property.headingDir == HEADING_NE){
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e1b      	ldrb	r3, [r3, #24]
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d110      	bne.n	8001a28 <update_spaceship_pos+0xe0>
			ddx += PLAYER_BASE_ACCELERATION;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	73fb      	strb	r3, [r7, #15]
			ddy += -PLAYER_BASE_ACCELERATION;
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	73bb      	strb	r3, [r7, #14]
			accelerate_player_spaceship(playerSapceShipPtr, ddx, ddy);
 8001a16:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f9d9 	bl	8001dd8 <accelerate_player_spaceship>
}
 8001a26:	e114      	b.n	8001c52 <update_spaceship_pos+0x30a>
		else if (playerSapceShipPtr->Object_Property.headingDir == HEADING_NW){
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7e1b      	ldrb	r3, [r3, #24]
 8001a2c:	2b06      	cmp	r3, #6
 8001a2e:	d110      	bne.n	8001a52 <update_spaceship_pos+0x10a>
			ddx += -PLAYER_BASE_ACCELERATION;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	73fb      	strb	r3, [r7, #15]
			ddy += -PLAYER_BASE_ACCELERATION;
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	73bb      	strb	r3, [r7, #14]
			accelerate_player_spaceship(playerSapceShipPtr, ddx, ddy);
 8001a40:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f9c4 	bl	8001dd8 <accelerate_player_spaceship>
}
 8001a50:	e0ff      	b.n	8001c52 <update_spaceship_pos+0x30a>
		else if (playerSapceShipPtr->Object_Property.headingDir == HEADING_SE){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7e1b      	ldrb	r3, [r3, #24]
 8001a56:	2b07      	cmp	r3, #7
 8001a58:	d110      	bne.n	8001a7c <update_spaceship_pos+0x134>
			ddx += PLAYER_BASE_ACCELERATION;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	73fb      	strb	r3, [r7, #15]
			ddy += PLAYER_BASE_ACCELERATION;
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	73bb      	strb	r3, [r7, #14]
			accelerate_player_spaceship(playerSapceShipPtr, ddx, ddy);
 8001a6a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f9af 	bl	8001dd8 <accelerate_player_spaceship>
}
 8001a7a:	e0ea      	b.n	8001c52 <update_spaceship_pos+0x30a>
		else if (playerSapceShipPtr->Object_Property.headingDir == HEADING_SW){
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7e1b      	ldrb	r3, [r3, #24]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	f040 80e6 	bne.w	8001c52 <update_spaceship_pos+0x30a>
			ddx += -PLAYER_BASE_ACCELERATION;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	73fb      	strb	r3, [r7, #15]
			ddy += PLAYER_BASE_ACCELERATION;
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	73bb      	strb	r3, [r7, #14]
			accelerate_player_spaceship(playerSapceShipPtr, ddx, ddy);
 8001a96:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f999 	bl	8001dd8 <accelerate_player_spaceship>
}
 8001aa6:	e0d4      	b.n	8001c52 <update_spaceship_pos+0x30a>
		HAL_GPIO_WritePin(LD2_Blue_GPIO_Port, LD2_Blue_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	485d      	ldr	r0, [pc, #372]	; (8001c24 <update_spaceship_pos+0x2dc>)
 8001aae:	f002 ff47 	bl	8004940 <HAL_GPIO_WritePin>
		playerSapceShipPtr->Object_Property.x += playerSapceShipPtr->Object_Property.dx;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd53 	bl	8000564 <__aeabi_i2d>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ac4:	f7fe fc02 	bl	80002cc <__adddf3>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7fe fe3a 	bl	8000748 <__aeabi_d2iz>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	801a      	strh	r2, [r3, #0]
		playerSapceShipPtr->Object_Property.y += playerSapceShipPtr->Object_Property.dy;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd3e 	bl	8000564 <__aeabi_i2d>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001aee:	f7fe fbed 	bl	80002cc <__adddf3>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7fe fe25 	bl	8000748 <__aeabi_d2iz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	805a      	strh	r2, [r3, #2]
		wrap_coordinate(&playerSapceShipPtr->Object_Property.x, &playerSapceShipPtr->Object_Property.y);
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f7ff fdb0 	bl	8001674 <wrap_coordinate>
		if (fabs(playerSapceShipPtr->Object_Property.dx) > PLAYER_BASE_DECELERATION){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b20:	a33d      	add	r3, pc, #244	; (adr r3, 8001c18 <update_spaceship_pos+0x2d0>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	4640      	mov	r0, r8
 8001b28:	4649      	mov	r1, r9
 8001b2a:	f7fe fe03 	bl	8000734 <__aeabi_dcmpgt>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d033      	beq.n	8001b9c <update_spaceship_pos+0x254>
			if (playerSapceShipPtr->Object_Property.dx > 0){
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	f7fe fdf7 	bl	8000734 <__aeabi_dcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00d      	beq.n	8001b68 <update_spaceship_pos+0x220>
				playerSapceShipPtr->Object_Property.dx -= PLAYER_BASE_DECELERATION;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b52:	a331      	add	r3, pc, #196	; (adr r3, 8001c18 <update_spaceship_pos+0x2d0>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fbb6 	bl	80002c8 <__aeabi_dsub>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001b66:	e020      	b.n	8001baa <update_spaceship_pos+0x262>
			else if (playerSapceShipPtr->Object_Property.dx < 0){
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	f7fe fdbf 	bl	80006f8 <__aeabi_dcmplt>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d014      	beq.n	8001baa <update_spaceship_pos+0x262>
				playerSapceShipPtr->Object_Property.dx += PLAYER_BASE_DECELERATION;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b86:	a324      	add	r3, pc, #144	; (adr r3, 8001c18 <update_spaceship_pos+0x2d0>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fb9e 	bl	80002cc <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001b9a:	e006      	b.n	8001baa <update_spaceship_pos+0x262>
			playerSapceShipPtr->Object_Property.dx = 0;
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		if (fabs(playerSapceShipPtr->Object_Property.dy) > PLAYER_BASE_DECELERATION){
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a318      	add	r3, pc, #96	; (adr r3, 8001c18 <update_spaceship_pos+0x2d0>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fdb8 	bl	8000734 <__aeabi_dcmpgt>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03c      	beq.n	8001c44 <update_spaceship_pos+0x2fc>
			if (playerSapceShipPtr->Object_Property.dy > 0){
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	f7fe fdac 	bl	8000734 <__aeabi_dcmpgt>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <update_spaceship_pos+0x2b6>
				playerSapceShipPtr->Object_Property.dy -= PLAYER_BASE_DECELERATION;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001be8:	a30b      	add	r3, pc, #44	; (adr r3, 8001c18 <update_spaceship_pos+0x2d0>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fb6b 	bl	80002c8 <__aeabi_dsub>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001bfc:	e029      	b.n	8001c52 <update_spaceship_pos+0x30a>
			else if (playerSapceShipPtr->Object_Property.dy < 0){
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	f7fe fd74 	bl	80006f8 <__aeabi_dcmplt>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <update_spaceship_pos+0x2e0>
}
 8001c16:	e01c      	b.n	8001c52 <update_spaceship_pos+0x30a>
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	3fb99999 	.word	0x3fb99999
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40020400 	.word	0x40020400
				playerSapceShipPtr->Object_Property.dy += PLAYER_BASE_DECELERATION;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c2e:	a30c      	add	r3, pc, #48	; (adr r3, 8001c60 <update_spaceship_pos+0x318>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fb4a 	bl	80002cc <__adddf3>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001c42:	e006      	b.n	8001c52 <update_spaceship_pos+0x30a>
			playerSapceShipPtr->Object_Property.dy = 0;
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	3fb99999 	.word	0x3fb99999

08001c68 <collision_detect>:


/* Collision detect using AABB algorithm */
uint8_t collision_detect(Space_Object_t* object1Ptr, Space_Object_t* object2Ptr){
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
	int16_t object1BottomRight_x = object1Ptr->Object_Property.x + object1Ptr->Object_Image.imageWidth-10;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b0a      	subs	r3, #10
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	81fb      	strh	r3, [r7, #14]
	int16_t object1BottomRight_y = object1Ptr->Object_Property.y + object1Ptr->Object_Image.imageHeight-10;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b0a      	subs	r3, #10
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	81bb      	strh	r3, [r7, #12]

	int16_t object2BottomRight_x = object2Ptr->Object_Property.x + object2Ptr->Object_Image.imageWidth-10;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b0a      	subs	r3, #10
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	817b      	strh	r3, [r7, #10]
	int16_t object2BottomRight_y = object2Ptr->Object_Property.y + object2Ptr->Object_Image.imageHeight-10;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b0a      	subs	r3, #10
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	813b      	strh	r3, [r7, #8]

	// Collision occurs when the edges of the two objects overlap
	if(object1Ptr->Object_Property.x < object2BottomRight_x
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dd16      	ble.n	8001d16 <collision_detect+0xae>
			&& object2Ptr->Object_Property.x < object1BottomRight_x
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dd0f      	ble.n	8001d16 <collision_detect+0xae>
			&& object1Ptr->Object_Property.y < object2BottomRight_y
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cfc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dd08      	ble.n	8001d16 <collision_detect+0xae>
			&& object2Ptr->Object_Property.y < object1BottomRight_y){
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dd01      	ble.n	8001d16 <collision_detect+0xae>

		return COLLISION_TRUE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <collision_detect+0xb0>
	}
	else {
		return COLLISION_FALSE;
 8001d16:	2300      	movs	r3, #0
	}
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <delete_dead_rocket>:

/* Delete dead rocket */
void delete_dead_rocket(Space_Object_t* rocketPtr){
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	6078      	str	r0, [r7, #4]
	if((rocketPtr->Object_Property.aliveFlag == ALIVE_FALSE) && (rocketPtr->Object_Image.clearWhenDead == DEAD_OBJECT_UNDECLARED)){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7e5b      	ldrb	r3, [r3, #25]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d120      	bne.n	8001d76 <delete_dead_rocket+0x52>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d11b      	bne.n	8001d76 <delete_dead_rocket+0x52>
//		ssd1306_Clear(5);
		ssd1306_DrawBitmap(rocketPtr->Object_Property.x, rocketPtr->Object_Property.y, rocketPtr->Object_Image.bitmapImage,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	b2d8      	uxtb	r0, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d4c:	b2d9      	uxtb	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 4020 	ldrb.w	r4, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d5e:	2500      	movs	r5, #0
 8001d60:	9501      	str	r5, [sp, #4]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4623      	mov	r3, r4
 8001d66:	f000 fc43 	bl	80025f0 <ssd1306_DrawBitmap>
				rocketPtr->Object_Image.imageWidth, rocketPtr->Object_Image.imageHeight, Black);
		ssd1306_UpdateScreen();
 8001d6a:	f000 faff 	bl	800236c <ssd1306_UpdateScreen>
		rocketPtr->Object_Image.clearWhenDead = DEAD_OBJECT_DECLARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bdb0      	pop	{r4, r5, r7, pc}

08001d7e <delete_dead_asteroid>:

/* Delete dead asteroid */
void delete_dead_asteroid(Space_Object_t* asteroidPtr){
 8001d7e:	b5b0      	push	{r4, r5, r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af02      	add	r7, sp, #8
 8001d84:	6078      	str	r0, [r7, #4]
	if((asteroidPtr->Object_Property.aliveFlag == ALIVE_FALSE) && (asteroidPtr->Object_Image.clearWhenDead == DEAD_OBJECT_UNDECLARED)){
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7e5b      	ldrb	r3, [r3, #25]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d120      	bne.n	8001dd0 <delete_dead_asteroid+0x52>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11b      	bne.n	8001dd0 <delete_dead_asteroid+0x52>
//		ssd1306_Clear(5);
		ssd1306_DrawBitmap(asteroidPtr->Object_Property.x, asteroidPtr->Object_Property.y, asteroidPtr->Object_Image.bitmapImage,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9e:	b2d8      	uxtb	r0, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da6:	b2d9      	uxtb	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 4020 	ldrb.w	r4, [r3, #32]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db8:	2500      	movs	r5, #0
 8001dba:	9501      	str	r5, [sp, #4]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	f000 fc16 	bl	80025f0 <ssd1306_DrawBitmap>
				asteroidPtr->Object_Image.imageWidth, asteroidPtr->Object_Image.imageHeight, Black);
		ssd1306_UpdateScreen();
 8001dc4:	f000 fad2 	bl	800236c <ssd1306_UpdateScreen>
		asteroidPtr->Object_Image.clearWhenDead = DEAD_OBJECT_DECLARED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bdb0      	pop	{r4, r5, r7, pc}

08001dd8 <accelerate_player_spaceship>:

/* Accelerate player spaceship */
void accelerate_player_spaceship(Space_Object_t* playerSpaceShipPtr, int8_t ddx, int8_t ddy){
 8001dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	70fb      	strb	r3, [r7, #3]
 8001de6:	4613      	mov	r3, r2
 8001de8:	70bb      	strb	r3, [r7, #2]
	if(fabs(playerSpaceShipPtr->Object_Property.dx) < PLAYER_MAX_SPEED){
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001df0:	4690      	mov	r8, r2
 8001df2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <accelerate_player_spaceship+0xac>)
 8001dfc:	4640      	mov	r0, r8
 8001dfe:	4649      	mov	r1, r9
 8001e00:	f7fe fc7a 	bl	80006f8 <__aeabi_dcmplt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <accelerate_player_spaceship+0x58>
		playerSpaceShipPtr->Object_Property.dx += ddx;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fba5 	bl	8000564 <__aeabi_i2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4640      	mov	r0, r8
 8001e20:	4649      	mov	r1, r9
 8001e22:	f7fe fa53 	bl	80002cc <__adddf3>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	if(fabs(playerSpaceShipPtr->Object_Property.dy) < PLAYER_MAX_SPEED){
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e36:	4614      	mov	r4, r2
 8001e38:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <accelerate_player_spaceship+0xac>)
 8001e42:	4620      	mov	r0, r4
 8001e44:	4629      	mov	r1, r5
 8001e46:	f7fe fc57 	bl	80006f8 <__aeabi_dcmplt>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d100      	bne.n	8001e52 <accelerate_player_spaceship+0x7a>
		playerSpaceShipPtr->Object_Property.dy += ddy;
	}
}
 8001e50:	e012      	b.n	8001e78 <accelerate_player_spaceship+0xa0>
		playerSpaceShipPtr->Object_Property.dy += ddy;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001e58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb81 	bl	8000564 <__aeabi_i2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4620      	mov	r0, r4
 8001e68:	4629      	mov	r1, r5
 8001e6a:	f7fe fa2f 	bl	80002cc <__adddf3>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e82:	bf00      	nop
 8001e84:	40140000 	.word	0x40140000

08001e88 <display_black_background>:
		}
	}
}

/* Display black background */
void display_black_background(){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 fa49 	bl	8002324 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001e92:	f000 fa6b 	bl	800236c <ssd1306_UpdateScreen>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_TIM_PeriodElapsedCallback>:


/* Timer interrupt callback */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d102      	bne.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		shootButtonFirstTimeFlag = FIRST_TIME_TRUE;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == htim4.Instance){
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d102      	bne.n	8001ec8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		frameUpdate = SET_FRAME;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	2000094c 	.word	0x2000094c
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	200004f8 	.word	0x200004f8
 8001ee0:	200000a4 	.word	0x200000a4

08001ee4 <joystick_read_direction>:
////	  vr_y = adc_buf[0];
//	  control_led(adc_buf[1], adc_buf[0]);
//
//}

uint8_t joystick_read_direction(){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) adc_buf, 2);
 8001eea:	2202      	movs	r2, #2
 8001eec:	4941      	ldr	r1, [pc, #260]	; (8001ff4 <joystick_read_direction+0x110>)
 8001eee:	4842      	ldr	r0, [pc, #264]	; (8001ff8 <joystick_read_direction+0x114>)
 8001ef0:	f001 fb3a 	bl	8003568 <HAL_ADC_Start_DMA>
	  vr_x = adc_buf[1];
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <joystick_read_direction+0x110>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a40      	ldr	r2, [pc, #256]	; (8001ffc <joystick_read_direction+0x118>)
 8001efa:	6013      	str	r3, [r2, #0]
	  vr_y = adc_buf[0];
 8001efc:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <joystick_read_direction+0x110>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <joystick_read_direction+0x11c>)
 8001f02:	6013      	str	r3, [r2, #0]

	  int16_t xDir = 0, yDir = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	80fb      	strh	r3, [r7, #6]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	80bb      	strh	r3, [r7, #4]

	  if (vr_x > X_POS_THRES_HIGH) {
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <joystick_read_direction+0x118>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d902      	bls.n	8001f1e <joystick_read_direction+0x3a>
		  xDir = X_DIR_RIGHT;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	80fb      	strh	r3, [r7, #6]
 8001f1c:	e00a      	b.n	8001f34 <joystick_read_direction+0x50>
	  }
	  else if (vr_x < X_POS_THRES_LOW) {
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <joystick_read_direction+0x118>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f26:	d203      	bcs.n	8001f30 <joystick_read_direction+0x4c>
		  xDir = X_DIR_LEFT;
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	80fb      	strh	r3, [r7, #6]
 8001f2e:	e001      	b.n	8001f34 <joystick_read_direction+0x50>
	  }
	  else {
		  xDir = X_DIR_CENTER;
 8001f30:	2300      	movs	r3, #0
 8001f32:	80fb      	strh	r3, [r7, #6]
	  }

	  if (vr_y > Y_POS_THRES_HIGH) {
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <joystick_read_direction+0x11c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d902      	bls.n	8001f46 <joystick_read_direction+0x62>
		  yDir = Y_DIR_UP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	80bb      	strh	r3, [r7, #4]
 8001f44:	e00a      	b.n	8001f5c <joystick_read_direction+0x78>
	  }
	  else if (vr_y < Y_POS_THRES_LOW) {
 8001f46:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <joystick_read_direction+0x11c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f4e:	d203      	bcs.n	8001f58 <joystick_read_direction+0x74>
		  yDir = Y_DIR_DOWN;
 8001f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f54:	80bb      	strh	r3, [r7, #4]
 8001f56:	e001      	b.n	8001f5c <joystick_read_direction+0x78>
	  }
	  else {
		  yDir = Y_DIR_CENTER;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	80bb      	strh	r3, [r7, #4]
	  }


	  if (xDir == X_DIR_LEFT) {
 8001f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f64:	d112      	bne.n	8001f8c <joystick_read_direction+0xa8>
		  if (yDir == Y_DIR_UP) {
 8001f66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <joystick_read_direction+0x8e>
			  return JS_DIR_LEFT_UP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e03b      	b.n	8001fea <joystick_read_direction+0x106>
		  }
		  else if (yDir == Y_DIR_DOWN) {
 8001f72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f7a:	d101      	bne.n	8001f80 <joystick_read_direction+0x9c>
			  return JS_DIR_LEFT_DOWN;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e034      	b.n	8001fea <joystick_read_direction+0x106>
		  }
		  else if (yDir == Y_DIR_CENTER) {
 8001f80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <joystick_read_direction+0xa8>
			  return JS_DIR_LEFT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e02e      	b.n	8001fea <joystick_read_direction+0x106>
		  }
	  }

	  if (xDir == X_DIR_RIGHT) {
 8001f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d112      	bne.n	8001fba <joystick_read_direction+0xd6>
		  if (yDir == Y_DIR_UP) {
 8001f94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <joystick_read_direction+0xbc>
			  return JS_DIR_RIGHT_UP;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e024      	b.n	8001fea <joystick_read_direction+0x106>
		  }
		  else if (yDir == Y_DIR_DOWN) {
 8001fa0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa8:	d101      	bne.n	8001fae <joystick_read_direction+0xca>
			  return JS_DIR_RIGHT_DOWN;
 8001faa:	2305      	movs	r3, #5
 8001fac:	e01d      	b.n	8001fea <joystick_read_direction+0x106>
		  }
		  else if (yDir == Y_DIR_CENTER) {
 8001fae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <joystick_read_direction+0xd6>
			  return JS_DIR_RIGHT;
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	e017      	b.n	8001fea <joystick_read_direction+0x106>
		  }
	  }

	  if (xDir == X_DIR_CENTER) {
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d112      	bne.n	8001fe8 <joystick_read_direction+0x104>
		  if (yDir == Y_DIR_UP) {
 8001fc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <joystick_read_direction+0xea>
			  return JS_DIR_UP;
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e00d      	b.n	8001fea <joystick_read_direction+0x106>
		  }
		  else if (yDir == Y_DIR_DOWN) {
 8001fce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd6:	d101      	bne.n	8001fdc <joystick_read_direction+0xf8>
			  return JS_DIR_DOWN;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	e006      	b.n	8001fea <joystick_read_direction+0x106>
		  }
		  else if (yDir == Y_DIR_CENTER) {
 8001fdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <joystick_read_direction+0x104>
			  return JS_DIR_CENTERED;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <joystick_read_direction+0x106>
		  }
	  }
	  return -2; // -1, 1, 0 are already used
 8001fe8:	23fe      	movs	r3, #254	; 0xfe
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000a30 	.word	0x20000a30
 8001ff8:	2000055c 	.word	0x2000055c
 8001ffc:	20000a28 	.word	0x20000a28
 8002000:	20000a2c 	.word	0x20000a2c

08002004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
//  MX_SPI1_Init();
//  MX_TIM2_Init();
//  MX_TIM4_Init();
//  MX_RNG_Init();
  /* USER CODE BEGIN 2 */
	drivers_init();
 8002008:	f001 f994 	bl	8003334 <drivers_init>
	oled_init();
 800200c:	f000 f8a8 	bl	8002160 <oled_init>
	game_init();
 8002010:	f7fe fd3e 	bl	8000a90 <game_init>
	display_start_screen();
 8002014:	f7ff fa68 	bl	80014e8 <display_start_screen>
	while(button_readPin(SHOOT_BUTTON_PORT, SHOOT_BUTTON_PIN));
 8002018:	bf00      	nop
 800201a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800201e:	4845      	ldr	r0, [pc, #276]	; (8002134 <main+0x130>)
 8002020:	f001 f96c 	bl	80032fc <button_readPin>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f7      	bne.n	800201a <main+0x16>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //	  joystick_run();
	  //	  oled_buttonDisplay();
	  display_black_background();
 800202a:	f7ff ff2d 	bl	8001e88 <display_black_background>
	  create_player_spaceship(&playerSpaceShip);
 800202e:	4842      	ldr	r0, [pc, #264]	; (8002138 <main+0x134>)
 8002030:	f7fe fd46 	bl	8000ac0 <create_player_spaceship>
	  draw_player_spaceship(&playerSpaceShip);
 8002034:	4840      	ldr	r0, [pc, #256]	; (8002138 <main+0x134>)
 8002036:	f7fe ffef 	bl	8001018 <draw_player_spaceship>
	  create_asteroid(&asteroidVector, asteroid, numOfAsteroidInWave[currentWave], &playerSpaceShip);
 800203a:	4b40      	ldr	r3, [pc, #256]	; (800213c <main+0x138>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <main+0x13c>)
 8002042:	5c9a      	ldrb	r2, [r3, r2]
 8002044:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <main+0x134>)
 8002046:	493f      	ldr	r1, [pc, #252]	; (8002144 <main+0x140>)
 8002048:	483f      	ldr	r0, [pc, #252]	; (8002148 <main+0x144>)
 800204a:	f7fe fd6d 	bl	8000b28 <create_asteroid>
	  draw_asteroid(&asteroidVector);
 800204e:	483e      	ldr	r0, [pc, #248]	; (8002148 <main+0x144>)
 8002050:	f7ff f805 	bl	800105e <draw_asteroid>

	  start_frame_update();
 8002054:	f7fe fd2a 	bl	8000aac <start_frame_update>

	  while(1){
		  if (frameUpdate == SET_FRAME){
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <main+0x148>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d1fb      	bne.n	8002058 <main+0x54>
			  display_score();
 8002060:	f7ff f9fa 	bl	8001458 <display_score>
			  update_player_spaceship(&playerSpaceShip);
 8002064:	4834      	ldr	r0, [pc, #208]	; (8002138 <main+0x134>)
 8002066:	f7ff f862 	bl	800112e <update_player_spaceship>
			  draw_player_spaceship(&playerSpaceShip);
 800206a:	4833      	ldr	r0, [pc, #204]	; (8002138 <main+0x134>)
 800206c:	f7fe ffd4 	bl	8001018 <draw_player_spaceship>

			  create_rocket(&rocketVector, rocket, &playerSpaceShip);
 8002070:	4a31      	ldr	r2, [pc, #196]	; (8002138 <main+0x134>)
 8002072:	4937      	ldr	r1, [pc, #220]	; (8002150 <main+0x14c>)
 8002074:	4837      	ldr	r0, [pc, #220]	; (8002154 <main+0x150>)
 8002076:	f7fe fde7 	bl	8000c48 <create_rocket>
			  update_rocket(&rocketVector, &asteroidVector);
 800207a:	4933      	ldr	r1, [pc, #204]	; (8002148 <main+0x144>)
 800207c:	4835      	ldr	r0, [pc, #212]	; (8002154 <main+0x150>)
 800207e:	f7ff f91d 	bl	80012bc <update_rocket>
			  draw_rocket(&rocketVector);
 8002082:	4834      	ldr	r0, [pc, #208]	; (8002154 <main+0x150>)
 8002084:	f7ff f81f 	bl	80010c6 <draw_rocket>
			  update_asteroid(&asteroidVector, &playerSpaceShip);
 8002088:	492b      	ldr	r1, [pc, #172]	; (8002138 <main+0x134>)
 800208a:	482f      	ldr	r0, [pc, #188]	; (8002148 <main+0x144>)
 800208c:	f7ff f85e 	bl	800114c <update_asteroid>
			  draw_asteroid(&asteroidVector);
 8002090:	482d      	ldr	r0, [pc, #180]	; (8002148 <main+0x144>)
 8002092:	f7fe ffe4 	bl	800105e <draw_asteroid>

			  if (playerSpaceShip.Object_Property.aliveFlag == ALIVE_FALSE){
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <main+0x134>)
 8002098:	7e5b      	ldrb	r3, [r3, #25]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d12b      	bne.n	80020f6 <main+0xf2>
				  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	2101      	movs	r1, #1
 80020a2:	482d      	ldr	r0, [pc, #180]	; (8002158 <main+0x154>)
 80020a4:	f002 fc4c 	bl	8004940 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LD2_Blue_GPIO_Port, LD2_Blue_Pin, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	482a      	ldr	r0, [pc, #168]	; (8002158 <main+0x154>)
 80020ae:	f002 fc47 	bl	8004940 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LD3_Red_GPIO_Port, LD2_Blue_Pin, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	4828      	ldr	r0, [pc, #160]	; (8002158 <main+0x154>)
 80020b8:	f002 fc42 	bl	8004940 <HAL_GPIO_WritePin>
				  display_game_over_screen();
 80020bc:	f7ff fa4c 	bl	8001558 <display_game_over_screen>
				  while(button_readPin(SHOOT_BUTTON_PORT, SHOOT_BUTTON_PIN));
 80020c0:	bf00      	nop
 80020c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c6:	481b      	ldr	r0, [pc, #108]	; (8002134 <main+0x130>)
 80020c8:	f001 f918 	bl	80032fc <button_readPin>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f7      	bne.n	80020c2 <main+0xbe>
				  reset_game();
 80020d2:	f7ff fa65 	bl	80015a0 <reset_game>
				  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2101      	movs	r1, #1
 80020da:	481f      	ldr	r0, [pc, #124]	; (8002158 <main+0x154>)
 80020dc:	f002 fc30 	bl	8004940 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LD2_Blue_GPIO_Port, LD2_Blue_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	481c      	ldr	r0, [pc, #112]	; (8002158 <main+0x154>)
 80020e6:	f002 fc2b 	bl	8004940 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LD3_Red_GPIO_Port, LD2_Blue_Pin, GPIO_PIN_RESET);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	481a      	ldr	r0, [pc, #104]	; (8002158 <main+0x154>)
 80020f0:	f002 fc26 	bl	8004940 <HAL_GPIO_WritePin>
				  break;
 80020f4:	e01d      	b.n	8002132 <main+0x12e>
			  }

			  if (asteroidVector.total == 0){
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <main+0x144>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d115      	bne.n	800212a <main+0x126>
				  HAL_TIM_Base_Stop_IT(&htim4);
 80020fe:	4817      	ldr	r0, [pc, #92]	; (800215c <main+0x158>)
 8002100:	f003 ff3e 	bl	8005f80 <HAL_TIM_Base_Stop_IT>
				  currentWave++;
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <main+0x138>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <main+0x138>)
 800210e:	701a      	strb	r2, [r3, #0]
				  create_asteroid(&asteroidVector, asteroid, numOfAsteroidInWave[currentWave], &playerSpaceShip);
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <main+0x138>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <main+0x13c>)
 8002118:	5c9a      	ldrb	r2, [r3, r2]
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <main+0x134>)
 800211c:	4909      	ldr	r1, [pc, #36]	; (8002144 <main+0x140>)
 800211e:	480a      	ldr	r0, [pc, #40]	; (8002148 <main+0x144>)
 8002120:	f7fe fd02 	bl	8000b28 <create_asteroid>
				  HAL_TIM_Base_Start_IT(&htim4);
 8002124:	480d      	ldr	r0, [pc, #52]	; (800215c <main+0x158>)
 8002126:	f003 febb 	bl	8005ea0 <HAL_TIM_Base_Start_IT>
			  }

			  frameUpdate = CLEAR_FRAME;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <main+0x148>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
		  if (frameUpdate == SET_FRAME){
 8002130:	e792      	b.n	8002058 <main+0x54>
	  display_black_background();
 8002132:	e77a      	b.n	800202a <main+0x26>
 8002134:	40021400 	.word	0x40021400
 8002138:	200004c8 	.word	0x200004c8
 800213c:	20000001 	.word	0x20000001
 8002140:	20000004 	.word	0x20000004
 8002144:	200005a8 	.word	0x200005a8
 8002148:	200008d8 	.word	0x200008d8
 800214c:	200000a4 	.word	0x200000a4
 8002150:	20000998 	.word	0x20000998
 8002154:	20000550 	.word	0x20000550
 8002158:	40020400 	.word	0x40020400
 800215c:	200004f8 	.word	0x200004f8

08002160 <oled_init>:
GameObject asteroid_medium = {16, 5, 16, 16, ASTEROID_16x16};
GameObject spaceship_east = {16, 20, 24, 24, SPACESHIP_24x24_EAST};
GameObject* list_gameObjects[num_gameObjects] = {&spaceship_east};

/* Initializes SPI and the OLED */
void oled_init(){
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8002164:	f000 f874 	bl	8002250 <ssd1306_Init>
	HAL_Delay(20);
 8002168:	2014      	movs	r0, #20
 800216a:	f001 f995 	bl	8003498 <HAL_Delay>
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8002178:	2201      	movs	r2, #1
 800217a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800217e:	480b      	ldr	r0, [pc, #44]	; (80021ac <ssd1306_Reset+0x38>)
 8002180:	f002 fbde 	bl	8004940 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218a:	4809      	ldr	r0, [pc, #36]	; (80021b0 <ssd1306_Reset+0x3c>)
 800218c:	f002 fbd8 	bl	8004940 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002190:	200a      	movs	r0, #10
 8002192:	f001 f981 	bl	8003498 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219c:	4804      	ldr	r0, [pc, #16]	; (80021b0 <ssd1306_Reset+0x3c>)
 800219e:	f002 fbcf 	bl	8004940 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80021a2:	200a      	movs	r0, #10
 80021a4:	f001 f978 	bl	8003498 <HAL_Delay>
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021400 	.word	0x40021400

080021b4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <ssd1306_WriteCommand+0x44>)
 80021c6:	f002 fbbb 	bl	8004940 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <ssd1306_WriteCommand+0x44>)
 80021d2:	f002 fbb5 	bl	8004940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80021d6:	1df9      	adds	r1, r7, #7
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021dc:	2201      	movs	r2, #1
 80021de:	4807      	ldr	r0, [pc, #28]	; (80021fc <ssd1306_WriteCommand+0x48>)
 80021e0:	f003 fc08 	bl	80059f4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ea:	4803      	ldr	r0, [pc, #12]	; (80021f8 <ssd1306_WriteCommand+0x44>)
 80021ec:	f002 fba8 	bl	8004940 <HAL_GPIO_WritePin>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	200008f4 	.word	0x200008f4

08002200 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800220a:	2200      	movs	r2, #0
 800220c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002210:	480d      	ldr	r0, [pc, #52]	; (8002248 <ssd1306_WriteData+0x48>)
 8002212:	f002 fb95 	bl	8004940 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002216:	2201      	movs	r2, #1
 8002218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221c:	480a      	ldr	r0, [pc, #40]	; (8002248 <ssd1306_WriteData+0x48>)
 800221e:	f002 fb8f 	bl	8004940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b29a      	uxth	r2, r3
 8002226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4807      	ldr	r0, [pc, #28]	; (800224c <ssd1306_WriteData+0x4c>)
 800222e:	f003 fbe1 	bl	80059f4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <ssd1306_WriteData+0x48>)
 800223a:	f002 fb81 	bl	8004940 <HAL_GPIO_WritePin>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40020c00 	.word	0x40020c00
 800224c:	200008f4 	.word	0x200008f4

08002250 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002254:	f7ff ff8e 	bl	8002174 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002258:	2064      	movs	r0, #100	; 0x64
 800225a:	f001 f91d 	bl	8003498 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800225e:	2000      	movs	r0, #0
 8002260:	f000 fa48 	bl	80026f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002264:	2020      	movs	r0, #32
 8002266:	f7ff ffa5 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff ffa2 	bl	80021b4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002270:	20b0      	movs	r0, #176	; 0xb0
 8002272:	f7ff ff9f 	bl	80021b4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002276:	20c8      	movs	r0, #200	; 0xc8
 8002278:	f7ff ff9c 	bl	80021b4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff ff99 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002282:	2010      	movs	r0, #16
 8002284:	f7ff ff96 	bl	80021b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002288:	2040      	movs	r0, #64	; 0x40
 800228a:	f7ff ff93 	bl	80021b4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800228e:	20ff      	movs	r0, #255	; 0xff
 8002290:	f000 fa1c 	bl	80026cc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002294:	20a1      	movs	r0, #161	; 0xa1
 8002296:	f7ff ff8d 	bl	80021b4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800229a:	20a6      	movs	r0, #166	; 0xa6
 800229c:	f7ff ff8a 	bl	80021b4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80022a0:	20a8      	movs	r0, #168	; 0xa8
 80022a2:	f7ff ff87 	bl	80021b4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80022a6:	203f      	movs	r0, #63	; 0x3f
 80022a8:	f7ff ff84 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022ac:	20a4      	movs	r0, #164	; 0xa4
 80022ae:	f7ff ff81 	bl	80021b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80022b2:	20d3      	movs	r0, #211	; 0xd3
 80022b4:	f7ff ff7e 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ff7b 	bl	80021b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80022be:	20d5      	movs	r0, #213	; 0xd5
 80022c0:	f7ff ff78 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80022c4:	20f0      	movs	r0, #240	; 0xf0
 80022c6:	f7ff ff75 	bl	80021b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80022ca:	20d9      	movs	r0, #217	; 0xd9
 80022cc:	f7ff ff72 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80022d0:	2022      	movs	r0, #34	; 0x22
 80022d2:	f7ff ff6f 	bl	80021b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80022d6:	20da      	movs	r0, #218	; 0xda
 80022d8:	f7ff ff6c 	bl	80021b4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80022dc:	2012      	movs	r0, #18
 80022de:	f7ff ff69 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80022e2:	20db      	movs	r0, #219	; 0xdb
 80022e4:	f7ff ff66 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80022e8:	2020      	movs	r0, #32
 80022ea:	f7ff ff63 	bl	80021b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80022ee:	208d      	movs	r0, #141	; 0x8d
 80022f0:	f7ff ff60 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80022f4:	2014      	movs	r0, #20
 80022f6:	f7ff ff5d 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 f9fa 	bl	80026f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002300:	2000      	movs	r0, #0
 8002302:	f000 f80f 	bl	8002324 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002306:	f000 f831 	bl	800236c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <ssd1306_Init+0xd0>)
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <ssd1306_Init+0xd0>)
 8002312:	2200      	movs	r2, #0
 8002314:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002316:	4b02      	ldr	r3, [pc, #8]	; (8002320 <ssd1306_Init+0xd0>)
 8002318:	2201      	movs	r2, #1
 800231a:	711a      	strb	r2, [r3, #4]
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200004ac 	.word	0x200004ac

08002324 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e00d      	b.n	8002350 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <ssd1306_Fill+0x1a>
 800233a:	2100      	movs	r1, #0
 800233c:	e000      	b.n	8002340 <ssd1306_Fill+0x1c>
 800233e:	21ff      	movs	r1, #255	; 0xff
 8002340:	4a09      	ldr	r2, [pc, #36]	; (8002368 <ssd1306_Fill+0x44>)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	460a      	mov	r2, r1
 8002348:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3301      	adds	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002356:	d3ed      	bcc.n	8002334 <ssd1306_Fill+0x10>
    }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	200000ac 	.word	0x200000ac

0800236c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002372:	2300      	movs	r3, #0
 8002374:	71fb      	strb	r3, [r7, #7]
 8002376:	e016      	b.n	80023a6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	3b50      	subs	r3, #80	; 0x50
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff18 	bl	80021b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002384:	2000      	movs	r0, #0
 8002386:	f7ff ff15 	bl	80021b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800238a:	2010      	movs	r0, #16
 800238c:	f7ff ff12 	bl	80021b4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	01db      	lsls	r3, r3, #7
 8002394:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <ssd1306_UpdateScreen+0x4c>)
 8002396:	4413      	add	r3, r2
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff30 	bl	8002200 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	3301      	adds	r3, #1
 80023a4:	71fb      	strb	r3, [r7, #7]
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2b07      	cmp	r3, #7
 80023aa:	d9e5      	bls.n	8002378 <ssd1306_UpdateScreen+0xc>
    }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200000ac 	.word	0x200000ac

080023bc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
 80023c6:	460b      	mov	r3, r1
 80023c8:	71bb      	strb	r3, [r7, #6]
 80023ca:	4613      	mov	r3, r2
 80023cc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db3d      	blt.n	8002452 <ssd1306_DrawPixel+0x96>
 80023d6:	79bb      	ldrb	r3, [r7, #6]
 80023d8:	2b3f      	cmp	r3, #63	; 0x3f
 80023da:	d83a      	bhi.n	8002452 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80023dc:	797b      	ldrb	r3, [r7, #5]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d11a      	bne.n	8002418 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	79bb      	ldrb	r3, [r7, #6]
 80023e6:	08db      	lsrs	r3, r3, #3
 80023e8:	b2d8      	uxtb	r0, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	01db      	lsls	r3, r3, #7
 80023ee:	4413      	add	r3, r2
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <ssd1306_DrawPixel+0xa4>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	b25a      	sxtb	r2, r3
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	b25b      	sxtb	r3, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	b259      	sxtb	r1, r3
 8002408:	79fa      	ldrb	r2, [r7, #7]
 800240a:	4603      	mov	r3, r0
 800240c:	01db      	lsls	r3, r3, #7
 800240e:	4413      	add	r3, r2
 8002410:	b2c9      	uxtb	r1, r1
 8002412:	4a13      	ldr	r2, [pc, #76]	; (8002460 <ssd1306_DrawPixel+0xa4>)
 8002414:	54d1      	strb	r1, [r2, r3]
 8002416:	e01d      	b.n	8002454 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002418:	79fa      	ldrb	r2, [r7, #7]
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	08db      	lsrs	r3, r3, #3
 800241e:	b2d8      	uxtb	r0, r3
 8002420:	4603      	mov	r3, r0
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	4413      	add	r3, r2
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <ssd1306_DrawPixel+0xa4>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	b25a      	sxtb	r2, r3
 800242c:	79bb      	ldrb	r3, [r7, #6]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	b25b      	sxtb	r3, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	b25b      	sxtb	r3, r3
 800243e:	4013      	ands	r3, r2
 8002440:	b259      	sxtb	r1, r3
 8002442:	79fa      	ldrb	r2, [r7, #7]
 8002444:	4603      	mov	r3, r0
 8002446:	01db      	lsls	r3, r3, #7
 8002448:	4413      	add	r3, r2
 800244a:	b2c9      	uxtb	r1, r1
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <ssd1306_DrawPixel+0xa4>)
 800244e:	54d1      	strb	r1, [r2, r3]
 8002450:	e000      	b.n	8002454 <ssd1306_DrawPixel+0x98>
        return;
 8002452:	bf00      	nop
    }
}
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200000ac 	.word	0x200000ac

08002464 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	4604      	mov	r4, r0
 800246c:	1d38      	adds	r0, r7, #4
 800246e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002472:	461a      	mov	r2, r3
 8002474:	4623      	mov	r3, r4
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	4613      	mov	r3, r2
 800247a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b1f      	cmp	r3, #31
 8002480:	d902      	bls.n	8002488 <ssd1306_WriteChar+0x24>
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	2b7e      	cmp	r3, #126	; 0x7e
 8002486:	d901      	bls.n	800248c <ssd1306_WriteChar+0x28>
        return 0;
 8002488:	2300      	movs	r3, #0
 800248a:	e06d      	b.n	8002568 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800248c:	4b38      	ldr	r3, [pc, #224]	; (8002570 <ssd1306_WriteChar+0x10c>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	793b      	ldrb	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	2b80      	cmp	r3, #128	; 0x80
 8002498:	dc06      	bgt.n	80024a8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800249a:	4b35      	ldr	r3, [pc, #212]	; (8002570 <ssd1306_WriteChar+0x10c>)
 800249c:	885b      	ldrh	r3, [r3, #2]
 800249e:	461a      	mov	r2, r3
 80024a0:	797b      	ldrb	r3, [r7, #5]
 80024a2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	dd01      	ble.n	80024ac <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e05d      	b.n	8002568 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	e04c      	b.n	800254c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	3b20      	subs	r3, #32
 80024b8:	7979      	ldrb	r1, [r7, #5]
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	440b      	add	r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e034      	b.n	800253c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <ssd1306_WriteChar+0x10c>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	b2d8      	uxtb	r0, r3
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <ssd1306_WriteChar+0x10c>)
 80024f2:	885b      	ldrh	r3, [r3, #2]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	7bba      	ldrb	r2, [r7, #14]
 8002500:	4619      	mov	r1, r3
 8002502:	f7ff ff5b 	bl	80023bc <ssd1306_DrawPixel>
 8002506:	e016      	b.n	8002536 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <ssd1306_WriteChar+0x10c>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	4413      	add	r3, r2
 8002514:	b2d8      	uxtb	r0, r3
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <ssd1306_WriteChar+0x10c>)
 8002518:	885b      	ldrh	r3, [r3, #2]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4413      	add	r3, r2
 8002522:	b2d9      	uxtb	r1, r3
 8002524:	7bbb      	ldrb	r3, [r7, #14]
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	f7ff ff43 	bl	80023bc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3301      	adds	r3, #1
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	793b      	ldrb	r3, [r7, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4293      	cmp	r3, r2
 8002544:	d3c5      	bcc.n	80024d2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3301      	adds	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	797b      	ldrb	r3, [r7, #5]
 800254e:	461a      	mov	r2, r3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	4293      	cmp	r3, r2
 8002554:	d3ad      	bcc.n	80024b2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <ssd1306_WriteChar+0x10c>)
 8002558:	881a      	ldrh	r2, [r3, #0]
 800255a:	793b      	ldrb	r3, [r7, #4]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4413      	add	r3, r2
 8002560:	b29a      	uxth	r2, r3
 8002562:	4b03      	ldr	r3, [pc, #12]	; (8002570 <ssd1306_WriteChar+0x10c>)
 8002564:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3724      	adds	r7, #36	; 0x24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	200004ac 	.word	0x200004ac

08002574 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	1d38      	adds	r0, r7, #4
 800257e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002582:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002584:	e012      	b.n	80025ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	7818      	ldrb	r0, [r3, #0]
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	1d3a      	adds	r2, r7, #4
 800258e:	ca06      	ldmia	r2, {r1, r2}
 8002590:	f7ff ff68 	bl	8002464 <ssd1306_WriteChar>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d002      	beq.n	80025a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	e008      	b.n	80025b8 <ssd1306_WriteString+0x44>
        }
        str++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e8      	bne.n	8002586 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	781b      	ldrb	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	460a      	mov	r2, r1
 80025ca:	71fb      	strb	r3, [r7, #7]
 80025cc:	4613      	mov	r3, r2
 80025ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <ssd1306_SetCursor+0x2c>)
 80025d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80025d8:	79bb      	ldrb	r3, [r7, #6]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <ssd1306_SetCursor+0x2c>)
 80025de:	805a      	strh	r2, [r3, #2]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	200004ac 	.word	0x200004ac

080025f0 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	603a      	str	r2, [r7, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	460b      	mov	r3, r1
 8002600:	71bb      	strb	r3, [r7, #6]
 8002602:	4613      	mov	r3, r2
 8002604:	717b      	strb	r3, [r7, #5]

	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002606:	797b      	ldrb	r3, [r7, #5]
 8002608:	3307      	adds	r3, #7
 800260a:	2b00      	cmp	r3, #0
 800260c:	da00      	bge.n	8002610 <ssd1306_DrawBitmap+0x20>
 800260e:	3307      	adds	r3, #7
 8002610:	10db      	asrs	r3, r3, #3
 8002612:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db3e      	blt.n	800269e <ssd1306_DrawBitmap+0xae>
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	2b3f      	cmp	r3, #63	; 0x3f
 8002624:	d83b      	bhi.n	800269e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002626:	2300      	movs	r3, #0
 8002628:	73bb      	strb	r3, [r7, #14]
 800262a:	e033      	b.n	8002694 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800262c:	2300      	movs	r3, #0
 800262e:	737b      	strb	r3, [r7, #13]
 8002630:	e026      	b.n	8002680 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002632:	7b7b      	ldrb	r3, [r7, #13]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e00d      	b.n	8002660 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	7b7a      	ldrb	r2, [r7, #13]
 8002650:	08d2      	lsrs	r2, r2, #3
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	4413      	add	r3, r2
 8002656:	461a      	mov	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	da08      	bge.n	800267a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002668:	79fa      	ldrb	r2, [r7, #7]
 800266a:	7b7b      	ldrb	r3, [r7, #13]
 800266c:	4413      	add	r3, r2
 800266e:	b2db      	uxtb	r3, r3
 8002670:	7f3a      	ldrb	r2, [r7, #28]
 8002672:	79b9      	ldrb	r1, [r7, #6]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fea1 	bl	80023bc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800267a:	7b7b      	ldrb	r3, [r7, #13]
 800267c:	3301      	adds	r3, #1
 800267e:	737b      	strb	r3, [r7, #13]
 8002680:	7b7a      	ldrb	r2, [r7, #13]
 8002682:	797b      	ldrb	r3, [r7, #5]
 8002684:	429a      	cmp	r2, r3
 8002686:	d3d4      	bcc.n	8002632 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	3301      	adds	r3, #1
 800268c:	73bb      	strb	r3, [r7, #14]
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	3301      	adds	r3, #1
 8002692:	71bb      	strb	r3, [r7, #6]
 8002694:	7bba      	ldrb	r2, [r7, #14]
 8002696:	7e3b      	ldrb	r3, [r7, #24]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3c7      	bcc.n	800262c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800269c:	e000      	b.n	80026a0 <ssd1306_DrawBitmap+0xb0>
        return;
 800269e:	bf00      	nop
}
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <ssd1306_Clear>:

/* Clears the screen */
void ssd1306_Clear (int8_t delayTime)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7ff fe37 	bl	8002324 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80026b6:	f7ff fe59 	bl	800236c <ssd1306_UpdateScreen>
    HAL_Delay(delayTime);
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 feea 	bl	8003498 <HAL_Delay>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80026d6:	2381      	movs	r3, #129	; 0x81
 80026d8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fd69 	bl	80021b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fd65 	bl	80021b4 <ssd1306_WriteCommand>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002704:	23af      	movs	r3, #175	; 0xaf
 8002706:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <ssd1306_SetDisplayOn+0x38>)
 800270a:	2201      	movs	r2, #1
 800270c:	715a      	strb	r2, [r3, #5]
 800270e:	e004      	b.n	800271a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002710:	23ae      	movs	r3, #174	; 0xae
 8002712:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <ssd1306_SetDisplayOn+0x38>)
 8002716:	2200      	movs	r2, #0
 8002718:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fd49 	bl	80021b4 <ssd1306_WriteCommand>
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200004ac 	.word	0x200004ac

08002730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_MspInit+0x4c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_MspInit+0x4c>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_MspInit+0x4c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_MspInit+0x4c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <HAL_MspInit+0x4c>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_MspInit+0x4c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <HAL_ADC_MspInit+0xd8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d156      	bne.n	8002850 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_ADC_MspInit+0xdc>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a2c      	ldr	r2, [pc, #176]	; (800285c <HAL_ADC_MspInit+0xdc>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <HAL_ADC_MspInit+0xdc>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_ADC_MspInit+0xdc>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a25      	ldr	r2, [pc, #148]	; (800285c <HAL_ADC_MspInit+0xdc>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_ADC_MspInit+0xdc>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80027da:	2312      	movs	r3, #18
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027de:	2303      	movs	r3, #3
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	481c      	ldr	r0, [pc, #112]	; (8002860 <HAL_ADC_MspInit+0xe0>)
 80027ee:	f001 fefb 	bl	80045e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_ADC_MspInit+0xe8>)
 80027f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 800280c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002810:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 8002814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002818:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 800281c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002820:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 8002824:	2200      	movs	r2, #0
 8002826:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 8002836:	f001 fb67 	bl	8003f08 <HAL_DMA_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002840:	f000 fd34 	bl	80032ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a07      	ldr	r2, [pc, #28]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
 800284a:	4a06      	ldr	r2, [pc, #24]	; (8002864 <HAL_ADC_MspInit+0xe4>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40012000 	.word	0x40012000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020800 	.word	0x40020800
 8002864:	20000878 	.word	0x20000878
 8002868:	40026410 	.word	0x40026410

0800286c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b09a      	sub	sp, #104	; 0x68
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	2258      	movs	r2, #88	; 0x58
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f003 ffaf 	bl	80067e0 <memset>
  if(hrng->Instance==RNG)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a15      	ldr	r2, [pc, #84]	; (80028dc <HAL_RNG_MspInit+0x70>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d123      	bne.n	80028d4 <HAL_RNG_MspInit+0x68>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800288c:	2320      	movs	r3, #32
 800288e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002890:	2300      	movs	r3, #0
 8002892:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fa4d 	bl	8004d38 <HAL_RCCEx_PeriphCLKConfig>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_RNG_MspInit+0x3c>
    {
      Error_Handler();
 80028a4:	f000 fd02 	bl	80032ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_RNG_MspInit+0x74>)
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_RNG_MspInit+0x74>)
 80028b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b6:	6353      	str	r3, [r2, #52]	; 0x34
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RNG_MspInit+0x74>)
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	2050      	movs	r0, #80	; 0x50
 80028ca:	f001 fae6 	bl	8003e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 80028ce:	2050      	movs	r0, #80	; 0x50
 80028d0:	f001 faff 	bl	8003ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80028d4:	bf00      	nop
 80028d6:	3768      	adds	r7, #104	; 0x68
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	50060800 	.word	0x50060800
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_SPI_MspInit+0x84>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d12b      	bne.n	800295e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_SPI_MspInit+0x88>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_SPI_MspInit+0x88>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800293e:	23a0      	movs	r3, #160	; 0xa0
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800294e:	2305      	movs	r3, #5
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <HAL_SPI_MspInit+0x8c>)
 800295a:	f001 fe45 	bl	80045e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40013000 	.word	0x40013000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000

08002974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d116      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_TIM_Base_MspInit+0x80>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_TIM_Base_MspInit+0x80>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_TIM_Base_MspInit+0x80>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	201c      	movs	r0, #28
 80029a8:	f001 fa77 	bl	8003e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029ac:	201c      	movs	r0, #28
 80029ae:	f001 fa90 	bl	8003ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029b2:	e01a      	b.n	80029ea <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <HAL_TIM_Base_MspInit+0x84>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d115      	bne.n	80029ea <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_TIM_Base_MspInit+0x80>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <HAL_TIM_Base_MspInit+0x80>)
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_TIM_Base_MspInit+0x80>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	201e      	movs	r0, #30
 80029e0:	f001 fa5b 	bl	8003e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029e4:	201e      	movs	r0, #30
 80029e6:	f001 fa74 	bl	8003ed2 <HAL_NVIC_EnableIRQ>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40000800 	.word	0x40000800

080029fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <NMI_Handler+0x4>

08002a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a06:	e7fe      	b.n	8002a06 <HardFault_Handler+0x4>

08002a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <MemManage_Handler+0x4>

08002a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a12:	e7fe      	b.n	8002a12 <BusFault_Handler+0x4>

08002a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <UsageFault_Handler+0x4>

08002a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a48:	f000 fd06 	bl	8003458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <TIM2_IRQHandler+0x10>)
 8002a56:	f003 fac2 	bl	8005fde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000094c 	.word	0x2000094c

08002a64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <TIM4_IRQHandler+0x10>)
 8002a6a:	f003 fab8 	bl	8005fde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200004f8 	.word	0x200004f8

08002a78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <DMA2_Stream0_IRQHandler+0x10>)
 8002a7e:	f001 fb49 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000878 	.word	0x20000878

08002a8c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <RNG_IRQHandler+0x10>)
 8002a92:	f002 feba 	bl	800580a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200008e4 	.word	0x200008e4

08002aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <_sbrk+0x5c>)
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <_sbrk+0x60>)
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <_sbrk+0x64>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <_sbrk+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d207      	bcs.n	8002ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad0:	f003 fe46 	bl	8006760 <__errno>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ade:	e009      	b.n	8002af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <_sbrk+0x64>)
 8002af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20050000 	.word	0x20050000
 8002b00:	00000400 	.word	0x00000400
 8002b04:	200004b4 	.word	0x200004b4
 8002b08:	20000a50 	.word	0x20000a50

08002b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <SystemInit+0x20>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <SystemInit+0x20>)
 8002b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <vector_init>:
#include <stdlib.h>

#include "vector.h"

/* Initializes the vector */
void vector_init(vector* v){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	v->capacity = VECTOR_INIT_CAPACITY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	605a      	str	r2, [r3, #4]
	v->total = 0;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
	v->items = malloc(sizeof(void*) * v->capacity);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fe32 	bl	80067b4 <malloc>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	601a      	str	r2, [r3, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <vector_resize>:
int vector_total(vector* v){
	return v->total;
}

/* Resizes the vector */
static void vector_resize(vector* v, int capacity){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	void **items = realloc(v->items, sizeof(void *)*capacity);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f003 fee5 	bl	8006944 <realloc>
 8002b7a:	60f8      	str	r0, [r7, #12]
	if (items){
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <vector_resize+0x2e>
		v->items = items;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]
		v->capacity = capacity;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
	}
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <vector_add>:

/* Increases the capacity of the vector */
void vector_add(vector* v, void* item){
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
	if (v->capacity == v->total){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d106      	bne.n	8002bba <vector_add+0x24>
		vector_resize(v, v->capacity*2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ffd3 	bl	8002b60 <vector_resize>
	}
	v->items[v->total++] = item;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	1c58      	adds	r0, r3, #1
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	6088      	str	r0, [r1, #8]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <vector_get>:
		v->items[index] = item;
	}
}

/* Gets an element at the given index */
void* vector_get(vector* v, int index){
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
	if (index >= 0 && index < v->total){
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0b      	blt.n	8002c00 <vector_get+0x28>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	da06      	bge.n	8002c00 <vector_get+0x28>
		return v->items[index];
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	e000      	b.n	8002c02 <vector_get+0x2a>
	}
	return NULL;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <vector_delete>:

/* Deletes element at the given index */
void vector_delete(vector* v, int index){
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
	if (index < 0 || index >= v->total){
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db48      	blt.n	8002cb0 <vector_delete+0xa2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	da43      	bge.n	8002cb0 <vector_delete+0xa2>
		return;
	}

	// Deleting the element
	v->items[index] = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

	// Shifting all elements after location "index" by one position to the left
	for (int i = index; i < v->total; i++){
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e017      	b.n	8002c6c <vector_delete+0x5e>
		v->items[i] = v->items[i+1];
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3301      	adds	r3, #1
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	441a      	add	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	601a      	str	r2, [r3, #0]
		v->items[i+1] = NULL;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
	for (int i = index; i < v->total; i++){
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbe2      	blt.n	8002c3c <vector_delete+0x2e>
	}

	// Decreasing the current number of total elements
	v->total--;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]

	// Halving the vector's size when total number of current elements is divisible by the capacity
	if (v->total > 0 && v->total == v->capacity / 4){
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	dd14      	ble.n	8002cb2 <vector_delete+0xa4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da00      	bge.n	8002c96 <vector_delete+0x88>
 8002c94:	3303      	adds	r3, #3
 8002c96:	109b      	asrs	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d10a      	bne.n	8002cb2 <vector_delete+0xa4>
		vector_resize(v, v->capacity/2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0fda      	lsrs	r2, r3, #31
 8002ca2:	4413      	add	r3, r2
 8002ca4:	105b      	asrs	r3, r3, #1
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff59 	bl	8002b60 <vector_resize>
 8002cae:	e000      	b.n	8002cb2 <vector_delete+0xa4>
		return;
 8002cb0:	bf00      	nop
	}
}
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_RNG_ReadyDataCallback>:
//	}
//}

// RNG interrupt callback
void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
  flagRNG = 1;
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_RNG_ReadyDataCallback+0x1c>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	200004b8 	.word	0x200004b8

08002cd8 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b094      	sub	sp, #80	; 0x50
 8002cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cde:	f107 031c 	add.w	r3, r7, #28
 8002ce2:	2234      	movs	r2, #52	; 0x34
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fd7a 	bl	80067e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <SystemClock_Config+0xcc>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <SystemClock_Config+0xcc>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <SystemClock_Config+0xcc>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <SystemClock_Config+0xd0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <SystemClock_Config+0xd0>)
 8002d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <SystemClock_Config+0xd0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002d4c:	2360      	movs	r3, #96	; 0x60
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d50:	2302      	movs	r3, #2
 8002d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d54:	2302      	movs	r3, #2
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 fa75 	bl	8005250 <HAL_RCC_OscConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002d6c:	f000 fa9e 	bl	80032ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d70:	230f      	movs	r3, #15
 8002d72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d74:	2302      	movs	r3, #2
 8002d76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 fe0b 	bl	80049a8 <HAL_RCC_ClockConfig>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002d98:	f000 fa88 	bl	80032ac <Error_Handler>
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3750      	adds	r7, #80	; 0x50
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40007000 	.word	0x40007000

08002dac <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_ChannelConfTypeDef sConfig = {0};
 8002db2:	463b      	mov	r3, r7
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
	  /* USER CODE BEGIN ADC1_Init 1 */

	  /* USER CODE END ADC1_Init 1 */
	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8002dbe:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002dc0:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002dc2:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dca:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <MX_ADC1_Init+0xc0>)
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 2;
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002df8:	2202      	movs	r2, #2
 8002dfa:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e0a:	4816      	ldr	r0, [pc, #88]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002e0c:	f000 fb68 	bl	80034e0 <HAL_ADC_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_ADC1_Init+0x6e>
	  {
		Error_Handler();
 8002e16:	f000 fa49 	bl	80032ac <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 8002e1a:	230b      	movs	r3, #11
 8002e1c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002e22:	2302      	movs	r3, #2
 8002e24:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e26:	463b      	mov	r3, r7
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480e      	ldr	r0, [pc, #56]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002e2c:	f000 fcaa 	bl	8003784 <HAL_ADC_ConfigChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_ADC1_Init+0x8e>
	  {
		Error_Handler();
 8002e36:	f000 fa39 	bl	80032ac <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 8002e3a:	230e      	movs	r3, #14
 8002e3c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002e42:	2301      	movs	r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e46:	463b      	mov	r3, r7
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4806      	ldr	r0, [pc, #24]	; (8002e64 <MX_ADC1_Init+0xb8>)
 8002e4c:	f000 fc9a 	bl	8003784 <HAL_ADC_ConfigChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_ADC1_Init+0xae>
	  {
		Error_Handler();
 8002e56:	f000 fa29 	bl	80032ac <Error_Handler>
	  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000055c 	.word	0x2000055c
 8002e68:	40012000 	.word	0x40012000
 8002e6c:	0f000001 	.word	0x0f000001

08002e70 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <MX_DMA_Init+0x3c>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <MX_DMA_Init+0x3c>)
 8002e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <MX_DMA_Init+0x3c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	2038      	movs	r0, #56	; 0x38
 8002e98:	f000 ffff 	bl	8003e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e9c:	2038      	movs	r0, #56	; 0x38
 8002e9e:	f001 f818 	bl	8003ed2 <HAL_NVIC_EnableIRQ>

}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800

08002eb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002eb6:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <MX_SPI1_Init+0x68>)
 8002eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eba:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // changed prescalar from 2 to 64 (optimum value after testing for ssd1306) for better user experience of OLED refresh rate
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002efc:	220a      	movs	r2, #10
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f00:	4804      	ldr	r0, [pc, #16]	; (8002f14 <MX_SPI1_Init+0x64>)
 8002f02:	f002 fcee 	bl	80058e2 <HAL_SPI_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f0c:	f000 f9ce 	bl	80032ac <Error_Handler>
  }
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200008f4 	.word	0x200008f4
 8002f18:	40013000 	.word	0x40013000

08002f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
 8002f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a7e      	ldr	r2, [pc, #504]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b7c      	ldr	r3, [pc, #496]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	4b78      	ldr	r3, [pc, #480]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a77      	ldr	r2, [pc, #476]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b75      	ldr	r3, [pc, #468]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b71      	ldr	r3, [pc, #452]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a70      	ldr	r2, [pc, #448]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b6e      	ldr	r3, [pc, #440]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a69      	ldr	r2, [pc, #420]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <MX_GPIO_Init+0x218>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a62      	ldr	r2, [pc, #392]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fac:	f043 0320 	orr.w	r3, r3, #32
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b60      	ldr	r3, [pc, #384]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b59      	ldr	r3, [pc, #356]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b55      	ldr	r3, [pc, #340]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a54      	ldr	r2, [pc, #336]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b52      	ldr	r3, [pc, #328]	; (8003134 <MX_GPIO_Init+0x218>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Green_Pin|LD3_Red_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f244 0181 	movw	r1, #16513	; 0x4081
 8002ffc:	484e      	ldr	r0, [pc, #312]	; (8003138 <MX_GPIO_Init+0x21c>)
 8002ffe:	f001 fc9f 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 8003002:	2200      	movs	r2, #0
 8003004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003008:	484c      	ldr	r0, [pc, #304]	; (800313c <MX_GPIO_Init+0x220>)
 800300a:	f001 fc99 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800300e:	2200      	movs	r2, #0
 8003010:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003014:	484a      	ldr	r0, [pc, #296]	; (8003140 <MX_GPIO_Init+0x224>)
 8003016:	f001 fc93 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800301a:	2200      	movs	r2, #0
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	4849      	ldr	r0, [pc, #292]	; (8003144 <MX_GPIO_Init+0x228>)
 8003020:	f001 fc8e 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800302a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800302e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	4619      	mov	r1, r3
 800303a:	4843      	ldr	r0, [pc, #268]	; (8003148 <MX_GPIO_Init+0x22c>)
 800303c:	f001 fad4 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Green_Pin LD3_Red_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Green_Pin|LD3_Red_Pin|LD2_Blue_Pin;
 8003040:	f244 0381 	movw	r3, #16513	; 0x4081
 8003044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	2301      	movs	r3, #1
 8003048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2300      	movs	r3, #0
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003052:	f107 031c 	add.w	r3, r7, #28
 8003056:	4619      	mov	r1, r3
 8003058:	4837      	ldr	r0, [pc, #220]	; (8003138 <MX_GPIO_Init+0x21c>)
 800305a:	f001 fac5 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RES_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 800305e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003064:	2301      	movs	r3, #1
 8003066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	4619      	mov	r1, r3
 8003076:	4831      	ldr	r0, [pc, #196]	; (800313c <MX_GPIO_Init+0x220>)
 8003078:	f001 fab6 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_B1_Pin GPIO_Input_B2_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_B1_Pin|GPIO_Input_B2_Pin;
 800307c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	4619      	mov	r1, r3
 8003090:	482a      	ldr	r0, [pc, #168]	; (800313c <MX_GPIO_Init+0x220>)
 8003092:	f001 faa9 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800309a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030a8:	2307      	movs	r3, #7
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ac:	f107 031c 	add.w	r3, r7, #28
 80030b0:	4619      	mov	r1, r3
 80030b2:	4823      	ldr	r0, [pc, #140]	; (8003140 <MX_GPIO_Init+0x224>)
 80030b4:	f001 fa98 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 80030b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80030bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030be:	2301      	movs	r3, #1
 80030c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ca:	f107 031c 	add.w	r3, r7, #28
 80030ce:	4619      	mov	r1, r3
 80030d0:	481b      	ldr	r0, [pc, #108]	; (8003140 <MX_GPIO_Init+0x224>)
 80030d2:	f001 fa89 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80030d6:	2340      	movs	r3, #64	; 0x40
 80030d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030da:	2301      	movs	r3, #1
 80030dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80030e6:	f107 031c 	add.w	r3, r7, #28
 80030ea:	4619      	mov	r1, r3
 80030ec:	4815      	ldr	r0, [pc, #84]	; (8003144 <MX_GPIO_Init+0x228>)
 80030ee:	f001 fa7b 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	480f      	ldr	r0, [pc, #60]	; (8003144 <MX_GPIO_Init+0x228>)
 8003106:	f001 fa6f 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800310a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800310e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800311c:	230a      	movs	r3, #10
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	4619      	mov	r1, r3
 8003126:	4809      	ldr	r0, [pc, #36]	; (800314c <MX_GPIO_Init+0x230>)
 8003128:	f001 fa5e 	bl	80045e8 <HAL_GPIO_Init>

}
 800312c:	bf00      	nop
 800312e:	3730      	adds	r7, #48	; 0x30
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	40020400 	.word	0x40020400
 800313c:	40021400 	.word	0x40021400
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021800 	.word	0x40021800
 8003148:	40020800 	.word	0x40020800
 800314c:	40020000 	.word	0x40020000

08003150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003156:	f107 0308 	add.w	r3, r7, #8
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003164:	463b      	mov	r3, r7
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <MX_TIM2_Init+0x94>)
 800316e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <MX_TIM2_Init+0x94>)
 8003176:	2263      	movs	r2, #99	; 0x63
 8003178:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <MX_TIM2_Init+0x94>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <MX_TIM2_Init+0x94>)
 8003182:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <MX_TIM2_Init+0x94>)
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <MX_TIM2_Init+0x94>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003194:	4813      	ldr	r0, [pc, #76]	; (80031e4 <MX_TIM2_Init+0x94>)
 8003196:	f002 fe33 	bl	8005e00 <HAL_TIM_Base_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80031a0:	f000 f884 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031aa:	f107 0308 	add.w	r3, r7, #8
 80031ae:	4619      	mov	r1, r3
 80031b0:	480c      	ldr	r0, [pc, #48]	; (80031e4 <MX_TIM2_Init+0x94>)
 80031b2:	f003 f81c 	bl	80061ee <HAL_TIM_ConfigClockSource>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80031bc:	f000 f876 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031c8:	463b      	mov	r3, r7
 80031ca:	4619      	mov	r1, r3
 80031cc:	4805      	ldr	r0, [pc, #20]	; (80031e4 <MX_TIM2_Init+0x94>)
 80031ce:	f003 fa37 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80031d8:	f000 f868 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	2000094c 	.word	0x2000094c

080031e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ee:	f107 0308 	add.w	r3, r7, #8
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031fc:	463b      	mov	r3, r7
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <MX_TIM4_Init+0x94>)
 8003206:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <MX_TIM4_Init+0x98>)
 8003208:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 299;
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <MX_TIM4_Init+0x94>)
 800320c:	f240 122b 	movw	r2, #299	; 0x12b
 8003210:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <MX_TIM4_Init+0x94>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2999;
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <MX_TIM4_Init+0x94>)
 800321a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800321e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003220:	4b16      	ldr	r3, [pc, #88]	; (800327c <MX_TIM4_Init+0x94>)
 8003222:	2200      	movs	r2, #0
 8003224:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <MX_TIM4_Init+0x94>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800322c:	4813      	ldr	r0, [pc, #76]	; (800327c <MX_TIM4_Init+0x94>)
 800322e:	f002 fde7 	bl	8005e00 <HAL_TIM_Base_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003238:	f000 f838 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800323c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003240:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003242:	f107 0308 	add.w	r3, r7, #8
 8003246:	4619      	mov	r1, r3
 8003248:	480c      	ldr	r0, [pc, #48]	; (800327c <MX_TIM4_Init+0x94>)
 800324a:	f002 ffd0 	bl	80061ee <HAL_TIM_ConfigClockSource>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003254:	f000 f82a 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003260:	463b      	mov	r3, r7
 8003262:	4619      	mov	r1, r3
 8003264:	4805      	ldr	r0, [pc, #20]	; (800327c <MX_TIM4_Init+0x94>)
 8003266:	f003 f9eb 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003270:	f000 f81c 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003274:	bf00      	nop
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	200004f8 	.word	0x200004f8
 8003280:	40000800 	.word	0x40000800

08003284 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <MX_RNG_Init+0x20>)
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <MX_RNG_Init+0x24>)
 800328c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800328e:	4805      	ldr	r0, [pc, #20]	; (80032a4 <MX_RNG_Init+0x20>)
 8003290:	f002 fa62 	bl	8005758 <HAL_RNG_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800329a:	f000 f807 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200008e4 	.word	0x200008e4
 80032a8:	50060800 	.word	0x50060800

080032ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b0:	b672      	cpsid	i
}
 80032b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <Error_Handler+0x8>
	...

080032b8 <generate_randomNumber>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void generate_randomNumber(uint32_t* randomNumberPtr){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	/*
	 * Generates by interrupt where a callback function
	 * is used whenever the process of random number
	 * generation is completed
	 */
	HAL_RNG_GenerateRandomNumber_IT(&hrng);
 80032c0:	480c      	ldr	r0, [pc, #48]	; (80032f4 <generate_randomNumber+0x3c>)
 80032c2:	f002 fa73 	bl	80057ac <HAL_RNG_GenerateRandomNumber_IT>
	if (flagRNG){
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <generate_randomNumber+0x40>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <generate_randomNumber+0x2a>
		*randomNumberPtr = HAL_RNG_ReadLastRandomNumber(&hrng);
 80032d0:	4808      	ldr	r0, [pc, #32]	; (80032f4 <generate_randomNumber+0x3c>)
 80032d2:	f002 faf0 	bl	80058b6 <HAL_RNG_ReadLastRandomNumber>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]
		flagRNG = 0;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <generate_randomNumber+0x40>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(500);
 80032e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032e6:	f000 f8d7 	bl	8003498 <HAL_Delay>

}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200008e4 	.word	0x200008e4
 80032f8:	200004b8 	.word	0x200004b8

080032fc <button_readPin>:

/* Returns state of the pin connected to button */
uint8_t button_readPin(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	4619      	mov	r1, r3
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f001 faff 	bl	8004910 <HAL_GPIO_ReadPin>
 8003312:	4603      	mov	r3, r0
 8003314:	73fb      	strb	r3, [r7, #15]
	if (pinState == GPIO_PIN_SET){
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <button_readPin+0x24>
		return 1;
 800331c:	2301      	movs	r3, #1
 800331e:	e005      	b.n	800332c <button_readPin+0x30>
	}
	else if (pinState == GPIO_PIN_RESET){
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <button_readPin+0x2e>
		return 0;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <button_readPin+0x30>
	}
	return 0;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <drivers_init>:


/* Initialize all drivers */
void drivers_init(){
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	HAL_Init();
 8003338:	f000 f83c 	bl	80033b4 <HAL_Init>
	SystemClock_Config();
 800333c:	f7ff fccc 	bl	8002cd8 <SystemClock_Config>

	MX_GPIO_Init();
 8003340:	f7ff fdec 	bl	8002f1c <MX_GPIO_Init>
	MX_DMA_Init();
 8003344:	f7ff fd94 	bl	8002e70 <MX_DMA_Init>
	MX_ADC1_Init();
 8003348:	f7ff fd30 	bl	8002dac <MX_ADC1_Init>
	MX_SPI1_Init();
 800334c:	f7ff fdb0 	bl	8002eb0 <MX_SPI1_Init>
	MX_TIM2_Init();	// Set to 160 Hz or 1.25 ms
 8003350:	f7ff fefe 	bl	8003150 <MX_TIM2_Init>
	MX_TIM4_Init();	// Set to 40 Hz or 25 ms
 8003354:	f7ff ff48 	bl	80031e8 <MX_TIM4_Init>
//	HAL_TIM_Base_Start_IT(&htim2);
//	HAL_TIM_Base_Start_IT(&htim4);
	MX_RNG_Init();
 8003358:	f7ff ff94 	bl	8003284 <MX_RNG_Init>
}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}

08003360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003364:	480d      	ldr	r0, [pc, #52]	; (800339c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003366:	490e      	ldr	r1, [pc, #56]	; (80033a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800336c:	e002      	b.n	8003374 <LoopCopyDataInit>

0800336e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003372:	3304      	adds	r3, #4

08003374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003378:	d3f9      	bcc.n	800336e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337a:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800337c:	4c0b      	ldr	r4, [pc, #44]	; (80033ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003380:	e001      	b.n	8003386 <LoopFillZerobss>

08003382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003384:	3204      	adds	r2, #4

08003386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003388:	d3fb      	bcc.n	8003382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800338a:	f7ff fbbf 	bl	8002b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800338e:	f003 f9ed 	bl	800676c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003392:	f7fe fe37 	bl	8002004 <main>
  bx  lr    
 8003396:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003398:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800339c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033a0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80033a4:	08007d88 	.word	0x08007d88
  ldr r2, =_sbss
 80033a8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80033ac:	20000a4c 	.word	0x20000a4c

080033b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033b0:	e7fe      	b.n	80033b0 <ADC_IRQHandler>
	...

080033b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_Init+0x40>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <HAL_Init+0x40>)
 80033be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_Init+0x40>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <HAL_Init+0x40>)
 80033ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_Init+0x40>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <HAL_Init+0x40>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033dc:	2003      	movs	r0, #3
 80033de:	f000 fd51 	bl	8003e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f000 f808 	bl	80033f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e8:	f7ff f9a2 	bl	8002730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023c00 	.word	0x40023c00

080033f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_InitTick+0x54>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_InitTick+0x58>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fd69 	bl	8003eee <HAL_SYSTICK_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e00e      	b.n	8003444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b0f      	cmp	r3, #15
 800342a:	d80a      	bhi.n	8003442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800342c:	2200      	movs	r2, #0
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003434:	f000 fd31 	bl	8003e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003438:	4a06      	ldr	r2, [pc, #24]	; (8003454 <HAL_InitTick+0x5c>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000014 	.word	0x20000014
 8003450:	2000001c 	.word	0x2000001c
 8003454:	20000018 	.word	0x20000018

08003458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_IncTick+0x20>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_IncTick+0x24>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4413      	add	r3, r2
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <HAL_IncTick+0x24>)
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000001c 	.word	0x2000001c
 800347c:	20000a38 	.word	0x20000a38

08003480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return uwTick;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_GetTick+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000a38 	.word	0x20000a38

08003498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a0:	f7ff ffee 	bl	8003480 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b0:	d005      	beq.n	80034be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_Delay+0x44>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034be:	bf00      	nop
 80034c0:	f7ff ffde 	bl	8003480 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d8f7      	bhi.n	80034c0 <HAL_Delay+0x28>
  {
  }
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2000001c 	.word	0x2000001c

080034e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e033      	b.n	800355e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff f93e 	bl	8002780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d118      	bne.n	8003550 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003526:	f023 0302 	bic.w	r3, r3, #2
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa58 	bl	80039e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
 800354e:	e001      	b.n	8003554 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Start_DMA+0x1e>
 8003582:	2302      	movs	r3, #2
 8003584:	e0ce      	b.n	8003724 <HAL_ADC_Start_DMA+0x1bc>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d018      	beq.n	80035ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035ac:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_ADC_Start_DMA+0x1c4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a5f      	ldr	r2, [pc, #380]	; (8003730 <HAL_ADC_Start_DMA+0x1c8>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9a      	lsrs	r2, r3, #18
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035c0:	e002      	b.n	80035c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f9      	bne.n	80035c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d107      	bne.n	80035ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 8086 	bne.w	800370a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003628:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d106      	bne.n	800364c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f023 0206 	bic.w	r2, r3, #6
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
 800364a:	e002      	b.n	8003652 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_ADC_Start_DMA+0x1cc>)
 800365c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	4a35      	ldr	r2, [pc, #212]	; (8003738 <HAL_ADC_Start_DMA+0x1d0>)
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	4a34      	ldr	r2, [pc, #208]	; (800373c <HAL_ADC_Start_DMA+0x1d4>)
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_ADC_Start_DMA+0x1d8>)
 8003674:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800367e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800368e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	334c      	adds	r3, #76	; 0x4c
 80036aa:	4619      	mov	r1, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f000 fcd8 	bl	8004064 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d129      	bne.n	8003722 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	e020      	b.n	8003722 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a17      	ldr	r2, [pc, #92]	; (8003744 <HAL_ADC_Start_DMA+0x1dc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d11b      	bne.n	8003722 <HAL_ADC_Start_DMA+0x1ba>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d114      	bne.n	8003722 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	e00b      	b.n	8003722 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f043 0210 	orr.w	r2, r3, #16
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000014 	.word	0x20000014
 8003730:	431bde83 	.word	0x431bde83
 8003734:	40012300 	.word	0x40012300
 8003738:	08003be1 	.word	0x08003be1
 800373c:	08003c9b 	.word	0x08003c9b
 8003740:	08003cb7 	.word	0x08003cb7
 8003744:	40012000 	.word	0x40012000

08003748 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x1c>
 800379c:	2302      	movs	r3, #2
 800379e:	e113      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x244>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b09      	cmp	r3, #9
 80037ae:	d925      	bls.n	80037fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68d9      	ldr	r1, [r3, #12]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	3b1e      	subs	r3, #30
 80037c6:	2207      	movs	r2, #7
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43da      	mvns	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	400a      	ands	r2, r1
 80037d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68d9      	ldr	r1, [r3, #12]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	4603      	mov	r3, r0
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4403      	add	r3, r0
 80037ee:	3b1e      	subs	r3, #30
 80037f0:	409a      	lsls	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	e022      	b.n	8003842 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6919      	ldr	r1, [r3, #16]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	2207      	movs	r2, #7
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43da      	mvns	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	400a      	ands	r2, r1
 800381e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6919      	ldr	r1, [r3, #16]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	4618      	mov	r0, r3
 8003832:	4603      	mov	r3, r0
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4403      	add	r3, r0
 8003838:	409a      	lsls	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d824      	bhi.n	8003894 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	3b05      	subs	r3, #5
 800385c:	221f      	movs	r2, #31
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	400a      	ands	r2, r1
 800386a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	4618      	mov	r0, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	3b05      	subs	r3, #5
 8003886:	fa00 f203 	lsl.w	r2, r0, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	635a      	str	r2, [r3, #52]	; 0x34
 8003892:	e04c      	b.n	800392e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d824      	bhi.n	80038e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	3b23      	subs	r3, #35	; 0x23
 80038ae:	221f      	movs	r2, #31
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43da      	mvns	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	400a      	ands	r2, r1
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	4618      	mov	r0, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	3b23      	subs	r3, #35	; 0x23
 80038d8:	fa00 f203 	lsl.w	r2, r0, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
 80038e4:	e023      	b.n	800392e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	3b41      	subs	r3, #65	; 0x41
 80038f8:	221f      	movs	r2, #31
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	400a      	ands	r2, r1
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	4618      	mov	r0, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	3b41      	subs	r3, #65	; 0x41
 8003922:	fa00 f203 	lsl.w	r2, r0, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_ADC_ConfigChannel+0x250>)
 8003930:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_ADC_ConfigChannel+0x254>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10f      	bne.n	800395c <HAL_ADC_ConfigChannel+0x1d8>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b12      	cmp	r3, #18
 8003942:	d10b      	bne.n	800395c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <HAL_ADC_ConfigChannel+0x254>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d12b      	bne.n	80039be <HAL_ADC_ConfigChannel+0x23a>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_ADC_ConfigChannel+0x258>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <HAL_ADC_ConfigChannel+0x1f4>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b11      	cmp	r3, #17
 8003976:	d122      	bne.n	80039be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a11      	ldr	r2, [pc, #68]	; (80039dc <HAL_ADC_ConfigChannel+0x258>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d111      	bne.n	80039be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_ADC_ConfigChannel+0x25c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <HAL_ADC_ConfigChannel+0x260>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	0c9a      	lsrs	r2, r3, #18
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039b0:	e002      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f9      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40012300 	.word	0x40012300
 80039d8:	40012000 	.word	0x40012000
 80039dc:	10000012 	.word	0x10000012
 80039e0:	20000014 	.word	0x20000014
 80039e4:	431bde83 	.word	0x431bde83

080039e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039f0:	4b79      	ldr	r3, [pc, #484]	; (8003bd8 <ADC_Init+0x1f0>)
 80039f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	021a      	lsls	r2, r3, #8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6899      	ldr	r1, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <ADC_Init+0x1f4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d022      	beq.n	8003ac6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6899      	ldr	r1, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6899      	ldr	r1, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	e00f      	b.n	8003ae6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ae4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0202 	bic.w	r2, r2, #2
 8003af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6899      	ldr	r1, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7e1b      	ldrb	r3, [r3, #24]
 8003b00:	005a      	lsls	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01b      	beq.n	8003b4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	035a      	lsls	r2, r3, #13
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	e007      	b.n	8003b5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	051a      	lsls	r2, r3, #20
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6899      	ldr	r1, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b9e:	025a      	lsls	r2, r3, #9
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	029a      	lsls	r2, r3, #10
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40012300 	.word	0x40012300
 8003bdc:	0f000001 	.word	0x0f000001

08003be0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d13c      	bne.n	8003c74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d12b      	bne.n	8003c6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d127      	bne.n	8003c6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d006      	beq.n	8003c38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d119      	bne.n	8003c6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0220 	bic.w	r2, r2, #32
 8003c46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff fd6b 	bl	8003748 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c72:	e00e      	b.n	8003c92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7ff fd75 	bl	8003770 <HAL_ADC_ErrorCallback>
}
 8003c86:	e004      	b.n	8003c92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fd57 	bl	800375c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2240      	movs	r2, #64	; 0x40
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fd4a 	bl	8003770 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d00:	4013      	ands	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d16:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	60d3      	str	r3, [r2, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <__NVIC_GetPriorityGrouping+0x18>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 0307 	and.w	r3, r3, #7
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	db0b      	blt.n	8003d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	4907      	ldr	r1, [pc, #28]	; (8003d80 <__NVIC_EnableIRQ+0x38>)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	2001      	movs	r0, #1
 8003d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e100 	.word	0xe000e100

08003d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db0a      	blt.n	8003dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <__NVIC_SetPriority+0x4c>)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	440b      	add	r3, r1
 8003da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dac:	e00a      	b.n	8003dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <__NVIC_SetPriority+0x50>)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	761a      	strb	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	bf28      	it	cs
 8003df6:	2304      	movcs	r3, #4
 8003df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d902      	bls.n	8003e08 <NVIC_EncodePriority+0x30>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3b03      	subs	r3, #3
 8003e06:	e000      	b.n	8003e0a <NVIC_EncodePriority+0x32>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	4313      	orrs	r3, r2
         );
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e50:	d301      	bcc.n	8003e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e52:	2301      	movs	r3, #1
 8003e54:	e00f      	b.n	8003e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <SysTick_Config+0x40>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e5e:	210f      	movs	r1, #15
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e64:	f7ff ff8e 	bl	8003d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <SysTick_Config+0x40>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e6e:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <SysTick_Config+0x40>)
 8003e70:	2207      	movs	r2, #7
 8003e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	e000e010 	.word	0xe000e010

08003e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff29 	bl	8003ce4 <__NVIC_SetPriorityGrouping>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eac:	f7ff ff3e 	bl	8003d2c <__NVIC_GetPriorityGrouping>
 8003eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	6978      	ldr	r0, [r7, #20]
 8003eb8:	f7ff ff8e 	bl	8003dd8 <NVIC_EncodePriority>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff5d 	bl	8003d84 <__NVIC_SetPriority>
}
 8003eca:	bf00      	nop
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	4603      	mov	r3, r0
 8003eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ff31 	bl	8003d48 <__NVIC_EnableIRQ>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ffa2 	bl	8003e40 <SysTick_Config>
 8003efc:	4603      	mov	r3, r0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f14:	f7ff fab4 	bl	8003480 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e099      	b.n	8004058 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f44:	e00f      	b.n	8003f66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f46:	f7ff fa9b 	bl	8003480 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d908      	bls.n	8003f66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e078      	b.n	8004058 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e8      	bne.n	8003f46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4b38      	ldr	r3, [pc, #224]	; (8004060 <HAL_DMA_Init+0x158>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d107      	bne.n	8003fd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0307 	bic.w	r3, r3, #7
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d117      	bne.n	800402a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00e      	beq.n	800402a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fa6f 	bl	80044f0 <DMA_CheckFifoParam>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2240      	movs	r2, #64	; 0x40
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004026:	2301      	movs	r3, #1
 8004028:	e016      	b.n	8004058 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa26 	bl	8004484 <DMA_CalcBaseAndBitshift>
 8004038:	4603      	mov	r3, r0
 800403a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	223f      	movs	r2, #63	; 0x3f
 8004042:	409a      	lsls	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	e010803f 	.word	0xe010803f

08004064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_DMA_Start_IT+0x26>
 8004086:	2302      	movs	r3, #2
 8004088:	e040      	b.n	800410c <HAL_DMA_Start_IT+0xa8>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d12f      	bne.n	80040fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f9b8 	bl	8004428 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	223f      	movs	r2, #63	; 0x3f
 80040be:	409a      	lsls	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0216 	orr.w	r2, r2, #22
 80040d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0208 	orr.w	r2, r2, #8
 80040ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e005      	b.n	800410a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004120:	4b92      	ldr	r3, [pc, #584]	; (800436c <HAL_DMA_IRQHandler+0x258>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a92      	ldr	r2, [pc, #584]	; (8004370 <HAL_DMA_IRQHandler+0x25c>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	2208      	movs	r2, #8
 8004140:	409a      	lsls	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01a      	beq.n	8004180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0204 	bic.w	r2, r2, #4
 8004166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	2208      	movs	r2, #8
 800416e:	409a      	lsls	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d012      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a2:	2201      	movs	r2, #1
 80041a4:	409a      	lsls	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	f043 0202 	orr.w	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	2204      	movs	r2, #4
 80041bc:	409a      	lsls	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d012      	beq.n	80041ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	2204      	movs	r2, #4
 80041da:	409a      	lsls	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	f043 0204 	orr.w	r2, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f0:	2210      	movs	r2, #16
 80041f2:	409a      	lsls	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d043      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d03c      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	2210      	movs	r2, #16
 8004210:	409a      	lsls	r2, r3
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d018      	beq.n	8004256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d108      	bne.n	8004244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d024      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
 8004242:	e01f      	b.n	8004284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
 8004254:	e016      	b.n	8004284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0208 	bic.w	r2, r2, #8
 8004272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	2220      	movs	r2, #32
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 808e 	beq.w	80043b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8086 	beq.w	80043b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	2220      	movs	r2, #32
 80042ac:	409a      	lsls	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d136      	bne.n	800432c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0216 	bic.w	r2, r2, #22
 80042cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_DMA_IRQHandler+0x1da>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	223f      	movs	r2, #63	; 0x3f
 8004304:	409a      	lsls	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431e:	2b00      	cmp	r3, #0
 8004320:	d07d      	beq.n	800441e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
        }
        return;
 800432a:	e078      	b.n	800441e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01c      	beq.n	8004374 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	2b00      	cmp	r3, #0
 800434e:	d030      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
 8004358:	e02b      	b.n	80043b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d027      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
 800436a:	e022      	b.n	80043b2 <HAL_DMA_IRQHandler+0x29e>
 800436c:	20000014 	.word	0x20000014
 8004370:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10f      	bne.n	80043a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0210 	bic.w	r2, r2, #16
 8004390:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d032      	beq.n	8004420 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d022      	beq.n	800440c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2205      	movs	r2, #5
 80043ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	3301      	adds	r3, #1
 80043e2:	60bb      	str	r3, [r7, #8]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d307      	bcc.n	80043fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f2      	bne.n	80043de <HAL_DMA_IRQHandler+0x2ca>
 80043f8:	e000      	b.n	80043fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80043fa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e000      	b.n	8004420 <HAL_DMA_IRQHandler+0x30c>
        return;
 800441e:	bf00      	nop
    }
  }
}
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop

08004428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004444:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b40      	cmp	r3, #64	; 0x40
 8004454:	d108      	bne.n	8004468 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004466:	e007      	b.n	8004478 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	60da      	str	r2, [r3, #12]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	3b10      	subs	r3, #16
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <DMA_CalcBaseAndBitshift+0x68>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d909      	bls.n	80044c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	659a      	str	r2, [r3, #88]	; 0x58
 80044c4:	e007      	b.n	80044d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	aaaaaaab 	.word	0xaaaaaaab
 80044ec:	08007d3c 	.word	0x08007d3c

080044f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d11f      	bne.n	800454a <DMA_CheckFifoParam+0x5a>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b03      	cmp	r3, #3
 800450e:	d856      	bhi.n	80045be <DMA_CheckFifoParam+0xce>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <DMA_CheckFifoParam+0x28>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	08004529 	.word	0x08004529
 800451c:	0800453b 	.word	0x0800453b
 8004520:	08004529 	.word	0x08004529
 8004524:	080045bf 	.word	0x080045bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d046      	beq.n	80045c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004538:	e043      	b.n	80045c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004542:	d140      	bne.n	80045c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004548:	e03d      	b.n	80045c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004552:	d121      	bne.n	8004598 <DMA_CheckFifoParam+0xa8>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d837      	bhi.n	80045ca <DMA_CheckFifoParam+0xda>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <DMA_CheckFifoParam+0x70>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004571 	.word	0x08004571
 8004564:	08004577 	.word	0x08004577
 8004568:	08004571 	.word	0x08004571
 800456c:	08004589 	.word	0x08004589
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
      break;
 8004574:	e030      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d025      	beq.n	80045ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004586:	e022      	b.n	80045ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004590:	d11f      	bne.n	80045d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004596:	e01c      	b.n	80045d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d903      	bls.n	80045a6 <DMA_CheckFifoParam+0xb6>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d003      	beq.n	80045ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045a4:	e018      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
      break;
 80045aa:	e015      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      break;
 80045bc:	e00b      	b.n	80045d6 <DMA_CheckFifoParam+0xe6>
      break;
 80045be:	bf00      	nop
 80045c0:	e00a      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e008      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045c6:	bf00      	nop
 80045c8:	e006      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ca:	bf00      	nop
 80045cc:	e004      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ce:	bf00      	nop
 80045d0:	e002      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045d6:	bf00      	nop
    }
  } 
  
  return status; 
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop

080045e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	e165      	b.n	80048d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004604:	2201      	movs	r2, #1
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4013      	ands	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	f040 8154 	bne.w	80048ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d005      	beq.n	800463a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004636:	2b02      	cmp	r3, #2
 8004638:	d130      	bne.n	800469c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	2203      	movs	r2, #3
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004670:	2201      	movs	r2, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 0201 	and.w	r2, r3, #1
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d017      	beq.n	80046d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d123      	bne.n	800472c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	08da      	lsrs	r2, r3, #3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3208      	adds	r2, #8
 80046ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	220f      	movs	r2, #15
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	08da      	lsrs	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3208      	adds	r2, #8
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2203      	movs	r2, #3
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0203 	and.w	r2, r3, #3
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80ae 	beq.w	80048ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4b5d      	ldr	r3, [pc, #372]	; (80048e8 <HAL_GPIO_Init+0x300>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	4a5c      	ldr	r2, [pc, #368]	; (80048e8 <HAL_GPIO_Init+0x300>)
 8004778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800477c:	6453      	str	r3, [r2, #68]	; 0x44
 800477e:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <HAL_GPIO_Init+0x300>)
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800478a:	4a58      	ldr	r2, [pc, #352]	; (80048ec <HAL_GPIO_Init+0x304>)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	089b      	lsrs	r3, r3, #2
 8004790:	3302      	adds	r3, #2
 8004792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	220f      	movs	r2, #15
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a4f      	ldr	r2, [pc, #316]	; (80048f0 <HAL_GPIO_Init+0x308>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d025      	beq.n	8004802 <HAL_GPIO_Init+0x21a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a4e      	ldr	r2, [pc, #312]	; (80048f4 <HAL_GPIO_Init+0x30c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01f      	beq.n	80047fe <HAL_GPIO_Init+0x216>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4d      	ldr	r2, [pc, #308]	; (80048f8 <HAL_GPIO_Init+0x310>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_GPIO_Init+0x212>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a4c      	ldr	r2, [pc, #304]	; (80048fc <HAL_GPIO_Init+0x314>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_GPIO_Init+0x20e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <HAL_GPIO_Init+0x318>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00d      	beq.n	80047f2 <HAL_GPIO_Init+0x20a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a4a      	ldr	r2, [pc, #296]	; (8004904 <HAL_GPIO_Init+0x31c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <HAL_GPIO_Init+0x206>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a49      	ldr	r2, [pc, #292]	; (8004908 <HAL_GPIO_Init+0x320>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_GPIO_Init+0x202>
 80047e6:	2306      	movs	r3, #6
 80047e8:	e00c      	b.n	8004804 <HAL_GPIO_Init+0x21c>
 80047ea:	2307      	movs	r3, #7
 80047ec:	e00a      	b.n	8004804 <HAL_GPIO_Init+0x21c>
 80047ee:	2305      	movs	r3, #5
 80047f0:	e008      	b.n	8004804 <HAL_GPIO_Init+0x21c>
 80047f2:	2304      	movs	r3, #4
 80047f4:	e006      	b.n	8004804 <HAL_GPIO_Init+0x21c>
 80047f6:	2303      	movs	r3, #3
 80047f8:	e004      	b.n	8004804 <HAL_GPIO_Init+0x21c>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e002      	b.n	8004804 <HAL_GPIO_Init+0x21c>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_GPIO_Init+0x21c>
 8004802:	2300      	movs	r3, #0
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	f002 0203 	and.w	r2, r2, #3
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	4093      	lsls	r3, r2
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004814:	4935      	ldr	r1, [pc, #212]	; (80048ec <HAL_GPIO_Init+0x304>)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	3302      	adds	r3, #2
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004822:	4b3a      	ldr	r3, [pc, #232]	; (800490c <HAL_GPIO_Init+0x324>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004846:	4a31      	ldr	r2, [pc, #196]	; (800490c <HAL_GPIO_Init+0x324>)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800484c:	4b2f      	ldr	r3, [pc, #188]	; (800490c <HAL_GPIO_Init+0x324>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <HAL_GPIO_Init+0x324>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004876:	4b25      	ldr	r3, [pc, #148]	; (800490c <HAL_GPIO_Init+0x324>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800489a:	4a1c      	ldr	r2, [pc, #112]	; (800490c <HAL_GPIO_Init+0x324>)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048a0:	4b1a      	ldr	r3, [pc, #104]	; (800490c <HAL_GPIO_Init+0x324>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048c4:	4a11      	ldr	r2, [pc, #68]	; (800490c <HAL_GPIO_Init+0x324>)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	f67f ae96 	bls.w	8004604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	3724      	adds	r7, #36	; 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40013800 	.word	0x40013800
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40020400 	.word	0x40020400
 80048f8:	40020800 	.word	0x40020800
 80048fc:	40020c00 	.word	0x40020c00
 8004900:	40021000 	.word	0x40021000
 8004904:	40021400 	.word	0x40021400
 8004908:	40021800 	.word	0x40021800
 800490c:	40013c00 	.word	0x40013c00

08004910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	887b      	ldrh	r3, [r7, #2]
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e001      	b.n	8004932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
 800494c:	4613      	mov	r3, r2
 800494e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004950:	787b      	ldrb	r3, [r7, #1]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004956:	887a      	ldrh	r2, [r7, #2]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800495c:	e003      	b.n	8004966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800495e:	887b      	ldrh	r3, [r7, #2]
 8004960:	041a      	lsls	r2, r3, #16
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	619a      	str	r2, [r3, #24]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004984:	887a      	ldrh	r2, [r7, #2]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4013      	ands	r3, r2
 800498a:	041a      	lsls	r2, r3, #16
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	43d9      	mvns	r1, r3
 8004990:	887b      	ldrh	r3, [r7, #2]
 8004992:	400b      	ands	r3, r1
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	619a      	str	r2, [r3, #24]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0cc      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049bc:	4b68      	ldr	r3, [pc, #416]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d90c      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b65      	ldr	r3, [pc, #404]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b63      	ldr	r3, [pc, #396]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0b8      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049fc:	4b59      	ldr	r3, [pc, #356]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a14:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4a52      	ldr	r2, [pc, #328]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	494d      	ldr	r1, [pc, #308]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d044      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d119      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a76:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e067      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a86:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4934      	ldr	r1, [pc, #208]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a98:	f7fe fcf2 	bl	8003480 <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa0:	f7fe fcee 	bl	8003480 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e04f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 020c 	and.w	r2, r3, #12
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d1eb      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d20c      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e032      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4916      	ldr	r1, [pc, #88]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	490e      	ldr	r1, [pc, #56]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b2e:	f000 f821 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8004b32:	4602      	mov	r2, r0
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	490a      	ldr	r1, [pc, #40]	; (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	5ccb      	ldrb	r3, [r1, r3]
 8004b42:	fa22 f303 	lsr.w	r3, r2, r3
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fc52 	bl	80033f8 <HAL_InitTick>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023c00 	.word	0x40023c00
 8004b64:	40023800 	.word	0x40023800
 8004b68:	08007d2c 	.word	0x08007d2c
 8004b6c:	20000014 	.word	0x20000014
 8004b70:	20000018 	.word	0x20000018

08004b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	2300      	movs	r3, #0
 8004b86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b8c:	4b67      	ldr	r3, [pc, #412]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 030c 	and.w	r3, r3, #12
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d00d      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	f200 80bd 	bhi.w	8004d18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d003      	beq.n	8004bae <HAL_RCC_GetSysClockFreq+0x3a>
 8004ba6:	e0b7      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba8:	4b61      	ldr	r3, [pc, #388]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004baa:	60bb      	str	r3, [r7, #8]
       break;
 8004bac:	e0b7      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bae:	4b61      	ldr	r3, [pc, #388]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004bb0:	60bb      	str	r3, [r7, #8]
      break;
 8004bb2:	e0b4      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb4:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bbe:	4b5b      	ldr	r3, [pc, #364]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04d      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bca:	4b58      	ldr	r3, [pc, #352]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bda:	f04f 0100 	mov.w	r1, #0
 8004bde:	ea02 0800 	and.w	r8, r2, r0
 8004be2:	ea03 0901 	and.w	r9, r3, r1
 8004be6:	4640      	mov	r0, r8
 8004be8:	4649      	mov	r1, r9
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	014b      	lsls	r3, r1, #5
 8004bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bf8:	0142      	lsls	r2, r0, #5
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	ebb0 0008 	subs.w	r0, r0, r8
 8004c02:	eb61 0109 	sbc.w	r1, r1, r9
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	018b      	lsls	r3, r1, #6
 8004c10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c14:	0182      	lsls	r2, r0, #6
 8004c16:	1a12      	subs	r2, r2, r0
 8004c18:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1c:	f04f 0000 	mov.w	r0, #0
 8004c20:	f04f 0100 	mov.w	r1, #0
 8004c24:	00d9      	lsls	r1, r3, #3
 8004c26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c2a:	00d0      	lsls	r0, r2, #3
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	eb12 0208 	adds.w	r2, r2, r8
 8004c34:	eb43 0309 	adc.w	r3, r3, r9
 8004c38:	f04f 0000 	mov.w	r0, #0
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	0259      	lsls	r1, r3, #9
 8004c42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c46:	0250      	lsls	r0, r2, #9
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4619      	mov	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f7fb fd9e 	bl	8000798 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4613      	mov	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e04a      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c66:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	ea02 0400 	and.w	r4, r2, r0
 8004c7e:	ea03 0501 	and.w	r5, r3, r1
 8004c82:	4620      	mov	r0, r4
 8004c84:	4629      	mov	r1, r5
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	014b      	lsls	r3, r1, #5
 8004c90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c94:	0142      	lsls	r2, r0, #5
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	1b00      	subs	r0, r0, r4
 8004c9c:	eb61 0105 	sbc.w	r1, r1, r5
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	018b      	lsls	r3, r1, #6
 8004caa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cae:	0182      	lsls	r2, r0, #6
 8004cb0:	1a12      	subs	r2, r2, r0
 8004cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb6:	f04f 0000 	mov.w	r0, #0
 8004cba:	f04f 0100 	mov.w	r1, #0
 8004cbe:	00d9      	lsls	r1, r3, #3
 8004cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cc4:	00d0      	lsls	r0, r2, #3
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	1912      	adds	r2, r2, r4
 8004ccc:	eb45 0303 	adc.w	r3, r5, r3
 8004cd0:	f04f 0000 	mov.w	r0, #0
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	0299      	lsls	r1, r3, #10
 8004cda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cde:	0290      	lsls	r0, r2, #10
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	f7fb fd52 	bl	8000798 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	3301      	adds	r3, #1
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	60bb      	str	r3, [r7, #8]
      break;
 8004d16:	e002      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d1a:	60bb      	str	r3, [r7, #8]
      break;
 8004d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d010      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004d5c:	4b7a      	ldr	r3, [pc, #488]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d62:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4977      	ldr	r1, [pc, #476]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d010      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004d8a:	4b6f      	ldr	r3, [pc, #444]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d90:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	496b      	ldr	r1, [pc, #428]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004da8:	2301      	movs	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d022      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004db8:	4b63      	ldr	r3, [pc, #396]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc6:	4960      	ldr	r1, [pc, #384]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004de4:	4b58      	ldr	r3, [pc, #352]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	4954      	ldr	r1, [pc, #336]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d022      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004e0a:	4b4f      	ldr	r3, [pc, #316]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	494b      	ldr	r1, [pc, #300]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004e36:	4b44      	ldr	r3, [pc, #272]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	493f      	ldr	r1, [pc, #252]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 808a 	beq.w	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a38      	ldr	r2, [pc, #224]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e7a:	4b34      	ldr	r3, [pc, #208]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a33      	ldr	r2, [pc, #204]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e86:	f7fe fafb 	bl	8003480 <HAL_GetTick>
 8004e8a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e8e:	f7fe faf7 	bl	8003480 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1d1      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eac:	4b26      	ldr	r3, [pc, #152]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02f      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d028      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eda:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ee6:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d114      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7fe fac5 	bl	8003480 <HAL_GetTick>
 8004ef6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f7fe fac1 	bl	8003480 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e199      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f10:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ee      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f28:	d114      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3e:	4902      	ldr	r1, [pc, #8]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	608b      	str	r3, [r1, #8]
 8004f44:	e00c      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40007000 	.word	0x40007000
 8004f50:	42470e40 	.word	0x42470e40
 8004f54:	4b89      	ldr	r3, [pc, #548]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a88      	ldr	r2, [pc, #544]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f5e:	6093      	str	r3, [r2, #8]
 8004f60:	4b86      	ldr	r3, [pc, #536]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6c:	4983      	ldr	r1, [pc, #524]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d004      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004f84:	4b7e      	ldr	r3, [pc, #504]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004f86:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004f94:	4b79      	ldr	r3, [pc, #484]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	4976      	ldr	r1, [pc, #472]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fb6:	4b71      	ldr	r3, [pc, #452]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fbc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	496d      	ldr	r1, [pc, #436]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd4:	d101      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004fe6:	4b65      	ldr	r3, [pc, #404]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	4961      	ldr	r1, [pc, #388]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d004      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	f040 80c6 	bne.w	8005198 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800500c:	4b5d      	ldr	r3, [pc, #372]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005012:	f7fe fa35 	bl	8003480 <HAL_GetTick>
 8005016:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005018:	e008      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800501a:	f7fe fa31 	bl	8003480 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e10b      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800502c:	4b53      	ldr	r3, [pc, #332]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005038:	4a53      	ldr	r2, [pc, #332]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d023      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d019      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800507c:	d00e      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005086:	2b00      	cmp	r3, #0
 8005088:	d019      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d115      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800509a:	d110      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	071b      	lsls	r3, r3, #28
 80050b6:	4931      	ldr	r1, [pc, #196]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d026      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d122      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050e6:	4b25      	ldr	r3, [pc, #148]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ec:	0e1b      	lsrs	r3, r3, #24
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	019b      	lsls	r3, r3, #6
 80050fe:	431a      	orrs	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	071b      	lsls	r3, r3, #28
 800510c:	491b      	ldr	r1, [pc, #108]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005114:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511a:	f023 021f 	bic.w	r2, r3, #31
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	3b01      	subs	r3, #1
 8005124:	4915      	ldr	r1, [pc, #84]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	019b      	lsls	r3, r3, #6
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	061b      	lsls	r3, r3, #24
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	071b      	lsls	r3, r3, #28
 8005152:	490a      	ldr	r1, [pc, #40]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005160:	f7fe f98e 	bl	8003480 <HAL_GetTick>
 8005164:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005166:	e011      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005168:	f7fe f98a 	bl	8003480 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d90a      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e064      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800
 8005180:	424711e0 	.word	0x424711e0
 8005184:	42470068 	.word	0x42470068
 8005188:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800518c:	4b2f      	ldr	r3, [pc, #188]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0e7      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051a4:	4b29      	ldr	r3, [pc, #164]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	4926      	ldr	r1, [pc, #152]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051c6:	4b21      	ldr	r3, [pc, #132]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051cc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	491d      	ldr	r1, [pc, #116]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80051e8:	4b18      	ldr	r3, [pc, #96]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	4915      	ldr	r1, [pc, #84]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800520c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005210:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	490c      	ldr	r1, [pc, #48]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800522c:	4b07      	ldr	r3, [pc, #28]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800522e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005232:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	4904      	ldr	r1, [pc, #16]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40023800 	.word	0x40023800

08005250 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e270      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d075      	beq.n	800535a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800526e:	4ba3      	ldr	r3, [pc, #652]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b04      	cmp	r3, #4
 8005278:	d00c      	beq.n	8005294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800527a:	4ba0      	ldr	r3, [pc, #640]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005282:	2b08      	cmp	r3, #8
 8005284:	d112      	bne.n	80052ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005286:	4b9d      	ldr	r3, [pc, #628]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005292:	d10b      	bne.n	80052ac <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	4b99      	ldr	r3, [pc, #612]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05b      	beq.n	8005358 <HAL_RCC_OscConfig+0x108>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d157      	bne.n	8005358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e24b      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b4:	d106      	bne.n	80052c4 <HAL_RCC_OscConfig+0x74>
 80052b6:	4b91      	ldr	r3, [pc, #580]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a90      	ldr	r2, [pc, #576]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e01d      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x98>
 80052ce:	4b8b      	ldr	r3, [pc, #556]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a8a      	ldr	r2, [pc, #552]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b88      	ldr	r3, [pc, #544]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a87      	ldr	r2, [pc, #540]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052e8:	4b84      	ldr	r3, [pc, #528]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a83      	ldr	r2, [pc, #524]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	4b81      	ldr	r3, [pc, #516]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a80      	ldr	r2, [pc, #512]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80052fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fe f8ba 	bl	8003480 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005310:	f7fe f8b6 	bl	8003480 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	; 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e210      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005322:	4b76      	ldr	r3, [pc, #472]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0xc0>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fe f8a6 	bl	8003480 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005338:	f7fe f8a2 	bl	8003480 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e1fc      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534a:	4b6c      	ldr	r3, [pc, #432]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0xe8>
 8005356:	e000      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d063      	beq.n	800542e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005366:	4b65      	ldr	r3, [pc, #404]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005372:	4b62      	ldr	r3, [pc, #392]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800537a:	2b08      	cmp	r3, #8
 800537c:	d11c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800537e:	4b5f      	ldr	r3, [pc, #380]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d116      	bne.n	80053b8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538a:	4b5c      	ldr	r3, [pc, #368]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <HAL_RCC_OscConfig+0x152>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d001      	beq.n	80053a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e1d0      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a2:	4b56      	ldr	r3, [pc, #344]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4952      	ldr	r1, [pc, #328]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b6:	e03a      	b.n	800542e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c0:	4b4f      	ldr	r3, [pc, #316]	; (8005500 <HAL_RCC_OscConfig+0x2b0>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fe f85b 	bl	8003480 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ce:	f7fe f857 	bl	8003480 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e1b1      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e0:	4b46      	ldr	r3, [pc, #280]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0f0      	beq.n	80053ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ec:	4b43      	ldr	r3, [pc, #268]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	4940      	ldr	r1, [pc, #256]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
 8005400:	e015      	b.n	800542e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005402:	4b3f      	ldr	r3, [pc, #252]	; (8005500 <HAL_RCC_OscConfig+0x2b0>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fe f83a 	bl	8003480 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005410:	f7fe f836 	bl	8003480 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e190      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005422:	4b36      	ldr	r3, [pc, #216]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d030      	beq.n	800549c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d016      	beq.n	8005470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005442:	4b30      	ldr	r3, [pc, #192]	; (8005504 <HAL_RCC_OscConfig+0x2b4>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fe f81a 	bl	8003480 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005450:	f7fe f816 	bl	8003480 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e170      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005462:	4b26      	ldr	r3, [pc, #152]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0x200>
 800546e:	e015      	b.n	800549c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005470:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCC_OscConfig+0x2b4>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fe f803 	bl	8003480 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800547e:	f7fd ffff 	bl	8003480 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e159      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005490:	4b1a      	ldr	r3, [pc, #104]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 8005492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f0      	bne.n	800547e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80a0 	beq.w	80055ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ae:	4b13      	ldr	r3, [pc, #76]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	4a0e      	ldr	r2, [pc, #56]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_OscConfig+0x2b8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d121      	bne.n	800552a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_RCC_OscConfig+0x2b8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a07      	ldr	r2, [pc, #28]	; (8005508 <HAL_RCC_OscConfig+0x2b8>)
 80054ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f2:	f7fd ffc5 	bl	8003480 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f8:	e011      	b.n	800551e <HAL_RCC_OscConfig+0x2ce>
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800
 8005500:	42470000 	.word	0x42470000
 8005504:	42470e80 	.word	0x42470e80
 8005508:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550c:	f7fd ffb8 	bl	8003480 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e112      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551e:	4b8b      	ldr	r3, [pc, #556]	; (800574c <HAL_RCC_OscConfig+0x4fc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d106      	bne.n	8005540 <HAL_RCC_OscConfig+0x2f0>
 8005532:	4b87      	ldr	r3, [pc, #540]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	4a86      	ldr	r2, [pc, #536]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	6713      	str	r3, [r2, #112]	; 0x70
 800553e:	e01c      	b.n	800557a <HAL_RCC_OscConfig+0x32a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b05      	cmp	r3, #5
 8005546:	d10c      	bne.n	8005562 <HAL_RCC_OscConfig+0x312>
 8005548:	4b81      	ldr	r3, [pc, #516]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	4a80      	ldr	r2, [pc, #512]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 800554e:	f043 0304 	orr.w	r3, r3, #4
 8005552:	6713      	str	r3, [r2, #112]	; 0x70
 8005554:	4b7e      	ldr	r3, [pc, #504]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	4a7d      	ldr	r2, [pc, #500]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	6713      	str	r3, [r2, #112]	; 0x70
 8005560:	e00b      	b.n	800557a <HAL_RCC_OscConfig+0x32a>
 8005562:	4b7b      	ldr	r3, [pc, #492]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a7a      	ldr	r2, [pc, #488]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	6713      	str	r3, [r2, #112]	; 0x70
 800556e:	4b78      	ldr	r3, [pc, #480]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	4a77      	ldr	r2, [pc, #476]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d015      	beq.n	80055ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005582:	f7fd ff7d 	bl	8003480 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fd ff79 	bl	8003480 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f241 3288 	movw	r2, #5000	; 0x1388
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e0d1      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a0:	4b6b      	ldr	r3, [pc, #428]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ee      	beq.n	800558a <HAL_RCC_OscConfig+0x33a>
 80055ac:	e014      	b.n	80055d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ae:	f7fd ff67 	bl	8003480 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b4:	e00a      	b.n	80055cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b6:	f7fd ff63 	bl	8003480 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e0bb      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055cc:	4b60      	ldr	r3, [pc, #384]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ee      	bne.n	80055b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d105      	bne.n	80055ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055de:	4b5c      	ldr	r3, [pc, #368]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	4a5b      	ldr	r2, [pc, #364]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 80055e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80a7 	beq.w	8005742 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055f4:	4b56      	ldr	r3, [pc, #344]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d060      	beq.n	80056c2 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d145      	bne.n	8005694 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005608:	4b52      	ldr	r3, [pc, #328]	; (8005754 <HAL_RCC_OscConfig+0x504>)
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560e:	f7fd ff37 	bl	8003480 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005616:	f7fd ff33 	bl	8003480 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e08d      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005628:	4b49      	ldr	r3, [pc, #292]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f0      	bne.n	8005616 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	019b      	lsls	r3, r3, #6
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	3b01      	subs	r3, #1
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	071b      	lsls	r3, r3, #28
 8005660:	493b      	ldr	r1, [pc, #236]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005662:	4313      	orrs	r3, r2
 8005664:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005666:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <HAL_RCC_OscConfig+0x504>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fd ff08 	bl	8003480 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005674:	f7fd ff04 	bl	8003480 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e05e      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005686:	4b32      	ldr	r3, [pc, #200]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x424>
 8005692:	e056      	b.n	8005742 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005694:	4b2f      	ldr	r3, [pc, #188]	; (8005754 <HAL_RCC_OscConfig+0x504>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7fd fef1 	bl	8003480 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a2:	f7fd feed 	bl	8003480 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e047      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b4:	4b26      	ldr	r3, [pc, #152]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f0      	bne.n	80056a2 <HAL_RCC_OscConfig+0x452>
 80056c0:	e03f      	b.n	8005742 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e03a      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ce:	4b20      	ldr	r3, [pc, #128]	; (8005750 <HAL_RCC_OscConfig+0x500>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d030      	beq.n	800573e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d129      	bne.n	800573e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d122      	bne.n	800573e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056fe:	4013      	ands	r3, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005704:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005706:	4293      	cmp	r3, r2
 8005708:	d119      	bne.n	800573e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d10f      	bne.n	800573e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d107      	bne.n	800573e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40007000 	.word	0x40007000
 8005750:	40023800 	.word	0x40023800
 8005754:	42470060 	.word	0x42470060

08005758 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e01c      	b.n	80057a4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	795b      	ldrb	r3, [r3, #5]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fd f876 	bl	800286c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0204 	orr.w	r2, r2, #4
 8005794:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_RNG_GenerateRandomNumber_IT>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber_IT(RNG_HandleTypeDef *hrng)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	791b      	ldrb	r3, [r3, #4]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_RNG_GenerateRandomNumber_IT+0x18>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e01c      	b.n	80057fe <HAL_RNG_GenerateRandomNumber_IT+0x52>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	795b      	ldrb	r3, [r3, #5]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10b      	bne.n	80057ec <HAL_RNG_GenerateRandomNumber_IT+0x40>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	715a      	strb	r2, [r3, #5]

    /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */
    __HAL_RNG_ENABLE_IT(hrng);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0208 	orr.w	r2, r2, #8
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e007      	b.n	80057fc <HAL_RNG_GenerateRandomNumber_IT+0x50>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hrng);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	711a      	strb	r2, [r3, #4]

    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b20      	cmp	r3, #32
 8005822:	d105      	bne.n	8005830 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2210      	movs	r2, #16
 8005828:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800582a:	2301      	movs	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e00b      	b.n	8005848 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d104      	bne.n	8005848 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2208      	movs	r2, #8
 8005842:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005844:	2301      	movs	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d10b      	bne.n	8005866 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2204      	movs	r2, #4
 8005852:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f83a 	bl	80058ce <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8005862:	605a      	str	r2, [r3, #4]

    return;
 8005864:	e024      	b.n	80058b0 <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b01      	cmp	r3, #1
 8005872:	d11d      	bne.n	80058b0 <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0208 	bic.w	r2, r2, #8
 8005882:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	795b      	ldrb	r3, [r3, #5]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b04      	cmp	r3, #4
 8005896:	d00b      	beq.n	80058b0 <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fd fa04 	bl	8002cb8 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_RNG_ReadLastRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval random value
  */
uint32_t HAL_RNG_ReadLastRandomNumber(RNG_HandleTypeDef *hrng)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  return (hrng->RandomNumber);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e07b      	b.n	80059ec <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005904:	d009      	beq.n	800591a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	61da      	str	r2, [r3, #28]
 800590c:	e005      	b.n	800591a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7fc ffd5 	bl	80028e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005950:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	ea42 0103 	orr.w	r1, r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	0c1b      	lsrs	r3, r3, #16
 80059b8:	f003 0104 	and.w	r1, r3, #4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	f003 0210 	and.w	r2, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_SPI_Transmit+0x22>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e126      	b.n	8005c64 <HAL_SPI_Transmit+0x270>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1e:	f7fd fd2f 	bl	8003480 <HAL_GetTick>
 8005a22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d002      	beq.n	8005a3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
 8005a36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a38:	e10b      	b.n	8005c52 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_SPI_Transmit+0x52>
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a4a:	e102      	b.n	8005c52 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	88fa      	ldrh	r2, [r7, #6]
 8005a64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	88fa      	ldrh	r2, [r7, #6]
 8005a6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a92:	d10f      	bne.n	8005ab4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ab2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d007      	beq.n	8005ad2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ada:	d14b      	bne.n	8005b74 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <HAL_SPI_Transmit+0xf6>
 8005ae4:	8afb      	ldrh	r3, [r7, #22]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d13e      	bne.n	8005b68 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	881a      	ldrh	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	1c9a      	adds	r2, r3, #2
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b0e:	e02b      	b.n	8005b68 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d112      	bne.n	8005b44 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b42:	e011      	b.n	8005b68 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b44:	f7fd fc9c 	bl	8003480 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d803      	bhi.n	8005b5c <HAL_SPI_Transmit+0x168>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b5a:	d102      	bne.n	8005b62 <HAL_SPI_Transmit+0x16e>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b66:	e074      	b.n	8005c52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1ce      	bne.n	8005b10 <HAL_SPI_Transmit+0x11c>
 8005b72:	e04c      	b.n	8005c0e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <HAL_SPI_Transmit+0x18e>
 8005b7c:	8afb      	ldrh	r3, [r7, #22]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d140      	bne.n	8005c04 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ba8:	e02c      	b.n	8005c04 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d113      	bne.n	8005be0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bde:	e011      	b.n	8005c04 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be0:	f7fd fc4e 	bl	8003480 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d803      	bhi.n	8005bf8 <HAL_SPI_Transmit+0x204>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bf6:	d102      	bne.n	8005bfe <HAL_SPI_Transmit+0x20a>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c02:	e026      	b.n	8005c52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1cd      	bne.n	8005baa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8b2 	bl	8005d7c <SPI_EndRxTxTransaction>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e000      	b.n	8005c52 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005c50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c7c:	f7fd fc00 	bl	8003480 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4413      	add	r3, r2
 8005c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c8c:	f7fd fbf8 	bl	8003480 <HAL_GetTick>
 8005c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c92:	4b39      	ldr	r3, [pc, #228]	; (8005d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	015b      	lsls	r3, r3, #5
 8005c98:	0d1b      	lsrs	r3, r3, #20
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	e054      	b.n	8005d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005caa:	d050      	beq.n	8005d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cac:	f7fd fbe8 	bl	8003480 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d902      	bls.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d13d      	bne.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cda:	d111      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce4:	d004      	beq.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cee:	d107      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d08:	d10f      	bne.n	8005d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e017      	b.n	8005d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4013      	ands	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2301      	moveq	r3, #1
 8005d60:	2300      	movne	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d19b      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3720      	adds	r7, #32
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000014 	.word	0x20000014

08005d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d88:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <SPI_EndRxTxTransaction+0x7c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <SPI_EndRxTxTransaction+0x80>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0d5b      	lsrs	r3, r3, #21
 8005d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da6:	d112      	bne.n	8005dce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff ff5a 	bl	8005c6c <SPI_WaitFlagStateUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e00f      	b.n	8005dee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d0f2      	beq.n	8005dce <SPI_EndRxTxTransaction+0x52>
 8005de8:	e000      	b.n	8005dec <SPI_EndRxTxTransaction+0x70>
        break;
 8005dea:	bf00      	nop
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000014 	.word	0x20000014
 8005dfc:	165e9f81 	.word	0x165e9f81

08005e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e041      	b.n	8005e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc fda4 	bl	8002974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f000 fac4 	bl	80063cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d001      	beq.n	8005eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e04e      	b.n	8005f56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a23      	ldr	r2, [pc, #140]	; (8005f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d01d      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d111      	bne.n	8005f44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d010      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	e007      	b.n	8005f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40010400 	.word	0x40010400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40001800 	.word	0x40001800

08005f80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6a1a      	ldr	r2, [r3, #32]
 8005f9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10f      	bne.n	8005fc8 <HAL_TIM_Base_Stop_IT+0x48>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6a1a      	ldr	r2, [r3, #32]
 8005fae:	f240 4344 	movw	r3, #1092	; 0x444
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_Base_Stop_IT+0x48>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d122      	bne.n	800603a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d11b      	bne.n	800603a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f06f 0202 	mvn.w	r2, #2
 800600a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f9b5 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 8006026:	e005      	b.n	8006034 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f9a7 	bl	800637c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f9b8 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b04      	cmp	r3, #4
 8006046:	d122      	bne.n	800608e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b04      	cmp	r3, #4
 8006054:	d11b      	bne.n	800608e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f06f 0204 	mvn.w	r2, #4
 800605e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f98b 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 800607a:	e005      	b.n	8006088 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f97d 	bl	800637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f98e 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b08      	cmp	r3, #8
 800609a:	d122      	bne.n	80060e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d11b      	bne.n	80060e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f06f 0208 	mvn.w	r2, #8
 80060b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2204      	movs	r2, #4
 80060b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f961 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 80060ce:	e005      	b.n	80060dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f953 	bl	800637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f964 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d122      	bne.n	8006136 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d11b      	bne.n	8006136 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f06f 0210 	mvn.w	r2, #16
 8006106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2208      	movs	r2, #8
 800610c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f937 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 8006122:	e005      	b.n	8006130 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f929 	bl	800637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f93a 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	d10e      	bne.n	8006162 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f06f 0201 	mvn.w	r2, #1
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fb fe9d 	bl	8001e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d10e      	bne.n	800618e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617a:	2b80      	cmp	r3, #128	; 0x80
 800617c:	d107      	bne.n	800618e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fadf 	bl	800674c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d10e      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d107      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f8ff 	bl	80063b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d10e      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d107      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0220 	mvn.w	r2, #32
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 faa9 	bl	8006738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_TIM_ConfigClockSource+0x1c>
 8006206:	2302      	movs	r3, #2
 8006208:	e0b4      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x186>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2202      	movs	r2, #2
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006228:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006230:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006242:	d03e      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0xd4>
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006248:	f200 8087 	bhi.w	800635a <HAL_TIM_ConfigClockSource+0x16c>
 800624c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006250:	f000 8086 	beq.w	8006360 <HAL_TIM_ConfigClockSource+0x172>
 8006254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006258:	d87f      	bhi.n	800635a <HAL_TIM_ConfigClockSource+0x16c>
 800625a:	2b70      	cmp	r3, #112	; 0x70
 800625c:	d01a      	beq.n	8006294 <HAL_TIM_ConfigClockSource+0xa6>
 800625e:	2b70      	cmp	r3, #112	; 0x70
 8006260:	d87b      	bhi.n	800635a <HAL_TIM_ConfigClockSource+0x16c>
 8006262:	2b60      	cmp	r3, #96	; 0x60
 8006264:	d050      	beq.n	8006308 <HAL_TIM_ConfigClockSource+0x11a>
 8006266:	2b60      	cmp	r3, #96	; 0x60
 8006268:	d877      	bhi.n	800635a <HAL_TIM_ConfigClockSource+0x16c>
 800626a:	2b50      	cmp	r3, #80	; 0x50
 800626c:	d03c      	beq.n	80062e8 <HAL_TIM_ConfigClockSource+0xfa>
 800626e:	2b50      	cmp	r3, #80	; 0x50
 8006270:	d873      	bhi.n	800635a <HAL_TIM_ConfigClockSource+0x16c>
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d058      	beq.n	8006328 <HAL_TIM_ConfigClockSource+0x13a>
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d86f      	bhi.n	800635a <HAL_TIM_ConfigClockSource+0x16c>
 800627a:	2b30      	cmp	r3, #48	; 0x30
 800627c:	d064      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0x15a>
 800627e:	2b30      	cmp	r3, #48	; 0x30
 8006280:	d86b      	bhi.n	800635a <HAL_TIM_ConfigClockSource+0x16c>
 8006282:	2b20      	cmp	r3, #32
 8006284:	d060      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0x15a>
 8006286:	2b20      	cmp	r3, #32
 8006288:	d867      	bhi.n	800635a <HAL_TIM_ConfigClockSource+0x16c>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d05c      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0x15a>
 800628e:	2b10      	cmp	r3, #16
 8006290:	d05a      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0x15a>
 8006292:	e062      	b.n	800635a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	6899      	ldr	r1, [r3, #8]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f000 f9ac 	bl	8006600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]
      break;
 80062c0:	e04f      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6899      	ldr	r1, [r3, #8]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f000 f995 	bl	8006600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e4:	609a      	str	r2, [r3, #8]
      break;
 80062e6:	e03c      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	461a      	mov	r2, r3
 80062f6:	f000 f909 	bl	800650c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2150      	movs	r1, #80	; 0x50
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f962 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8006306:	e02c      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6859      	ldr	r1, [r3, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	461a      	mov	r2, r3
 8006316:	f000 f928 	bl	800656a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2160      	movs	r1, #96	; 0x60
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f952 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8006326:	e01c      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	6859      	ldr	r1, [r3, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	461a      	mov	r2, r3
 8006336:	f000 f8e9 	bl	800650c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2140      	movs	r1, #64	; 0x40
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f942 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8006346:	e00c      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f000 f939 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8006358:	e003      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	73fb      	strb	r3, [r7, #15]
      break;
 800635e:	e000      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006360:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a40      	ldr	r2, [pc, #256]	; (80064e0 <TIM_Base_SetConfig+0x114>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d013      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ea:	d00f      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a3d      	ldr	r2, [pc, #244]	; (80064e4 <TIM_Base_SetConfig+0x118>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00b      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a3c      	ldr	r2, [pc, #240]	; (80064e8 <TIM_Base_SetConfig+0x11c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d007      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3b      	ldr	r2, [pc, #236]	; (80064ec <TIM_Base_SetConfig+0x120>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3a      	ldr	r2, [pc, #232]	; (80064f0 <TIM_Base_SetConfig+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d108      	bne.n	800641e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <TIM_Base_SetConfig+0x114>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d02b      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642c:	d027      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2c      	ldr	r2, [pc, #176]	; (80064e4 <TIM_Base_SetConfig+0x118>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d023      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <TIM_Base_SetConfig+0x11c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01f      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <TIM_Base_SetConfig+0x120>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01b      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a29      	ldr	r2, [pc, #164]	; (80064f0 <TIM_Base_SetConfig+0x124>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d017      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a28      	ldr	r2, [pc, #160]	; (80064f4 <TIM_Base_SetConfig+0x128>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d013      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <TIM_Base_SetConfig+0x12c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00f      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a26      	ldr	r2, [pc, #152]	; (80064fc <TIM_Base_SetConfig+0x130>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00b      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a25      	ldr	r2, [pc, #148]	; (8006500 <TIM_Base_SetConfig+0x134>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d007      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a24      	ldr	r2, [pc, #144]	; (8006504 <TIM_Base_SetConfig+0x138>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d003      	beq.n	800647e <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a23      	ldr	r2, [pc, #140]	; (8006508 <TIM_Base_SetConfig+0x13c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d108      	bne.n	8006490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <TIM_Base_SetConfig+0x114>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_Base_SetConfig+0xf8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a0c      	ldr	r2, [pc, #48]	; (80064f0 <TIM_Base_SetConfig+0x124>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d103      	bne.n	80064cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	615a      	str	r2, [r3, #20]
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40010000 	.word	0x40010000
 80064e4:	40000400 	.word	0x40000400
 80064e8:	40000800 	.word	0x40000800
 80064ec:	40000c00 	.word	0x40000c00
 80064f0:	40010400 	.word	0x40010400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40014400 	.word	0x40014400
 80064fc:	40014800 	.word	0x40014800
 8006500:	40001800 	.word	0x40001800
 8006504:	40001c00 	.word	0x40001c00
 8006508:	40002000 	.word	0x40002000

0800650c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f023 030a 	bic.w	r3, r3, #10
 8006548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800656a:	b480      	push	{r7}
 800656c:	b087      	sub	sp, #28
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0210 	bic.w	r2, r3, #16
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	031b      	lsls	r3, r3, #12
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f043 0307 	orr.w	r3, r3, #7
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	609a      	str	r2, [r3, #8]
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	021a      	lsls	r2, r3, #8
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	431a      	orrs	r2, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4313      	orrs	r3, r2
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	609a      	str	r2, [r3, #8]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006654:	2302      	movs	r3, #2
 8006656:	e05a      	b.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a21      	ldr	r2, [pc, #132]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d022      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a4:	d01d      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1d      	ldr	r2, [pc, #116]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d018      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1b      	ldr	r2, [pc, #108]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1a      	ldr	r2, [pc, #104]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00e      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a18      	ldr	r2, [pc, #96]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d009      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a17      	ldr	r2, [pc, #92]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d004      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d10c      	bne.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40010000 	.word	0x40010000
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	40000c00 	.word	0x40000c00
 800672c:	40010400 	.word	0x40010400
 8006730:	40014000 	.word	0x40014000
 8006734:	40001800 	.word	0x40001800

08006738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <__errno>:
 8006760:	4b01      	ldr	r3, [pc, #4]	; (8006768 <__errno+0x8>)
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000020 	.word	0x20000020

0800676c <__libc_init_array>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4d0d      	ldr	r5, [pc, #52]	; (80067a4 <__libc_init_array+0x38>)
 8006770:	4c0d      	ldr	r4, [pc, #52]	; (80067a8 <__libc_init_array+0x3c>)
 8006772:	1b64      	subs	r4, r4, r5
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	2600      	movs	r6, #0
 8006778:	42a6      	cmp	r6, r4
 800677a:	d109      	bne.n	8006790 <__libc_init_array+0x24>
 800677c:	4d0b      	ldr	r5, [pc, #44]	; (80067ac <__libc_init_array+0x40>)
 800677e:	4c0c      	ldr	r4, [pc, #48]	; (80067b0 <__libc_init_array+0x44>)
 8006780:	f000 fc5e 	bl	8007040 <_init>
 8006784:	1b64      	subs	r4, r4, r5
 8006786:	10a4      	asrs	r4, r4, #2
 8006788:	2600      	movs	r6, #0
 800678a:	42a6      	cmp	r6, r4
 800678c:	d105      	bne.n	800679a <__libc_init_array+0x2e>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f855 3b04 	ldr.w	r3, [r5], #4
 8006794:	4798      	blx	r3
 8006796:	3601      	adds	r6, #1
 8006798:	e7ee      	b.n	8006778 <__libc_init_array+0xc>
 800679a:	f855 3b04 	ldr.w	r3, [r5], #4
 800679e:	4798      	blx	r3
 80067a0:	3601      	adds	r6, #1
 80067a2:	e7f2      	b.n	800678a <__libc_init_array+0x1e>
 80067a4:	08007d80 	.word	0x08007d80
 80067a8:	08007d80 	.word	0x08007d80
 80067ac:	08007d80 	.word	0x08007d80
 80067b0:	08007d84 	.word	0x08007d84

080067b4 <malloc>:
 80067b4:	4b02      	ldr	r3, [pc, #8]	; (80067c0 <malloc+0xc>)
 80067b6:	4601      	mov	r1, r0
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	f000 b869 	b.w	8006890 <_malloc_r>
 80067be:	bf00      	nop
 80067c0:	20000020 	.word	0x20000020

080067c4 <memcpy>:
 80067c4:	440a      	add	r2, r1
 80067c6:	4291      	cmp	r1, r2
 80067c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067cc:	d100      	bne.n	80067d0 <memcpy+0xc>
 80067ce:	4770      	bx	lr
 80067d0:	b510      	push	{r4, lr}
 80067d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067da:	4291      	cmp	r1, r2
 80067dc:	d1f9      	bne.n	80067d2 <memcpy+0xe>
 80067de:	bd10      	pop	{r4, pc}

080067e0 <memset>:
 80067e0:	4402      	add	r2, r0
 80067e2:	4603      	mov	r3, r0
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d100      	bne.n	80067ea <memset+0xa>
 80067e8:	4770      	bx	lr
 80067ea:	f803 1b01 	strb.w	r1, [r3], #1
 80067ee:	e7f9      	b.n	80067e4 <memset+0x4>

080067f0 <_free_r>:
 80067f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067f2:	2900      	cmp	r1, #0
 80067f4:	d048      	beq.n	8006888 <_free_r+0x98>
 80067f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067fa:	9001      	str	r0, [sp, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006802:	bfb8      	it	lt
 8006804:	18e4      	addlt	r4, r4, r3
 8006806:	f000 f8d5 	bl	80069b4 <__malloc_lock>
 800680a:	4a20      	ldr	r2, [pc, #128]	; (800688c <_free_r+0x9c>)
 800680c:	9801      	ldr	r0, [sp, #4]
 800680e:	6813      	ldr	r3, [r2, #0]
 8006810:	4615      	mov	r5, r2
 8006812:	b933      	cbnz	r3, 8006822 <_free_r+0x32>
 8006814:	6063      	str	r3, [r4, #4]
 8006816:	6014      	str	r4, [r2, #0]
 8006818:	b003      	add	sp, #12
 800681a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800681e:	f000 b8cf 	b.w	80069c0 <__malloc_unlock>
 8006822:	42a3      	cmp	r3, r4
 8006824:	d90b      	bls.n	800683e <_free_r+0x4e>
 8006826:	6821      	ldr	r1, [r4, #0]
 8006828:	1862      	adds	r2, r4, r1
 800682a:	4293      	cmp	r3, r2
 800682c:	bf04      	itt	eq
 800682e:	681a      	ldreq	r2, [r3, #0]
 8006830:	685b      	ldreq	r3, [r3, #4]
 8006832:	6063      	str	r3, [r4, #4]
 8006834:	bf04      	itt	eq
 8006836:	1852      	addeq	r2, r2, r1
 8006838:	6022      	streq	r2, [r4, #0]
 800683a:	602c      	str	r4, [r5, #0]
 800683c:	e7ec      	b.n	8006818 <_free_r+0x28>
 800683e:	461a      	mov	r2, r3
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	b10b      	cbz	r3, 8006848 <_free_r+0x58>
 8006844:	42a3      	cmp	r3, r4
 8006846:	d9fa      	bls.n	800683e <_free_r+0x4e>
 8006848:	6811      	ldr	r1, [r2, #0]
 800684a:	1855      	adds	r5, r2, r1
 800684c:	42a5      	cmp	r5, r4
 800684e:	d10b      	bne.n	8006868 <_free_r+0x78>
 8006850:	6824      	ldr	r4, [r4, #0]
 8006852:	4421      	add	r1, r4
 8006854:	1854      	adds	r4, r2, r1
 8006856:	42a3      	cmp	r3, r4
 8006858:	6011      	str	r1, [r2, #0]
 800685a:	d1dd      	bne.n	8006818 <_free_r+0x28>
 800685c:	681c      	ldr	r4, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	6053      	str	r3, [r2, #4]
 8006862:	4421      	add	r1, r4
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	e7d7      	b.n	8006818 <_free_r+0x28>
 8006868:	d902      	bls.n	8006870 <_free_r+0x80>
 800686a:	230c      	movs	r3, #12
 800686c:	6003      	str	r3, [r0, #0]
 800686e:	e7d3      	b.n	8006818 <_free_r+0x28>
 8006870:	6825      	ldr	r5, [r4, #0]
 8006872:	1961      	adds	r1, r4, r5
 8006874:	428b      	cmp	r3, r1
 8006876:	bf04      	itt	eq
 8006878:	6819      	ldreq	r1, [r3, #0]
 800687a:	685b      	ldreq	r3, [r3, #4]
 800687c:	6063      	str	r3, [r4, #4]
 800687e:	bf04      	itt	eq
 8006880:	1949      	addeq	r1, r1, r5
 8006882:	6021      	streq	r1, [r4, #0]
 8006884:	6054      	str	r4, [r2, #4]
 8006886:	e7c7      	b.n	8006818 <_free_r+0x28>
 8006888:	b003      	add	sp, #12
 800688a:	bd30      	pop	{r4, r5, pc}
 800688c:	200004bc 	.word	0x200004bc

08006890 <_malloc_r>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	1ccd      	adds	r5, r1, #3
 8006894:	f025 0503 	bic.w	r5, r5, #3
 8006898:	3508      	adds	r5, #8
 800689a:	2d0c      	cmp	r5, #12
 800689c:	bf38      	it	cc
 800689e:	250c      	movcc	r5, #12
 80068a0:	2d00      	cmp	r5, #0
 80068a2:	4606      	mov	r6, r0
 80068a4:	db01      	blt.n	80068aa <_malloc_r+0x1a>
 80068a6:	42a9      	cmp	r1, r5
 80068a8:	d903      	bls.n	80068b2 <_malloc_r+0x22>
 80068aa:	230c      	movs	r3, #12
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	2000      	movs	r0, #0
 80068b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b2:	f000 f87f 	bl	80069b4 <__malloc_lock>
 80068b6:	4921      	ldr	r1, [pc, #132]	; (800693c <_malloc_r+0xac>)
 80068b8:	680a      	ldr	r2, [r1, #0]
 80068ba:	4614      	mov	r4, r2
 80068bc:	b99c      	cbnz	r4, 80068e6 <_malloc_r+0x56>
 80068be:	4f20      	ldr	r7, [pc, #128]	; (8006940 <_malloc_r+0xb0>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	b923      	cbnz	r3, 80068ce <_malloc_r+0x3e>
 80068c4:	4621      	mov	r1, r4
 80068c6:	4630      	mov	r0, r6
 80068c8:	f000 f844 	bl	8006954 <_sbrk_r>
 80068cc:	6038      	str	r0, [r7, #0]
 80068ce:	4629      	mov	r1, r5
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 f83f 	bl	8006954 <_sbrk_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d123      	bne.n	8006922 <_malloc_r+0x92>
 80068da:	230c      	movs	r3, #12
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	4630      	mov	r0, r6
 80068e0:	f000 f86e 	bl	80069c0 <__malloc_unlock>
 80068e4:	e7e3      	b.n	80068ae <_malloc_r+0x1e>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	1b5b      	subs	r3, r3, r5
 80068ea:	d417      	bmi.n	800691c <_malloc_r+0x8c>
 80068ec:	2b0b      	cmp	r3, #11
 80068ee:	d903      	bls.n	80068f8 <_malloc_r+0x68>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	441c      	add	r4, r3
 80068f4:	6025      	str	r5, [r4, #0]
 80068f6:	e004      	b.n	8006902 <_malloc_r+0x72>
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	42a2      	cmp	r2, r4
 80068fc:	bf0c      	ite	eq
 80068fe:	600b      	streq	r3, [r1, #0]
 8006900:	6053      	strne	r3, [r2, #4]
 8006902:	4630      	mov	r0, r6
 8006904:	f000 f85c 	bl	80069c0 <__malloc_unlock>
 8006908:	f104 000b 	add.w	r0, r4, #11
 800690c:	1d23      	adds	r3, r4, #4
 800690e:	f020 0007 	bic.w	r0, r0, #7
 8006912:	1ac2      	subs	r2, r0, r3
 8006914:	d0cc      	beq.n	80068b0 <_malloc_r+0x20>
 8006916:	1a1b      	subs	r3, r3, r0
 8006918:	50a3      	str	r3, [r4, r2]
 800691a:	e7c9      	b.n	80068b0 <_malloc_r+0x20>
 800691c:	4622      	mov	r2, r4
 800691e:	6864      	ldr	r4, [r4, #4]
 8006920:	e7cc      	b.n	80068bc <_malloc_r+0x2c>
 8006922:	1cc4      	adds	r4, r0, #3
 8006924:	f024 0403 	bic.w	r4, r4, #3
 8006928:	42a0      	cmp	r0, r4
 800692a:	d0e3      	beq.n	80068f4 <_malloc_r+0x64>
 800692c:	1a21      	subs	r1, r4, r0
 800692e:	4630      	mov	r0, r6
 8006930:	f000 f810 	bl	8006954 <_sbrk_r>
 8006934:	3001      	adds	r0, #1
 8006936:	d1dd      	bne.n	80068f4 <_malloc_r+0x64>
 8006938:	e7cf      	b.n	80068da <_malloc_r+0x4a>
 800693a:	bf00      	nop
 800693c:	200004bc 	.word	0x200004bc
 8006940:	200004c0 	.word	0x200004c0

08006944 <realloc>:
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <realloc+0xc>)
 8006946:	460a      	mov	r2, r1
 8006948:	4601      	mov	r1, r0
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	f000 b83e 	b.w	80069cc <_realloc_r>
 8006950:	20000020 	.word	0x20000020

08006954 <_sbrk_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d06      	ldr	r5, [pc, #24]	; (8006970 <_sbrk_r+0x1c>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fc f89e 	bl	8002aa0 <_sbrk>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_sbrk_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_sbrk_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000a3c 	.word	0x20000a3c

08006974 <siprintf>:
 8006974:	b40e      	push	{r1, r2, r3}
 8006976:	b500      	push	{lr}
 8006978:	b09c      	sub	sp, #112	; 0x70
 800697a:	ab1d      	add	r3, sp, #116	; 0x74
 800697c:	9002      	str	r0, [sp, #8]
 800697e:	9006      	str	r0, [sp, #24]
 8006980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006984:	4809      	ldr	r0, [pc, #36]	; (80069ac <siprintf+0x38>)
 8006986:	9107      	str	r1, [sp, #28]
 8006988:	9104      	str	r1, [sp, #16]
 800698a:	4909      	ldr	r1, [pc, #36]	; (80069b0 <siprintf+0x3c>)
 800698c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006990:	9105      	str	r1, [sp, #20]
 8006992:	6800      	ldr	r0, [r0, #0]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	a902      	add	r1, sp, #8
 8006998:	f000 f89a 	bl	8006ad0 <_svfiprintf_r>
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	b01c      	add	sp, #112	; 0x70
 80069a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a8:	b003      	add	sp, #12
 80069aa:	4770      	bx	lr
 80069ac:	20000020 	.word	0x20000020
 80069b0:	ffff0208 	.word	0xffff0208

080069b4 <__malloc_lock>:
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <__malloc_lock+0x8>)
 80069b6:	f000 bb1f 	b.w	8006ff8 <__retarget_lock_acquire_recursive>
 80069ba:	bf00      	nop
 80069bc:	20000a44 	.word	0x20000a44

080069c0 <__malloc_unlock>:
 80069c0:	4801      	ldr	r0, [pc, #4]	; (80069c8 <__malloc_unlock+0x8>)
 80069c2:	f000 bb1a 	b.w	8006ffa <__retarget_lock_release_recursive>
 80069c6:	bf00      	nop
 80069c8:	20000a44 	.word	0x20000a44

080069cc <_realloc_r>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	4607      	mov	r7, r0
 80069d0:	4614      	mov	r4, r2
 80069d2:	460e      	mov	r6, r1
 80069d4:	b921      	cbnz	r1, 80069e0 <_realloc_r+0x14>
 80069d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069da:	4611      	mov	r1, r2
 80069dc:	f7ff bf58 	b.w	8006890 <_malloc_r>
 80069e0:	b922      	cbnz	r2, 80069ec <_realloc_r+0x20>
 80069e2:	f7ff ff05 	bl	80067f0 <_free_r>
 80069e6:	4625      	mov	r5, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ec:	f000 fb20 	bl	8007030 <_malloc_usable_size_r>
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d20f      	bcs.n	8006a14 <_realloc_r+0x48>
 80069f4:	4621      	mov	r1, r4
 80069f6:	4638      	mov	r0, r7
 80069f8:	f7ff ff4a 	bl	8006890 <_malloc_r>
 80069fc:	4605      	mov	r5, r0
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d0f2      	beq.n	80069e8 <_realloc_r+0x1c>
 8006a02:	4631      	mov	r1, r6
 8006a04:	4622      	mov	r2, r4
 8006a06:	f7ff fedd 	bl	80067c4 <memcpy>
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f7ff feef 	bl	80067f0 <_free_r>
 8006a12:	e7e9      	b.n	80069e8 <_realloc_r+0x1c>
 8006a14:	4635      	mov	r5, r6
 8006a16:	e7e7      	b.n	80069e8 <_realloc_r+0x1c>

08006a18 <__ssputs_r>:
 8006a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	688e      	ldr	r6, [r1, #8]
 8006a1e:	429e      	cmp	r6, r3
 8006a20:	4682      	mov	sl, r0
 8006a22:	460c      	mov	r4, r1
 8006a24:	4690      	mov	r8, r2
 8006a26:	461f      	mov	r7, r3
 8006a28:	d838      	bhi.n	8006a9c <__ssputs_r+0x84>
 8006a2a:	898a      	ldrh	r2, [r1, #12]
 8006a2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a30:	d032      	beq.n	8006a98 <__ssputs_r+0x80>
 8006a32:	6825      	ldr	r5, [r4, #0]
 8006a34:	6909      	ldr	r1, [r1, #16]
 8006a36:	eba5 0901 	sub.w	r9, r5, r1
 8006a3a:	6965      	ldr	r5, [r4, #20]
 8006a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a44:	3301      	adds	r3, #1
 8006a46:	444b      	add	r3, r9
 8006a48:	106d      	asrs	r5, r5, #1
 8006a4a:	429d      	cmp	r5, r3
 8006a4c:	bf38      	it	cc
 8006a4e:	461d      	movcc	r5, r3
 8006a50:	0553      	lsls	r3, r2, #21
 8006a52:	d531      	bpl.n	8006ab8 <__ssputs_r+0xa0>
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7ff ff1b 	bl	8006890 <_malloc_r>
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	b950      	cbnz	r0, 8006a74 <__ssputs_r+0x5c>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	f8ca 3000 	str.w	r3, [sl]
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a74:	6921      	ldr	r1, [r4, #16]
 8006a76:	464a      	mov	r2, r9
 8006a78:	f7ff fea4 	bl	80067c4 <memcpy>
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	6126      	str	r6, [r4, #16]
 8006a8a:	6165      	str	r5, [r4, #20]
 8006a8c:	444e      	add	r6, r9
 8006a8e:	eba5 0509 	sub.w	r5, r5, r9
 8006a92:	6026      	str	r6, [r4, #0]
 8006a94:	60a5      	str	r5, [r4, #8]
 8006a96:	463e      	mov	r6, r7
 8006a98:	42be      	cmp	r6, r7
 8006a9a:	d900      	bls.n	8006a9e <__ssputs_r+0x86>
 8006a9c:	463e      	mov	r6, r7
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	6820      	ldr	r0, [r4, #0]
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	f000 faaa 	bl	8006ffc <memmove>
 8006aa8:	68a3      	ldr	r3, [r4, #8]
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	1b9b      	subs	r3, r3, r6
 8006aae:	4432      	add	r2, r6
 8006ab0:	60a3      	str	r3, [r4, #8]
 8006ab2:	6022      	str	r2, [r4, #0]
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	e7db      	b.n	8006a70 <__ssputs_r+0x58>
 8006ab8:	462a      	mov	r2, r5
 8006aba:	f7ff ff87 	bl	80069cc <_realloc_r>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d1e1      	bne.n	8006a88 <__ssputs_r+0x70>
 8006ac4:	6921      	ldr	r1, [r4, #16]
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	f7ff fe92 	bl	80067f0 <_free_r>
 8006acc:	e7c7      	b.n	8006a5e <__ssputs_r+0x46>
	...

08006ad0 <_svfiprintf_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	4698      	mov	r8, r3
 8006ad6:	898b      	ldrh	r3, [r1, #12]
 8006ad8:	061b      	lsls	r3, r3, #24
 8006ada:	b09d      	sub	sp, #116	; 0x74
 8006adc:	4607      	mov	r7, r0
 8006ade:	460d      	mov	r5, r1
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	d50e      	bpl.n	8006b02 <_svfiprintf_r+0x32>
 8006ae4:	690b      	ldr	r3, [r1, #16]
 8006ae6:	b963      	cbnz	r3, 8006b02 <_svfiprintf_r+0x32>
 8006ae8:	2140      	movs	r1, #64	; 0x40
 8006aea:	f7ff fed1 	bl	8006890 <_malloc_r>
 8006aee:	6028      	str	r0, [r5, #0]
 8006af0:	6128      	str	r0, [r5, #16]
 8006af2:	b920      	cbnz	r0, 8006afe <_svfiprintf_r+0x2e>
 8006af4:	230c      	movs	r3, #12
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006afc:	e0d1      	b.n	8006ca2 <_svfiprintf_r+0x1d2>
 8006afe:	2340      	movs	r3, #64	; 0x40
 8006b00:	616b      	str	r3, [r5, #20]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9309      	str	r3, [sp, #36]	; 0x24
 8006b06:	2320      	movs	r3, #32
 8006b08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b10:	2330      	movs	r3, #48	; 0x30
 8006b12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cbc <_svfiprintf_r+0x1ec>
 8006b16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b1a:	f04f 0901 	mov.w	r9, #1
 8006b1e:	4623      	mov	r3, r4
 8006b20:	469a      	mov	sl, r3
 8006b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b26:	b10a      	cbz	r2, 8006b2c <_svfiprintf_r+0x5c>
 8006b28:	2a25      	cmp	r2, #37	; 0x25
 8006b2a:	d1f9      	bne.n	8006b20 <_svfiprintf_r+0x50>
 8006b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b30:	d00b      	beq.n	8006b4a <_svfiprintf_r+0x7a>
 8006b32:	465b      	mov	r3, fp
 8006b34:	4622      	mov	r2, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	4638      	mov	r0, r7
 8006b3a:	f7ff ff6d 	bl	8006a18 <__ssputs_r>
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f000 80aa 	beq.w	8006c98 <_svfiprintf_r+0x1c8>
 8006b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b46:	445a      	add	r2, fp
 8006b48:	9209      	str	r2, [sp, #36]	; 0x24
 8006b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80a2 	beq.w	8006c98 <_svfiprintf_r+0x1c8>
 8006b54:	2300      	movs	r3, #0
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b5e:	f10a 0a01 	add.w	sl, sl, #1
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	9307      	str	r3, [sp, #28]
 8006b66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b6a:	931a      	str	r3, [sp, #104]	; 0x68
 8006b6c:	4654      	mov	r4, sl
 8006b6e:	2205      	movs	r2, #5
 8006b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b74:	4851      	ldr	r0, [pc, #324]	; (8006cbc <_svfiprintf_r+0x1ec>)
 8006b76:	f7f9 fb53 	bl	8000220 <memchr>
 8006b7a:	9a04      	ldr	r2, [sp, #16]
 8006b7c:	b9d8      	cbnz	r0, 8006bb6 <_svfiprintf_r+0xe6>
 8006b7e:	06d0      	lsls	r0, r2, #27
 8006b80:	bf44      	itt	mi
 8006b82:	2320      	movmi	r3, #32
 8006b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b88:	0711      	lsls	r1, r2, #28
 8006b8a:	bf44      	itt	mi
 8006b8c:	232b      	movmi	r3, #43	; 0x2b
 8006b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b92:	f89a 3000 	ldrb.w	r3, [sl]
 8006b96:	2b2a      	cmp	r3, #42	; 0x2a
 8006b98:	d015      	beq.n	8006bc6 <_svfiprintf_r+0xf6>
 8006b9a:	9a07      	ldr	r2, [sp, #28]
 8006b9c:	4654      	mov	r4, sl
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	f04f 0c0a 	mov.w	ip, #10
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006baa:	3b30      	subs	r3, #48	; 0x30
 8006bac:	2b09      	cmp	r3, #9
 8006bae:	d94e      	bls.n	8006c4e <_svfiprintf_r+0x17e>
 8006bb0:	b1b0      	cbz	r0, 8006be0 <_svfiprintf_r+0x110>
 8006bb2:	9207      	str	r2, [sp, #28]
 8006bb4:	e014      	b.n	8006be0 <_svfiprintf_r+0x110>
 8006bb6:	eba0 0308 	sub.w	r3, r0, r8
 8006bba:	fa09 f303 	lsl.w	r3, r9, r3
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	9304      	str	r3, [sp, #16]
 8006bc2:	46a2      	mov	sl, r4
 8006bc4:	e7d2      	b.n	8006b6c <_svfiprintf_r+0x9c>
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	1d19      	adds	r1, r3, #4
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	9103      	str	r1, [sp, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	bfbb      	ittet	lt
 8006bd2:	425b      	neglt	r3, r3
 8006bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd8:	9307      	strge	r3, [sp, #28]
 8006bda:	9307      	strlt	r3, [sp, #28]
 8006bdc:	bfb8      	it	lt
 8006bde:	9204      	strlt	r2, [sp, #16]
 8006be0:	7823      	ldrb	r3, [r4, #0]
 8006be2:	2b2e      	cmp	r3, #46	; 0x2e
 8006be4:	d10c      	bne.n	8006c00 <_svfiprintf_r+0x130>
 8006be6:	7863      	ldrb	r3, [r4, #1]
 8006be8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bea:	d135      	bne.n	8006c58 <_svfiprintf_r+0x188>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	1d1a      	adds	r2, r3, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	9203      	str	r2, [sp, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bfb8      	it	lt
 8006bf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bfc:	3402      	adds	r4, #2
 8006bfe:	9305      	str	r3, [sp, #20]
 8006c00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ccc <_svfiprintf_r+0x1fc>
 8006c04:	7821      	ldrb	r1, [r4, #0]
 8006c06:	2203      	movs	r2, #3
 8006c08:	4650      	mov	r0, sl
 8006c0a:	f7f9 fb09 	bl	8000220 <memchr>
 8006c0e:	b140      	cbz	r0, 8006c22 <_svfiprintf_r+0x152>
 8006c10:	2340      	movs	r3, #64	; 0x40
 8006c12:	eba0 000a 	sub.w	r0, r0, sl
 8006c16:	fa03 f000 	lsl.w	r0, r3, r0
 8006c1a:	9b04      	ldr	r3, [sp, #16]
 8006c1c:	4303      	orrs	r3, r0
 8006c1e:	3401      	adds	r4, #1
 8006c20:	9304      	str	r3, [sp, #16]
 8006c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c26:	4826      	ldr	r0, [pc, #152]	; (8006cc0 <_svfiprintf_r+0x1f0>)
 8006c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c2c:	2206      	movs	r2, #6
 8006c2e:	f7f9 faf7 	bl	8000220 <memchr>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d038      	beq.n	8006ca8 <_svfiprintf_r+0x1d8>
 8006c36:	4b23      	ldr	r3, [pc, #140]	; (8006cc4 <_svfiprintf_r+0x1f4>)
 8006c38:	bb1b      	cbnz	r3, 8006c82 <_svfiprintf_r+0x1b2>
 8006c3a:	9b03      	ldr	r3, [sp, #12]
 8006c3c:	3307      	adds	r3, #7
 8006c3e:	f023 0307 	bic.w	r3, r3, #7
 8006c42:	3308      	adds	r3, #8
 8006c44:	9303      	str	r3, [sp, #12]
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	4433      	add	r3, r6
 8006c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4c:	e767      	b.n	8006b1e <_svfiprintf_r+0x4e>
 8006c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c52:	460c      	mov	r4, r1
 8006c54:	2001      	movs	r0, #1
 8006c56:	e7a5      	b.n	8006ba4 <_svfiprintf_r+0xd4>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	3401      	adds	r4, #1
 8006c5c:	9305      	str	r3, [sp, #20]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	f04f 0c0a 	mov.w	ip, #10
 8006c64:	4620      	mov	r0, r4
 8006c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c6a:	3a30      	subs	r2, #48	; 0x30
 8006c6c:	2a09      	cmp	r2, #9
 8006c6e:	d903      	bls.n	8006c78 <_svfiprintf_r+0x1a8>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0c5      	beq.n	8006c00 <_svfiprintf_r+0x130>
 8006c74:	9105      	str	r1, [sp, #20]
 8006c76:	e7c3      	b.n	8006c00 <_svfiprintf_r+0x130>
 8006c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e7f0      	b.n	8006c64 <_svfiprintf_r+0x194>
 8006c82:	ab03      	add	r3, sp, #12
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	462a      	mov	r2, r5
 8006c88:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <_svfiprintf_r+0x1f8>)
 8006c8a:	a904      	add	r1, sp, #16
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f3af 8000 	nop.w
 8006c92:	1c42      	adds	r2, r0, #1
 8006c94:	4606      	mov	r6, r0
 8006c96:	d1d6      	bne.n	8006c46 <_svfiprintf_r+0x176>
 8006c98:	89ab      	ldrh	r3, [r5, #12]
 8006c9a:	065b      	lsls	r3, r3, #25
 8006c9c:	f53f af2c 	bmi.w	8006af8 <_svfiprintf_r+0x28>
 8006ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ca2:	b01d      	add	sp, #116	; 0x74
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	ab03      	add	r3, sp, #12
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	462a      	mov	r2, r5
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <_svfiprintf_r+0x1f8>)
 8006cb0:	a904      	add	r1, sp, #16
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	f000 f87a 	bl	8006dac <_printf_i>
 8006cb8:	e7eb      	b.n	8006c92 <_svfiprintf_r+0x1c2>
 8006cba:	bf00      	nop
 8006cbc:	08007d44 	.word	0x08007d44
 8006cc0:	08007d4e 	.word	0x08007d4e
 8006cc4:	00000000 	.word	0x00000000
 8006cc8:	08006a19 	.word	0x08006a19
 8006ccc:	08007d4a 	.word	0x08007d4a

08006cd0 <_printf_common>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	4699      	mov	r9, r3
 8006cd8:	688a      	ldr	r2, [r1, #8]
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	bfb8      	it	lt
 8006ce4:	4613      	movlt	r3, r2
 8006ce6:	6033      	str	r3, [r6, #0]
 8006ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cec:	4607      	mov	r7, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b10a      	cbz	r2, 8006cf6 <_printf_common+0x26>
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	0699      	lsls	r1, r3, #26
 8006cfa:	bf42      	ittt	mi
 8006cfc:	6833      	ldrmi	r3, [r6, #0]
 8006cfe:	3302      	addmi	r3, #2
 8006d00:	6033      	strmi	r3, [r6, #0]
 8006d02:	6825      	ldr	r5, [r4, #0]
 8006d04:	f015 0506 	ands.w	r5, r5, #6
 8006d08:	d106      	bne.n	8006d18 <_printf_common+0x48>
 8006d0a:	f104 0a19 	add.w	sl, r4, #25
 8006d0e:	68e3      	ldr	r3, [r4, #12]
 8006d10:	6832      	ldr	r2, [r6, #0]
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	dc26      	bgt.n	8006d66 <_printf_common+0x96>
 8006d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d1c:	1e13      	subs	r3, r2, #0
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	bf18      	it	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	0692      	lsls	r2, r2, #26
 8006d26:	d42b      	bmi.n	8006d80 <_printf_common+0xb0>
 8006d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4638      	mov	r0, r7
 8006d30:	47c0      	blx	r8
 8006d32:	3001      	adds	r0, #1
 8006d34:	d01e      	beq.n	8006d74 <_printf_common+0xa4>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	68e5      	ldr	r5, [r4, #12]
 8006d3a:	6832      	ldr	r2, [r6, #0]
 8006d3c:	f003 0306 	and.w	r3, r3, #6
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	bf08      	it	eq
 8006d44:	1aad      	subeq	r5, r5, r2
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	6922      	ldr	r2, [r4, #16]
 8006d4a:	bf0c      	ite	eq
 8006d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d50:	2500      	movne	r5, #0
 8006d52:	4293      	cmp	r3, r2
 8006d54:	bfc4      	itt	gt
 8006d56:	1a9b      	subgt	r3, r3, r2
 8006d58:	18ed      	addgt	r5, r5, r3
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	341a      	adds	r4, #26
 8006d5e:	42b5      	cmp	r5, r6
 8006d60:	d11a      	bne.n	8006d98 <_printf_common+0xc8>
 8006d62:	2000      	movs	r0, #0
 8006d64:	e008      	b.n	8006d78 <_printf_common+0xa8>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	47c0      	blx	r8
 8006d70:	3001      	adds	r0, #1
 8006d72:	d103      	bne.n	8006d7c <_printf_common+0xac>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	e7c6      	b.n	8006d0e <_printf_common+0x3e>
 8006d80:	18e1      	adds	r1, r4, r3
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	2030      	movs	r0, #48	; 0x30
 8006d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d8a:	4422      	add	r2, r4
 8006d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d94:	3302      	adds	r3, #2
 8006d96:	e7c7      	b.n	8006d28 <_printf_common+0x58>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4638      	mov	r0, r7
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d0e6      	beq.n	8006d74 <_printf_common+0xa4>
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7d9      	b.n	8006d5e <_printf_common+0x8e>
	...

08006dac <_printf_i>:
 8006dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db0:	460c      	mov	r4, r1
 8006db2:	4691      	mov	r9, r2
 8006db4:	7e27      	ldrb	r7, [r4, #24]
 8006db6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006db8:	2f78      	cmp	r7, #120	; 0x78
 8006dba:	4680      	mov	r8, r0
 8006dbc:	469a      	mov	sl, r3
 8006dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dc2:	d807      	bhi.n	8006dd4 <_printf_i+0x28>
 8006dc4:	2f62      	cmp	r7, #98	; 0x62
 8006dc6:	d80a      	bhi.n	8006dde <_printf_i+0x32>
 8006dc8:	2f00      	cmp	r7, #0
 8006dca:	f000 80d8 	beq.w	8006f7e <_printf_i+0x1d2>
 8006dce:	2f58      	cmp	r7, #88	; 0x58
 8006dd0:	f000 80a3 	beq.w	8006f1a <_printf_i+0x16e>
 8006dd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ddc:	e03a      	b.n	8006e54 <_printf_i+0xa8>
 8006dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006de2:	2b15      	cmp	r3, #21
 8006de4:	d8f6      	bhi.n	8006dd4 <_printf_i+0x28>
 8006de6:	a001      	add	r0, pc, #4	; (adr r0, 8006dec <_printf_i+0x40>)
 8006de8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006dec:	08006e45 	.word	0x08006e45
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006dd5 	.word	0x08006dd5
 8006df8:	08006dd5 	.word	0x08006dd5
 8006dfc:	08006dd5 	.word	0x08006dd5
 8006e00:	08006dd5 	.word	0x08006dd5
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006dd5 	.word	0x08006dd5
 8006e0c:	08006dd5 	.word	0x08006dd5
 8006e10:	08006dd5 	.word	0x08006dd5
 8006e14:	08006dd5 	.word	0x08006dd5
 8006e18:	08006f65 	.word	0x08006f65
 8006e1c:	08006e89 	.word	0x08006e89
 8006e20:	08006f47 	.word	0x08006f47
 8006e24:	08006dd5 	.word	0x08006dd5
 8006e28:	08006dd5 	.word	0x08006dd5
 8006e2c:	08006f87 	.word	0x08006f87
 8006e30:	08006dd5 	.word	0x08006dd5
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006dd5 	.word	0x08006dd5
 8006e3c:	08006dd5 	.word	0x08006dd5
 8006e40:	08006f4f 	.word	0x08006f4f
 8006e44:	680b      	ldr	r3, [r1, #0]
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	600a      	str	r2, [r1, #0]
 8006e4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0a3      	b.n	8006fa0 <_printf_i+0x1f4>
 8006e58:	6825      	ldr	r5, [r4, #0]
 8006e5a:	6808      	ldr	r0, [r1, #0]
 8006e5c:	062e      	lsls	r6, r5, #24
 8006e5e:	f100 0304 	add.w	r3, r0, #4
 8006e62:	d50a      	bpl.n	8006e7a <_printf_i+0xce>
 8006e64:	6805      	ldr	r5, [r0, #0]
 8006e66:	600b      	str	r3, [r1, #0]
 8006e68:	2d00      	cmp	r5, #0
 8006e6a:	da03      	bge.n	8006e74 <_printf_i+0xc8>
 8006e6c:	232d      	movs	r3, #45	; 0x2d
 8006e6e:	426d      	negs	r5, r5
 8006e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e74:	485e      	ldr	r0, [pc, #376]	; (8006ff0 <_printf_i+0x244>)
 8006e76:	230a      	movs	r3, #10
 8006e78:	e019      	b.n	8006eae <_printf_i+0x102>
 8006e7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e7e:	6805      	ldr	r5, [r0, #0]
 8006e80:	600b      	str	r3, [r1, #0]
 8006e82:	bf18      	it	ne
 8006e84:	b22d      	sxthne	r5, r5
 8006e86:	e7ef      	b.n	8006e68 <_printf_i+0xbc>
 8006e88:	680b      	ldr	r3, [r1, #0]
 8006e8a:	6825      	ldr	r5, [r4, #0]
 8006e8c:	1d18      	adds	r0, r3, #4
 8006e8e:	6008      	str	r0, [r1, #0]
 8006e90:	0628      	lsls	r0, r5, #24
 8006e92:	d501      	bpl.n	8006e98 <_printf_i+0xec>
 8006e94:	681d      	ldr	r5, [r3, #0]
 8006e96:	e002      	b.n	8006e9e <_printf_i+0xf2>
 8006e98:	0669      	lsls	r1, r5, #25
 8006e9a:	d5fb      	bpl.n	8006e94 <_printf_i+0xe8>
 8006e9c:	881d      	ldrh	r5, [r3, #0]
 8006e9e:	4854      	ldr	r0, [pc, #336]	; (8006ff0 <_printf_i+0x244>)
 8006ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2308      	moveq	r3, #8
 8006ea6:	230a      	movne	r3, #10
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eae:	6866      	ldr	r6, [r4, #4]
 8006eb0:	60a6      	str	r6, [r4, #8]
 8006eb2:	2e00      	cmp	r6, #0
 8006eb4:	bfa2      	ittt	ge
 8006eb6:	6821      	ldrge	r1, [r4, #0]
 8006eb8:	f021 0104 	bicge.w	r1, r1, #4
 8006ebc:	6021      	strge	r1, [r4, #0]
 8006ebe:	b90d      	cbnz	r5, 8006ec4 <_printf_i+0x118>
 8006ec0:	2e00      	cmp	r6, #0
 8006ec2:	d04d      	beq.n	8006f60 <_printf_i+0x1b4>
 8006ec4:	4616      	mov	r6, r2
 8006ec6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eca:	fb03 5711 	mls	r7, r3, r1, r5
 8006ece:	5dc7      	ldrb	r7, [r0, r7]
 8006ed0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ed4:	462f      	mov	r7, r5
 8006ed6:	42bb      	cmp	r3, r7
 8006ed8:	460d      	mov	r5, r1
 8006eda:	d9f4      	bls.n	8006ec6 <_printf_i+0x11a>
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d10b      	bne.n	8006ef8 <_printf_i+0x14c>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	07df      	lsls	r7, r3, #31
 8006ee4:	d508      	bpl.n	8006ef8 <_printf_i+0x14c>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	6861      	ldr	r1, [r4, #4]
 8006eea:	4299      	cmp	r1, r3
 8006eec:	bfde      	ittt	le
 8006eee:	2330      	movle	r3, #48	; 0x30
 8006ef0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ef4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006ef8:	1b92      	subs	r2, r2, r6
 8006efa:	6122      	str	r2, [r4, #16]
 8006efc:	f8cd a000 	str.w	sl, [sp]
 8006f00:	464b      	mov	r3, r9
 8006f02:	aa03      	add	r2, sp, #12
 8006f04:	4621      	mov	r1, r4
 8006f06:	4640      	mov	r0, r8
 8006f08:	f7ff fee2 	bl	8006cd0 <_printf_common>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d14c      	bne.n	8006faa <_printf_i+0x1fe>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f14:	b004      	add	sp, #16
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	4835      	ldr	r0, [pc, #212]	; (8006ff0 <_printf_i+0x244>)
 8006f1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	680e      	ldr	r6, [r1, #0]
 8006f24:	061f      	lsls	r7, r3, #24
 8006f26:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f2a:	600e      	str	r6, [r1, #0]
 8006f2c:	d514      	bpl.n	8006f58 <_printf_i+0x1ac>
 8006f2e:	07d9      	lsls	r1, r3, #31
 8006f30:	bf44      	itt	mi
 8006f32:	f043 0320 	orrmi.w	r3, r3, #32
 8006f36:	6023      	strmi	r3, [r4, #0]
 8006f38:	b91d      	cbnz	r5, 8006f42 <_printf_i+0x196>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f023 0320 	bic.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	2310      	movs	r3, #16
 8006f44:	e7b0      	b.n	8006ea8 <_printf_i+0xfc>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	f043 0320 	orr.w	r3, r3, #32
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	2378      	movs	r3, #120	; 0x78
 8006f50:	4828      	ldr	r0, [pc, #160]	; (8006ff4 <_printf_i+0x248>)
 8006f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f56:	e7e3      	b.n	8006f20 <_printf_i+0x174>
 8006f58:	065e      	lsls	r6, r3, #25
 8006f5a:	bf48      	it	mi
 8006f5c:	b2ad      	uxthmi	r5, r5
 8006f5e:	e7e6      	b.n	8006f2e <_printf_i+0x182>
 8006f60:	4616      	mov	r6, r2
 8006f62:	e7bb      	b.n	8006edc <_printf_i+0x130>
 8006f64:	680b      	ldr	r3, [r1, #0]
 8006f66:	6826      	ldr	r6, [r4, #0]
 8006f68:	6960      	ldr	r0, [r4, #20]
 8006f6a:	1d1d      	adds	r5, r3, #4
 8006f6c:	600d      	str	r5, [r1, #0]
 8006f6e:	0635      	lsls	r5, r6, #24
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	d501      	bpl.n	8006f78 <_printf_i+0x1cc>
 8006f74:	6018      	str	r0, [r3, #0]
 8006f76:	e002      	b.n	8006f7e <_printf_i+0x1d2>
 8006f78:	0671      	lsls	r1, r6, #25
 8006f7a:	d5fb      	bpl.n	8006f74 <_printf_i+0x1c8>
 8006f7c:	8018      	strh	r0, [r3, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	4616      	mov	r6, r2
 8006f84:	e7ba      	b.n	8006efc <_printf_i+0x150>
 8006f86:	680b      	ldr	r3, [r1, #0]
 8006f88:	1d1a      	adds	r2, r3, #4
 8006f8a:	600a      	str	r2, [r1, #0]
 8006f8c:	681e      	ldr	r6, [r3, #0]
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	2100      	movs	r1, #0
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7f9 f944 	bl	8000220 <memchr>
 8006f98:	b108      	cbz	r0, 8006f9e <_printf_i+0x1f2>
 8006f9a:	1b80      	subs	r0, r0, r6
 8006f9c:	6060      	str	r0, [r4, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa8:	e7a8      	b.n	8006efc <_printf_i+0x150>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	4632      	mov	r2, r6
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	47d0      	blx	sl
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d0ab      	beq.n	8006f10 <_printf_i+0x164>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	079b      	lsls	r3, r3, #30
 8006fbc:	d413      	bmi.n	8006fe6 <_printf_i+0x23a>
 8006fbe:	68e0      	ldr	r0, [r4, #12]
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	bfb8      	it	lt
 8006fc6:	4618      	movlt	r0, r3
 8006fc8:	e7a4      	b.n	8006f14 <_printf_i+0x168>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d09b      	beq.n	8006f10 <_printf_i+0x164>
 8006fd8:	3501      	adds	r5, #1
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	9903      	ldr	r1, [sp, #12]
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dcf2      	bgt.n	8006fca <_printf_i+0x21e>
 8006fe4:	e7eb      	b.n	8006fbe <_printf_i+0x212>
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	f104 0619 	add.w	r6, r4, #25
 8006fec:	e7f5      	b.n	8006fda <_printf_i+0x22e>
 8006fee:	bf00      	nop
 8006ff0:	08007d55 	.word	0x08007d55
 8006ff4:	08007d66 	.word	0x08007d66

08006ff8 <__retarget_lock_acquire_recursive>:
 8006ff8:	4770      	bx	lr

08006ffa <__retarget_lock_release_recursive>:
 8006ffa:	4770      	bx	lr

08006ffc <memmove>:
 8006ffc:	4288      	cmp	r0, r1
 8006ffe:	b510      	push	{r4, lr}
 8007000:	eb01 0402 	add.w	r4, r1, r2
 8007004:	d902      	bls.n	800700c <memmove+0x10>
 8007006:	4284      	cmp	r4, r0
 8007008:	4623      	mov	r3, r4
 800700a:	d807      	bhi.n	800701c <memmove+0x20>
 800700c:	1e43      	subs	r3, r0, #1
 800700e:	42a1      	cmp	r1, r4
 8007010:	d008      	beq.n	8007024 <memmove+0x28>
 8007012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800701a:	e7f8      	b.n	800700e <memmove+0x12>
 800701c:	4402      	add	r2, r0
 800701e:	4601      	mov	r1, r0
 8007020:	428a      	cmp	r2, r1
 8007022:	d100      	bne.n	8007026 <memmove+0x2a>
 8007024:	bd10      	pop	{r4, pc}
 8007026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800702a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800702e:	e7f7      	b.n	8007020 <memmove+0x24>

08007030 <_malloc_usable_size_r>:
 8007030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007034:	1f18      	subs	r0, r3, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	bfbc      	itt	lt
 800703a:	580b      	ldrlt	r3, [r1, r0]
 800703c:	18c0      	addlt	r0, r0, r3
 800703e:	4770      	bx	lr

08007040 <_init>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	bf00      	nop
 8007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007046:	bc08      	pop	{r3}
 8007048:	469e      	mov	lr, r3
 800704a:	4770      	bx	lr

0800704c <_fini>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr
